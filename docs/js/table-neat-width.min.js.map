{"version":3,"sources":["table-neat-width.js"],"names":["window","NACSS","NS","_createHeaderClone","tab","cm","thead","tHead","trs","tBodies","rows","length","containsOnlyTh","tr","tds","getElementsByTagName","ths","trsH","push","createTHead","appendChild","_createPseudoHeader","hc","document","createElement","enableClass","styleHeaderContainer","parentNode","ht","styleHeaderTable","cloneNode","_createBarClone","bar","styleScrollBar","spacer","onResize","r","head","style","overflowX","scrollWidth","clientWidth","tw","width","getBoundingClientRect","maxWidth","display","top","offset","hw","firstChild","oTrs","cTrs","i","copyWidth","o","c","tag","os","cs","_updateHeaderSize","disabled","pointerEvents","h","parseInt","parent","d","setAttribute","getComputedStyle","getPropertyValue","overflowY","minHeight","cw","offsetWidth","removeChild","getScrollBarWidth","documentElement","height","_updateScrollBarSize","onWindowScroll","onTableScroll","tBottom","bottom","rh","hTop","hBottom","wY0","wY1","innerHeight","inView","capableWindowHeightRate","tLeft","left","tScrollLeft","scrollLeft","hCy","offsetHeight","visible","tabLeft","tabScrollLeft","_updateHeaderVisibility","_updateBarVisibility","sL","Math","max","min","styleScrollRight","styleScrollLeft","tableNeatWidth","tabs","opts","Object","assign","styleFixedHeader","ts","forced","el","tar","op","throttle","addEventListener","ro","ResizeObserver","es","e","idx","indexOf","target","contentRect","t","observe","passive","sel","cls","startsWith","substr","replace","charAt","toLowerCase","elm","querySelector"],"mappings":"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","file":"table-neat-width.min.js","sourcesContent":["/**\n *\n * Table Style - Neat Width (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-25\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t/**\n\t *\n\t * Neat Width\n\t *\n\t * @author Takuto Yanagida\n\t * @version 2021-01-25\n\t *\n\t */\n\t\n\t\n\tfunction initialize(tabs, opts = {}) {\n\t\tif (tabs.length === 0) return;\n\t\n\t\tconst lt = tabs[tabs.length - 1];\n\t\tconst cm = Object.assign({\n\t\t\tfullWidthRate   : 0.95,\n\t\t\tcellMinWidth    : 80,\n\t\t\tcellMinAspect   : 2 / 3,  // width / height\n\t\t\tcellMinLength   : 8,\n\t\t\tmaxRowSize      : 200,\n\t\t\tmaxBorderWidth  : 2,\n\t\t\tbefore          : null,  // function (table) { ...; return delay; }\n\t\t\tafter           : null,  // function (table) { ... }\n\t\t\tstyleNeat       : ':ncTableNeat',\n\t\t\tstyleFull       : ':ncTableFull',\n\t\t\tstyleScrollRight: ':ncScrollRight',\n\t\t\tstyleScrollLeft : ':ncScrollLeft',\n\t\t}, opts, getCommonMetrics(lt));\n\t\n\t\tcm.padH += cm.maxBorderWidth * 2;\n\t\tcm.padV += cm.maxBorderWidth * 2;\n\t\tcm.dcTd = makeDummyCell(lt, 'td');\n\t\tcm.dcTh = makeDummyCell(lt, 'th');\n\t\n\t\tconst tarTabs = [], noTarTabs = [];\n\t\tfor (const t of tabs) {\n\t\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\t\telse noTarTabs.push(t);\n\t\t}\n\t\tcm.gcCount = tarTabs.length;\n\t\n\t\tfor (const t of tarTabs) {\n\t\t\tconst delay = (cm.before) ? (cm.before(t) ?? 0) : false;\n\t\t\tst(() => {\n\t\t\t\tapply(t, cm);\n\t\t\t\tenableClass(true, t, cm.styleNeat);\n\t\t\t\tif (cm.after) cm.after(t);\n\t\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t\t}, delay);\n\t\t}\n\t\tif (cm.fullWidthRate) {\n\t\t\tfor (const t of noTarTabs) {\n\t\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\t\tif (pw * cm.fullWidthRate < t.clientWidth) enableClass(true, t, cm.styleFull);\n\t\t\t}\n\t\t}\n\t\tfunction st(fn, d) { (d === false) ? fn() : setTimeout(fn, d); }\n\t\tinitScroll(tarTabs, cm);\n\t}\n\t\n\tfunction getCommonMetrics(tab) {\n\t\tconst td = tab.getElementsByTagName('td')[0];\n\t\tconst s = getComputedStyle(td);\n\t\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\t\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\t\tconst [charW, lineH] = getTextSize(td);\n\t\treturn { padH, padV, charW, lineH };\n\t}\n\t\n\tfunction getTextSize(elm) {\n\t\tconst d = document.createElement(elm.nodeName);\n\t\td.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\t\td.innerHTML = '\\u3000';  // Full width space\n\t\telm.parentNode.appendChild(d);\n\t\tconst w = d.clientWidth;\n\t\tconst h = d.clientHeight;\n\t\td.parentNode.removeChild(d);\n\t\treturn [w, h];\n\t}\n\t\n\tfunction makeDummyCell(t, tagName) {\n\t\tconst d = document.createElement(tagName);\n\t\td.setAttribute('style', `position:fixed;display:inline-block;visibility:hidden;white-space:nowrap;`);\n\t\treturn t.appendChild(d);\n\t}\n\t\n\tfunction removeDummyCell(lt, cMat) {\n\t\tlt.removeChild(cMat.dcTd);\n\t\tlt.removeChild(cMat.dcTh);\n\t}\n\t\n\tfunction isTarget(tab, cMet) {\n\t\tif (tab.rows.length === 0) return false;\n\t\tif (cMet.maxRowSize < tab.rows.length) return false;\n\t\n\t\tconst { cellMinWidth, cellMinAspect } = cMet;\n\t\tfor (const tr of tab.rows) {\n\t\t\tif (!tr.hasChildNodes()) continue;\n\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\tconst tn = n.tagName;\n\t\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\t\tconst cw = n.clientWidth;\n\t\t\t\tconst ch = n.clientHeight;\n\t\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction initScroll(tabs, cMet) {\n\t\tconst rob = new ResizeObserver(oes => {\n\t\t\tfor (const oe of oes) onScroll(oe.target, cMet);\n\t\t});\n\t\tfor (const t of tabs) {\n\t\t\trob.observe(t);\n\t\t\tt.addEventListener('scroll', throttle(() => { onScroll(t, cMet); }));\n\t\t}\n\t}\n\t\n\tfunction onScroll(tab, cMet) {\n\t\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\n\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\n\t\t\tenableClass(r < 0.95, tab, cMet.styleScrollRight);\n\t\t\tenableClass(0.05 < r, tab, cMet.styleScrollLeft);\n\t\t} else {\n\t\t\tenableClass(false, tab, cMet.styleScrollRight);\n\t\t\tenableClass(false, tab, cMet.styleScrollLeft);\n\t\t}\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction apply(tab, cMet) {\n\t\ttab.removeAttribute('width');\n\t\tif (tab.style.width) tab.style.width = null;\n\t\tif (tab.style.height) tab.style.height = null;\n\t\n\t\tconst grid  = makeCellGrid(tab);\n\t\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\t\tconst newWs = calcNewWidths(grid, met);\n\t\tsetCellWidth(grid, newWs);\n\t\n\t\tconst cs = tab.getElementsByTagName('caption');\n\t\tif (cs.length) cs[0].innerHTML = `<span>${cs[0].innerHTML}</span>`;\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction makeCellGrid(t) {\n\t\tconst css = collectCells(t);\n\t\tlet maxWidth = 0;\n\t\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\t\tconst g = [];\n\t\tfor (const cs of css) g.push(new Array(maxWidth));\n\t\n\t\tfor (let y = 0; y < g.length; y += 1) {\n\t\t\tconst gr = g[y];\n\t\t\tconst tds = css[y];\n\t\t\tlet i = 0;\n\t\n\t\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\t\n\t\t\t\tconst td = tds[i]\n\t\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\t\tgr[x] = td;\n\t\n\t\t\t\tif (1 < col) {\n\t\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t\t}\n\t\t\t\tif (1 < row) {\n\t\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti += 1;\n\t\t\t\tif (tds.length <= i) break;\n\t\t\t}\n\t\t}\n\t\treturn g;\n\t}\n\t\n\tfunction collectCells(t, css = []) {\n\t\tfor (const tr of t.rows) {\n\t\t\tconst cs = [];\n\t\t\tif (tr.hasChildNodes()) {\n\t\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\t\tconst tn = n.tagName;\n\t\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcss.push(cs);\n\t\t}\n\t\treturn css;\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction getMetrics(tab, grid) {\n\t\tconst origTabW = tab.clientWidth;\n\t\tconst origCellWs = [];\n\t\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\t\tconst g = grid[y][x];\n\t\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { origTabW, origCellWs };\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction calcNewWidths(grid, met) {\n\t\tfor (const gr of grid) {\n\t\t\tfor (const gc of gr) {\n\t\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t}\n\t\tconst gw = grid[0].length;\n\t\tconst newWs = new Array(gw).fill(0);\n\t\tconst fixWs = new Array(gw).fill(0);\n\t\n\t\tfor (const gr of grid) {\n\t\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\t\tconst td = gr[x];\n\t\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\t\n\t\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t\t}\n\t\t}\n\t\twidenTabWidth(newWs, fixWs, met);\n\t\treturn newWs;\n\t}\n\t\n\tfunction calcMinWidth(td, met) {\n\t\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\t\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\t\n\t\ttd.innerHTML = td.innerHTML.trim();\n\t\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\t\tdc.innerHTML = td.innerHTML;\n\t\tconst aw = dc.clientWidth - padH;\n\t\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\t\tlet minW = 0;\n\t\tfor (let i = 2;; i += 1) {\n\t\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\t\tconst tempH = ls * (i * lineH) + padV;\n\t\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\t\tminW = tempW;\n\t\t}\n\t\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n\t}\n\t\n\tfunction calcMaxLineLength(td) {\n\t\tconst ih = td.innerHTML.trim();\n\t\tconst ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\t\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\t\treturn Math.max(...ts);\n\t}\n\t\n\tfunction widenTabWidth(newWs, fixWs, met) {\n\t\tconst { origTabW, origCellWs } = met;\n\t\tlet wNew = 0, wFix = 0;\n\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\tif (newWs[i]) {\n\t\t\t\twNew += newWs[i];\n\t\t\t} else {\n\t\t\t\twFix += fixWs[i];\n\t\t\t}\n\t\t}\n\t\tif (origTabW < wNew + wFix) return;\n\t\tlet rem = origTabW - wFix;\n\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\tif (!newWs[i]) continue;\n\t\t\tconst nw = newWs[i];\n\t\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\t\trem  -= (w - nw);\n\t\t\twNew -= (w - nw);\n\t\t\tnewWs[i] = 0 | w;\n\t\t}\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction setCellWidth(grid, ws) {\n\t\tfor (const gr of grid) {\n\t\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\t\tgc.style.whiteSpace = null;\n\t\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\t\tgc.style.width      = null;\n\t\t\t}\n\t\t}\n\t}\n\tNS.tableNeatWidth = initialize;\n\n\t/**\n\t *\n\t * Usable View\n\t *\n\t * @author Takuto Yanagida\n\t * @version 2021-01-25\n\t *\n\t */\n\t\n\t\n\tfunction initialize(tabs, opts = {}) {\n\t\tif (tabs.length === 0) return;\n\t\tconst cm = Object.assign({\n\t\t\tcapableWindowHeightRate: 0.9,\n\t\t\tstyleHeaderContainer   : ':ncTableFixedHeaderContainer',\n\t\t\tstyleHeaderTable       : ':ncTableFixedHeaderTable',\n\t\t\tstyleScrollBar         : ':ncTableFixedScrollBar',\n\t\n\t\t\tstyleFixedHeader       : ':ncFixedHeader',\n\t\t\tstyleScrollRight       : ':ncScrollRight',\n\t\t\tstyleScrollLeft        : ':ncScrollLeft',\n\t\t\toffset                 : 0,\n\t\t}, opts);\n\t\n\t\tconst cs = [], ts = [...tabs];\n\t\tfor (const tab of ts) {\n\t\t\tconst head = _createHeaderClone(tab, cm);\n\t\t\tconst bar  = _createBarClone(tab, cm);\n\t\t\tcs.push({ tab, head, bar });\n\t\n\t\t\tlet forced = false;\n\t\t\tconst el = (tar, op) => throttle(() => {\n\t\t\t\tif (forced) {\n\t\t\t\t\tforced = false;\n\t\t\t\t} else {\n\t\t\t\t\tforced = true;\n\t\t\t\t\top.scrollLeft = tar.scrollLeft;\n\t\t\t\t\tif (head) onTableScroll(tab, head, cm);\n\t\t\t\t}\n\t\t\t});\n\t\t\ttab.addEventListener('scroll', el(tab, bar));\n\t\t\tbar.addEventListener('scroll', el(bar, tab));\n\t\t}\n\t\tconst ro = new ResizeObserver((es) => {\n\t\t\tfor (const e of es) {\n\t\t\t\tconst idx = ts.indexOf(e.target);\n\t\t\t\tconst c = cs[idx];\n\t\t\t\tonResize(e.contentRect, c.tab, c.head, c.bar, cm);\n\t\t\t}\n\t\t});\n\t\tfor (const t of ts) ro.observe(t);\n\t\n\t\twindow.addEventListener('scroll', throttle(() => {\n\t\t\tfor (const c of cs) onWindowScroll(c.tab, c.head, c.bar, cm);\n\t\t}), { passive: true });\n\t\n\t\tconst sel = getSelector(cm.styleFixedHeader);\n\t\tif (sel) {\n\t\t\tconst elm = document.querySelector(sel);\n\t\t\tif (elm) {\n\t\t\t\tconst rob = new ResizeObserver(es => {\n\t\t\t\t\tcm.offset = es[0].contentRect.bottom;\n\t\t\t\t\tfor (const c of cs) onResize(null, c.tab, c.head, c.bar, cm);\n\t\t\t\t});\n\t\t\t\trob.observe(elm);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction _createHeaderClone(tab, cm) {\n\t\tlet thead = tab.tHead;\n\t\tif (!thead) {\n\t\t\tthead = _createPseudoHeader(tab);\n\t\t\tif (!thead) return null;\n\t\t\ttab.tHead = thead;\n\t\t}\n\t\tconst hc = document.createElement('div');\n\t\tenableClass(true, hc, cm.styleHeaderContainer);\n\t\ttab.parentNode.appendChild(hc);\n\t\n\t\tconst ht = document.createElement('div');\n\t\tenableClass(true, ht, cm.styleHeaderTable);\n\t\thc.appendChild(ht);\n\t\n\t\tht.appendChild(thead.cloneNode(true));\n\t\treturn hc;\n\t}\n\t\n\tfunction _createPseudoHeader(tab) {\n\t\tconst trs = tab.tBodies[0].rows;\n\t\tif (trs.length === 0) return null;\n\t\n\t\tfunction containsOnlyTh(tr) {\n\t\t\tconst tds = tr.getElementsByTagName('td');\n\t\t\tconst ths = tr.getElementsByTagName('th');\n\t\t\tif (tds.length === 0 && ths.length > 0) return true;\n\t\t\treturn false;\n\t\t}\n\t\tconst trsH = [];\n\t\tfor (const tr of trs) {\n\t\t\tif (!containsOnlyTh(tr)) break;\n\t\t\ttrsH.push(tr);\n\t\t}\n\t\tif (trsH.length === 0) return null;\n\t\n\t\tconst thead = tab.createTHead();\n\t\tfor (const tr of trsH) thead.appendChild(tr);\n\t\treturn thead;\n\t}\n\t\n\tfunction _createBarClone(tab, cm) {\n\t\tconst bar = document.createElement('div');\n\t\tenableClass(true, bar, cm.styleScrollBar);\n\t\tconst spacer = document.createElement('div');\n\t\tbar.appendChild(spacer);\n\t\ttab.parentNode.appendChild(bar);\n\t\treturn bar;\n\t}\n\t\n\t\n\t// ---------------------------------------------------------------------\n\t\n\t\n\tfunction onResize(r, tab, head, bar, cm) {\n\t\ttab.style.overflowX = (tab.scrollWidth < tab.clientWidth + 2) ? 'hidden' : null;\n\t\n\t\tif (head) _updateHeaderSize(r, tab, head, cm);\n\t\tif (bar) _updateScrollBarSize(tab, bar);\n\t\tif (head || bar) onWindowScroll(tab, head, bar, cm);\n\t\tif (head) onTableScroll(tab, head, cm);\n\t}\n\t\n\tfunction _updateHeaderSize(r, tab, head, cm) {\n\t\tconst tw = r ? r.width : tab.getBoundingClientRect().width;\n\t\thead.style.maxWidth = tw + 'px';\n\t\thead.style.display  = 'none';\n\t\thead.style.top      = cm.offset + 'px';\n\t\n\t\tconst thead = tab.tHead;\n\t\tconst hw = thead.getBoundingClientRect().width;\n\t\tconst ht = head.firstChild;\n\t\tht.style.width = hw + 'px';\n\t\n\t\tconst oTrs = thead.rows;\n\t\tconst cTrs = ht.firstChild.rows;\n\t\tfor (let i = 0; i < oTrs.length; i += 1) {\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\n\t\t}\n\t\tfunction copyWidth(o, c, tag) {\n\t\t\tconst os = o.getElementsByTagName(tag);\n\t\t\tconst cs = c.getElementsByTagName(tag);\n\t\t\tfor (let i = 0; i < os.length; i += 1) {\n\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction _updateScrollBarSize(tab, bar) {\n\t\tconst disabled = (tab.scrollWidth < tab.clientWidth + 2);\n\t\tbar.style.overflowX     = disabled ? 'hidden' : null;\n\t\tbar.style.pointerEvents = disabled ? 'none'   : null;\n\t\n\t\tbar.style.maxWidth = `${tab.clientWidth}px`;\n\t\tbar.style.display = 'none';\n\t\tconst h = parseInt(getScrollBarWidth(document.documentElement));\n\t\tif (0 < h) bar.style.height = (h + 2) + 'px';\n\t\tbar.firstChild.style.width = `${tab.scrollWidth}px`;\n\t}\n\t\n\t\n\t// ---------------------------------------------------------------------\n\t\n\t\n\tfunction onWindowScroll(tab, head, bar, cm) {\n\t\tconst r = tab.getBoundingClientRect();\n\t\tconst tBottom = r.bottom;\n\t\tconst rh = tab.tHead.getBoundingClientRect();\n\t\tconst hTop = rh.top, hBottom = rh.bottom;\n\t\tconst wY0 = cm.offset, wY1 = window.innerHeight;\n\t\n\t\tconst inView = tBottom - hTop < cm.capableWindowHeightRate * (wY1 - wY0);\n\t\tconst tLeft = r.left, tScrollLeft = tab.scrollLeft;\n\t\tif (head) {\n\t\t\tconst hCy = tab.tHead.offsetHeight;\n\t\t\tconst f = (!inView && hTop < wY0 && wY0 < tBottom - hCy);\n\t\t\t_updateHeaderVisibility(head, f, tLeft, tScrollLeft);\n\t\t}\n\t\tif (bar) {\n\t\t\tconst f = (!inView && hBottom < wY1 && wY1 < tBottom);\n\t\t\t_updateBarVisibility(bar, f, tLeft, tScrollLeft);\n\t\t}\n\t}\n\t\n\tfunction _updateHeaderVisibility(head, visible, tabLeft, tabScrollLeft) {\n\t\thead.style.display = visible ? 'block' : 'none';\n\t\thead.style.left    = tabLeft + 'px';\n\t\thead.scrollLeft    = tabScrollLeft;\n\t}\n\t\n\tfunction _updateBarVisibility(bar, visible, tabLeft, tabScrollLeft) {\n\t\tbar.style.display = visible ? 'block' : 'none';\n\t\tbar.style.left    = tabLeft + 'px';\n\t\tbar.scrollLeft    = tabScrollLeft;\n\t}\n\t\n\t\n\t// ---------------------------------------------------------------------\n\t\n\t\n\tfunction onTableScroll(tab, head, cm) {\n\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\n\t\thead.scrollLeft = sL;\n\t\n\t\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\n\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\n\t\t\tenableClass(r < 0.95, head, cm.styleScrollRight);\n\t\t\tenableClass(0.05 < r, head, cm.styleScrollLeft);\n\t\t} else {\n\t\t\tenableClass(false, head, cm.styleScrollRight);\n\t\t\tenableClass(false, head, cm.styleScrollLeft);\n\t\t}\n\t}\n\t\n\t\n\t// Utilities ---------------------------------------------------------------\n\t\n\t\n\tfunction getSelector(cls) {\n\t\tif (cls.startsWith(':')) {\n\t\t\treturn `*[data-${cls.substr(1).replace(/([A-Z])/g, c => '-' + c.charAt(0).toLowerCase())}]`;\n\t\t} else {\n\t\t\treturn `*${cls}`;\n\t\t}\n\t}\n\t\n\tfunction getScrollBarWidth(parent) {\n\t\tconst d = document.createElement('div');\n\t\td.setAttribute('style', 'position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;');\n\t\tparent.appendChild(d);\n\t\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\n\t\n\t\tif (width === 0) {  // Window does not have any scroll bar\n\t\t\td.style.overflowY = 'scroll';\n\t\t\td.style.width = '';\n\t\t\tconst c = document.createElement('div');\n\t\t\tc.style.minHeight = '100px';\n\t\t\td.appendChild(c);\n\t\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\n\t\t\twidth = d.offsetWidth - cw;\n\t\t}\n\t\tparent.removeChild(d);\n\t\treturn width;\n\t}\n\n})(window.NACSS);\n"]}