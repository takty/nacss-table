{"version":3,"sources":["table-fixed-header.js","_fixed-header.js"],"names":["window","NACSS","NS","ST_STATE_ENLARGED","getOffset","scrollBarWidth","FixedHeaderTable","constructor","tab","style","height","this","_table","_headerHeight","_isEnlarged","_windowWidth","Math","min","outerWidth","innerWidth","_create","setTimeout","_initialize","_head","_createHeaderClone","_sbar","_createScrollBarClone","_ebtn","containStile","_createEnlargerButton","_shade","_createShade","caps","getElementsByTagName","_capt","length","thead","tHead","_createPseudoHeader","cont","document","createElement","addStile","parentNode","appendChild","ptab","clone","cloneNode","trs","tBodies","rows","containsOnlyTh","tr","tds","ths","trsH","i","I","push","createTHead","sbar","spacer","ebtn","dataset","shade","bg","getComputedStyle","backgroundColor","_initTableScroll","addEventListener","_turnOffEnlarged","_turnOnEnlarged","_isEnlargable","display","_resize","_adjustUnexpectedScrollBar","tableScrollChanged","sbarScrollChanged","throttle","scrollLeft","_onTableScroll","_isScrollable","t","scrollWidth","clientWidth","ww","offsetWidth","width","left","getBoundingClientRect","pageXOffset","pwidth","marginLeft","background","removeStile","onWindowResize","overflowX","_updateHeaderSize","_updateScrollBarSize","onWindowScroll","maxWidth","top","w","firstChild","oTrs","cTrs","copyWidth","o","c","tag","os","cs","h","parseInt","_getScrollBarWidth","tbody","ceil","tabTop","tabBottom","bottom","offset","capH","offsetHeight","headH","inView","innerHeight","headVisible","sbarVisible","updateHeaderVisibility","updateScrollBarVisibility","visible","tabLeft","head","switchEnlargerToFloatingHeader","switchEnlargerToTable","removeChild","capt","sL","max","_stCapt","clearTimeout","transform","_stEbtn","_updateEnlager","_stShade","_updateShade","scrW","cltW","etbRight","diff","parentElement","right","s","_calcShadeStyle","r","rl","rr","ch","sl","sr","dummy","position","body","getPropertyValue","overflowY","minHeight","cw","tableFixedHeader","tabs","conts","onScroll","onResize"],"mappings":"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","file":"table-fixed-header.min.js","sourcesContent":["/**\n *\n * Table Style - Fixed Header (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-04\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t/**\r\n\t *\r\n\t * Fixed Header (JS)\r\n\t *\r\n\t * @author Takuto Yanagida\r\n\t * @version 2021-01-04\r\n\t *\r\n\t */\r\n\t\r\n\t\r\n\tconst SEL_TARGET = '.stile';\r\n\t\r\n\tconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\n\tconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\n\tconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\tconst ST_ENLARGER_BUTTON  = 'enlarger-button';\r\n\tconst ST_TABLE_SHADE      = 'table-shade';\r\n\tconst ST_STATE_ENLARGED   = 'table-enlarged';\r\n\tconst ST_OPT_NO_ENLARGER  = 'no-enlarger';\r\n\t\r\n\tconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\tconst ENLARGER_WINDOW_WIDTH_RATIO = 0.9;\r\n\t\r\n\tlet getOffset;\r\n\tlet scrollBarWidth;\r\n\t\r\n\t// NS.addInit(4, () => {\r\n\t// \tgetOffset = NS.makeOffsetFunction(false, true);  // Initialize here\r\n\t\r\n\t// \tconst tabs = document.querySelectorAll(SEL_TARGET + ' table:not([class])');\r\n\t// \tsetTimeout(() => { initialize(tabs); }, 0);  // Delay for IE11\r\n\t// });\r\n\t\r\n\t\r\n\t// -------------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction initialize(tabs) {\r\n\t\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\t\tconst conts = [];\r\n\t\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\t\tNS.onScroll(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); });\r\n\t\tNS.onResize(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); });\r\n\t}\r\n\t\r\n\tclass FixedHeaderTable {\r\n\t\r\n\t\tconstructor (tab) {\r\n\t\t\tif (tab.style.height) tab.style.height = '';\r\n\t\t\tthis._table        = tab;\r\n\t\t\tthis._headerHeight = 0;\r\n\t\t\tthis._isEnlarged   = false;\r\n\t\t\tthis._windowWidth  = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\tthis._create();\r\n\t\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t\t}\r\n\t\r\n\t\t_create() {\r\n\t\t\tthis._head = this._createHeaderClone();\r\n\t\t\tthis._sbar = this._createScrollBarClone();\r\n\t\t\tthis._ebtn = NS.containStile(this._table, ST_OPT_NO_ENLARGER) ? null : this._createEnlargerButton();\r\n\t\t\tthis._shade = this._createShade();\r\n\t\r\n\t\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t\t}\r\n\t\r\n\t\t_createHeaderClone() {\r\n\t\t\tlet thead = this._table.tHead;\r\n\t\t\tif (!thead) {\r\n\t\t\t\tthead = this._createPseudoHeader();\r\n\t\t\t\tif (!thead) return null;\r\n\t\t\t\tthis._table.tHead = thead;\r\n\t\t\t}\r\n\t\t\tconst cont = document.createElement('div');\r\n\t\t\tNS.addStile(cont, ST_HEADER_CONTAINER);\r\n\t\t\tthis._table.parentNode.appendChild(cont);\r\n\t\r\n\t\t\tconst ptab = document.createElement('div');\r\n\t\t\tNS.addStile(ptab, ST_HEADER_TABLE);\r\n\t\t\tcont.appendChild(ptab);\r\n\t\r\n\t\t\tconst clone = thead.cloneNode(true);\r\n\t\t\tptab.appendChild(clone);\r\n\t\r\n\t\t\tif (NS.containStile(this._table, ST_STATE_ENLARGED)) NS.addStile(cont, ST_STATE_ENLARGED);\r\n\t\t\treturn cont;\r\n\t\t}\r\n\t\r\n\t\t_createPseudoHeader() {\r\n\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\tconst trs = tbody.rows;\r\n\t\t\tif (trs.length === 0) return null;\r\n\t\r\n\t\t\tfunction containsOnlyTh(tr) {\r\n\t\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\r\n\t\t\tconst trsH = [];\r\n\t\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\t\tconst tr = trs[i];\r\n\t\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\t\ttrsH.push(tr);\r\n\t\t\t}\r\n\t\t\tif (trsH.length === 0) return null;\r\n\t\r\n\t\t\tconst thead = this._table.createTHead();\r\n\t\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\t\tthead.appendChild(trsH[i]);\r\n\t\t\t}\r\n\t\t\treturn thead;\r\n\t\t}\r\n\t\r\n\t\t_createScrollBarClone() {\r\n\t\t\tconst sbar = document.createElement('div');\r\n\t\t\tNS.addStile(sbar, ST_SCROLL_BAR);\r\n\t\t\tthis._table.parentNode.appendChild(sbar);\r\n\t\t\tconst spacer = document.createElement('div');\r\n\t\t\tsbar.appendChild(spacer);\r\n\t\t\treturn sbar;\r\n\t\t}\r\n\t\r\n\t\t_createEnlargerButton() {\r\n\t\t\tconst ebtn = document.createElement('div');\r\n\t\t\tebtn.dataset['stile'] = ST_ENLARGER_BUTTON;\r\n\t\t\tthis._table.appendChild(ebtn);\r\n\t\t\treturn ebtn;\r\n\t\t}\r\n\t\r\n\t\t_createShade() {\r\n\t\t\tconst shade = document.createElement('div');\r\n\t\t\tshade.dataset['stile'] = ST_TABLE_SHADE;\r\n\t\t\tthis._table.appendChild(shade);\r\n\t\t\treturn shade;\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\t_initialize() {\r\n\t\t\tconst bg = getComputedStyle(this._table).backgroundColor;\r\n\t\t\tif (bg && bg !== 'transparent') this._table.dataset['background'] = bg;\r\n\t\r\n\t\t\tthis._initTableScroll();\r\n\t\t\tif (this._ebtn) {\r\n\t\t\t\tthis._ebtn.addEventListener('click', () => {\r\n\t\t\t\t\tif (this._isEnlarged) this._turnOffEnlarged();\r\n\t\t\t\t\telse this._turnOnEnlarged();\r\n\t\t\t\t});\r\n\t\t\t\tif (!this._isEnlargable()) this._ebtn.style.display = 'none';\r\n\t\t\t}\r\n\t\t\tthis._resize();\r\n\t\t\tthis._adjustUnexpectedScrollBar()\r\n\t\t}\r\n\t\r\n\t\t_initTableScroll() {\r\n\t\t\tlet tableScrollChanged = false;\r\n\t\t\tlet sbarScrollChanged  = false;\r\n\t\t\tthis._table.addEventListener('scroll', NS.throttle(() => {\r\n\t\t\t\tif (tableScrollChanged) {\r\n\t\t\t\t\ttableScrollChanged = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis._onTableScroll();\r\n\t\t\t}));\r\n\t\t\tthis._sbar.addEventListener('scroll', NS.throttle(() => {\r\n\t\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\t\ttableScrollChanged = true;\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\r\n\t\t_isScrollable() {\r\n\t\t\tconst t = this._table;\r\n\t\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t\t}\r\n\t\r\n\t\t_isEnlargable() {\r\n\t\t\tconst t = this._table;\r\n\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\treturn (t.scrollWidth - t.offsetWidth > 1 && t.offsetWidth < ENLARGER_WINDOW_WIDTH_RATIO * ww);  // for avoiding needless scrolling\r\n\t\t}\r\n\t\r\n\t\t_turnOnEnlarged() {\r\n\t\t\tconst tab = this._table;\r\n\t\t\tif (tab.scrollWidth - tab.offsetWidth <= 1) return;\r\n\t\r\n\t\t\ttab.scrollLeft  = 0;\r\n\t\t\ttab.style.width = 'calc(100vw - ' + scrollBarWidth + 'px)';\r\n\t\t\tNS.addStile(tab, ST_STATE_ENLARGED);\r\n\t\t\tif (this._head) NS.addStile(this._head, ST_STATE_ENLARGED);\r\n\t\t\tthis._isEnlarged = true;\r\n\t\r\n\t\t\t// Do this timing!\r\n\t\t\tlet left = tab.getBoundingClientRect().left + window.pageXOffset;\r\n\t\t\tconst tbody = tab.tBodies[0];\r\n\t\t\tconst width = tbody.clientWidth, pwidth = this._windowWidth - scrollBarWidth;\r\n\t\t\tif (width < pwidth) left -= (pwidth - width) / 2;\r\n\t\t\ttab.style.marginLeft = -left + 'px';\r\n\t\r\n\t\t\ttab.style.background = null;\r\n\t\t\tthis._resize();\r\n\t\t}\r\n\t\r\n\t\t_turnOffEnlarged() {\r\n\t\t\tconst tab = this._table;\r\n\t\t\ttab.style.marginLeft = '';\r\n\t\t\ttab.style.width      = '';\r\n\t\t\ttab.scrollLeft       = 0;\r\n\t\t\tNS.removeStile(tab, ST_STATE_ENLARGED);\r\n\t\t\tif (this._head) NS.removeStile(this._head, ST_STATE_ENLARGED);\r\n\t\t\tthis._isEnlarged = false;\r\n\t\r\n\t\t\tNS.removeStile(this._shade, 'visible');\r\n\t\t\tthis._shade.style.background = null;\r\n\t\t\tthis._resize();\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\tonWindowResize() {\r\n\t\t\tthis._adjustUnexpectedScrollBar();\r\n\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\tif (this._windowWidth === ww) return;\r\n\t\t\tthis._windowWidth = ww;\r\n\t\r\n\t\t\tif (this._isEnlarged) {\r\n\t\t\t\tthis._turnOffEnlarged();\r\n\t\t\t} else {\r\n\t\t\t\tthis._resize();\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t_adjustUnexpectedScrollBar() {\r\n\t\t\tconst t = this._table;\r\n\t\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t\t}\r\n\t\r\n\t\t_resize() {\r\n\t\t\tif (this._head) this._updateHeaderSize(this._head);\r\n\t\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\t\tif (this._head || this._sbar) this.onWindowScroll();\r\n\t\t\tthis._onTableScroll();\r\n\t\t}\r\n\t\r\n\t\t_updateHeaderSize(cont) {\r\n\t\t\tcont.style.maxWidth = this._table.getBoundingClientRect().width + 'px';\r\n\t\t\tcont.style.display = 'none';\r\n\t\t\tcont.style.top = getOffset() + 'px';\r\n\t\r\n\t\t\tconst thead = this._table.tHead;\r\n\t\t\tlet w = thead.getBoundingClientRect().width;\r\n\t\t\tconst ptab = cont.firstChild;\r\n\t\t\tptab.style.width = w + 'px';\r\n\t\r\n\t\t\tconst clone = ptab.firstChild;\r\n\t\r\n\t\t\tconst oTrs = thead.rows;\r\n\t\t\tconst cTrs = clone.rows;\r\n\t\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t\t}\r\n\t\t\tthis._headerHeight = thead.getBoundingClientRect().height;\r\n\t\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t_updateScrollBarSize(sbar) {\r\n\t\t\tsbar.style.maxWidth = this._table.clientWidth + 'px';\r\n\t\t\tsbar.style.display = 'none';\r\n\t\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\t\tif (0 < h) sbar.style.height = (h + 2) + 'px';\r\n\t\r\n\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\tconst spacer = sbar.firstChild;\r\n\t\t\tspacer.style.width = Math.ceil(tbody.clientWidth) + 'px';\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\tonWindowScroll() {\r\n\t\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\t\tconst offset = getOffset();\r\n\t\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\t\tconst headH  = this._headerHeight;\r\n\t\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\t\r\n\t\t\tlet headVisible = false;\r\n\t\t\tif (inView) {  // do nothing\r\n\t\t\t} else if (offset < tabTop + capH) {  // do nothing\r\n\t\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t\t} else if (tabTop + capH < offset) {\r\n\t\t\t\theadVisible = true;\r\n\t\t\t}\r\n\t\t\tlet sbarVisible = false;\r\n\t\t\tif (inView) {  // do nothing\r\n\t\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t\t} else if (this._isScrollable()) {\r\n\t\t\t\tsbarVisible = true;\r\n\t\t\t}\r\n\t\t\tif (this._head) this.updateHeaderVisibility(headVisible, tr.left);\r\n\t\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t\t}\r\n\t\r\n\t\tupdateHeaderVisibility(visible, tabLeft) {\r\n\t\t\tconst head = this._head;\r\n\t\t\tif (visible) {\r\n\t\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\t\thead.style.display = 'block';\r\n\t\t\t\tif (this._ebtn && head) this.switchEnlargerToFloatingHeader();\r\n\t\t\t} else {\r\n\t\t\t\thead.style.display = 'none';\r\n\t\t\t\tif (this._ebtn && head) this.switchEnlargerToTable();\r\n\t\t\t}\r\n\t\t\thead.style.left = tabLeft + 'px';\r\n\t\t\thead.scrollLeft = this._table.scrollLeft;\r\n\t\t}\r\n\t\r\n\t\tswitchEnlargerToTable() {\r\n\t\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\t\tthis._ebtn.style.top = this._capt ? (this._capt.offsetHeight + 'px') : 0;\r\n\t\t\tthis._table.appendChild(this._ebtn);\r\n\t\t}\r\n\t\r\n\t\tswitchEnlargerToFloatingHeader() {\r\n\t\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\t\tthis._ebtn.style.top = 0;\r\n\t\t\tthis._head.appendChild(this._ebtn);\r\n\t\t}\r\n\t\r\n\t\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\t\tconst sbar = this._sbar;\r\n\t\t\tif (visible) {\r\n\t\t\t\tsbar.style.display = 'block';\r\n\t\t\t} else {\r\n\t\t\t\tsbar.style.display = 'none';\r\n\t\t\t}\r\n\t\t\tsbar.style.left = tabLeft + 'px';\r\n\t\t\tsbar.scrollLeft = this._table.scrollLeft;\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\t_onTableScroll() {\r\n\t\t\tconst tab = this._table, head = this._head, capt = this._capt, ebtn = this._ebtn, shade = this._shade;\r\n\t\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\t\tif (head) head.scrollLeft = sL;\r\n\t\t\tif (capt) {\r\n\t\t\t\tif (this._isScrollable()) {\r\n\t\t\t\t\tif (this._stCapt) clearTimeout(this._stCapt);\r\n\t\t\t\t\tthis._stCapt = setTimeout(() => { capt.style.transform = `translateX(${sL}px)`; }, 200);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcapt.style.transform = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (ebtn) {\r\n\t\t\t\tNS.removeStile(ebtn, 'visible');\r\n\t\t\t\tif (this._stEbtn) clearTimeout(this._stEbtn);\r\n\t\t\t\tthis._stEbtn = setTimeout(() => { NS.addStile(ebtn, 'visible'); }, 100);\r\n\t\t\t\tthis._updateEnlager();\r\n\t\t\t}\r\n\t\r\n\t\t\tif (this._isEnlarged) {\r\n\t\t\t\tNS.removeStile(shade, 'visible');\r\n\t\t\t\tif (this._isScrollable() && this._isEnlarged) {\r\n\t\t\t\t\tif (this._stShade) clearTimeout(this._stShade);\r\n\t\t\t\t\tthis._stShade = setTimeout(() => {\r\n\t\t\t\t\t\tshade.style.transform = `translateX(${sL}px)`;\r\n\t\t\t\t\t\tNS.addStile(shade, 'visible');\r\n\t\t\t\t\t}, 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._updateShade();\r\n\t\t}\r\n\t\r\n\t\t_updateEnlager() {\r\n\t\t\tconst tab = this._table, capt = this._capt, ebtn = this._ebtn;\r\n\t\t\tconst sL = tab.scrollLeft;\r\n\t\r\n\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\tconst scrW = tbody.clientWidth, cltW = tab.clientWidth;\r\n\t\t\tif (this._isEnlargable() || this._isEnlarged) {\r\n\t\t\t\tlet etbRight = -Math.min(scrW - cltW, sL);  // for Mobile Safari\r\n\t\t\t\tif (!this._isEnlargable() && this._isEnlarged) {\r\n\t\t\t\t\tconst diff = ebtn.parentElement.clientWidth - scrW;\r\n\t\t\t\t\tif (0 < diff) etbRight = diff;\r\n\t\t\t\t}\r\n\t\t\t\tif (ebtn.parentNode === tab) ebtn.style.top = capt ? (capt.offsetHeight + 'px') : 0;\r\n\t\t\t\tebtn.style.right = etbRight + 'px';\r\n\t\t\t\tebtn.style.display = 'block';\r\n\t\t\t} else {\r\n\t\t\t\tebtn.style.display = 'none';\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t_updateShade() {\r\n\t\t\tconst tab = this._table, shade = this._shade;\r\n\t\t\tif (this._isScrollable()) {\r\n\t\t\t\tconst s = this._calcShadeStyle();\r\n\t\t\t\tif (this._isEnlarged) {\r\n\t\t\t\t\tshade.style.background = s;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttab.style.background = s;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttab.style.background = '';  // This must be '' for IE11\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t_calcShadeStyle() {\r\n\t\t\tconst tab = this._table;\r\n\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\t\tlet rl = 0.25, rr = 0.25;\r\n\t\t\tif (r < 0.1) rl *= r / 0.1;\r\n\t\t\tif (0.9 < r) rr *= (1 - r) / 0.1;\r\n\t\t\tconst ch = this._capt ? (this._capt.offsetHeight + 'px') : '0';\r\n\t\t\tconst sl = `linear-gradient(to left, rgba(0,0,0,0), rgba(0,0,0,${rl}) 1.25rem) 0 ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\t\tconst sr = `linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,${rr}) 1.25rem) right ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\r\n\t\t\tconst bg = this._table.dataset['background'];\r\n\t\t\tconst sb = (this._isEnlarged || !bg || bg === 'transparent') ? '' : `, linear-gradient(to bottom, ${bg}, ${bg}) 0px 0px / 100% 100% no-repeat`;\r\n\t\t\treturn sl + ',' + sr + sb;\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t// Utilities ---------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction _getScrollBarWidth() {\r\n\t\tconst dummy = document.createElement('div');\r\n\t\tdummy.style.bottom = '100%';\r\n\t\tdummy.style.height = '1px';\r\n\t\tdummy.style.position = 'absolute';\r\n\t\tdummy.style.width = 'calc(100vw - 100%)';\r\n\t\tdocument.body.appendChild(dummy);\r\n\t\tlet width = 0 | window.getComputedStyle(dummy, '').getPropertyValue('width');\r\n\t\r\n\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\tdummy.style.overflowY = 'scroll';\r\n\t\t\tdummy.style.width = '';\r\n\t\t\tconst c = document.createElement('div');\r\n\t\t\tc.style.minHeight = '100px';\r\n\t\t\tdummy.appendChild(c);\r\n\t\t\tconst cw = 0 | window.getComputedStyle(c, '').getPropertyValue('width');\r\n\t\t\twidth = dummy.offsetWidth - cw;\r\n\t\t}\r\n\t\tdocument.body.removeChild(dummy);\r\n\t\treturn width;\r\n\t}\r\n\t\n\tNS.tableFixedHeader = initialize;\n\n})(window.NACSS);\n","/**\r\n *\r\n * Fixed Header (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-04\r\n *\r\n */\r\n\r\n\r\nconst SEL_TARGET = '.stile';\r\n\r\nconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\nconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\nconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\nconst ST_ENLARGER_BUTTON  = 'enlarger-button';\r\nconst ST_TABLE_SHADE      = 'table-shade';\r\nconst ST_STATE_ENLARGED   = 'table-enlarged';\r\nconst ST_OPT_NO_ENLARGER  = 'no-enlarger';\r\n\r\nconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\nconst ENLARGER_WINDOW_WIDTH_RATIO = 0.9;\r\n\r\nlet getOffset;\r\nlet scrollBarWidth;\r\n\r\n// NS.addInit(4, () => {\r\n// \tgetOffset = NS.makeOffsetFunction(false, true);  // Initialize here\r\n\r\n// \tconst tabs = document.querySelectorAll(SEL_TARGET + ' table:not([class])');\r\n// \tsetTimeout(() => { initialize(tabs); }, 0);  // Delay for IE11\r\n// });\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nfunction initialize(tabs) {\r\n\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\tconst conts = [];\r\n\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\tNS.onScroll(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); });\r\n\tNS.onResize(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); });\r\n}\r\n\r\nclass FixedHeaderTable {\r\n\r\n\tconstructor (tab) {\r\n\t\tif (tab.style.height) tab.style.height = '';\r\n\t\tthis._table        = tab;\r\n\t\tthis._headerHeight = 0;\r\n\t\tthis._isEnlarged   = false;\r\n\t\tthis._windowWidth  = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tthis._create();\r\n\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t}\r\n\r\n\t_create() {\r\n\t\tthis._head = this._createHeaderClone();\r\n\t\tthis._sbar = this._createScrollBarClone();\r\n\t\tthis._ebtn = NS.containStile(this._table, ST_OPT_NO_ENLARGER) ? null : this._createEnlargerButton();\r\n\t\tthis._shade = this._createShade();\r\n\r\n\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t}\r\n\r\n\t_createHeaderClone() {\r\n\t\tlet thead = this._table.tHead;\r\n\t\tif (!thead) {\r\n\t\t\tthead = this._createPseudoHeader();\r\n\t\t\tif (!thead) return null;\r\n\t\t\tthis._table.tHead = thead;\r\n\t\t}\r\n\t\tconst cont = document.createElement('div');\r\n\t\tNS.addStile(cont, ST_HEADER_CONTAINER);\r\n\t\tthis._table.parentNode.appendChild(cont);\r\n\r\n\t\tconst ptab = document.createElement('div');\r\n\t\tNS.addStile(ptab, ST_HEADER_TABLE);\r\n\t\tcont.appendChild(ptab);\r\n\r\n\t\tconst clone = thead.cloneNode(true);\r\n\t\tptab.appendChild(clone);\r\n\r\n\t\tif (NS.containStile(this._table, ST_STATE_ENLARGED)) NS.addStile(cont, ST_STATE_ENLARGED);\r\n\t\treturn cont;\r\n\t}\r\n\r\n\t_createPseudoHeader() {\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst trs = tbody.rows;\r\n\t\tif (trs.length === 0) return null;\r\n\r\n\t\tfunction containsOnlyTh(tr) {\r\n\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst trsH = [];\r\n\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\tconst tr = trs[i];\r\n\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\ttrsH.push(tr);\r\n\t\t}\r\n\t\tif (trsH.length === 0) return null;\r\n\r\n\t\tconst thead = this._table.createTHead();\r\n\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\tthead.appendChild(trsH[i]);\r\n\t\t}\r\n\t\treturn thead;\r\n\t}\r\n\r\n\t_createScrollBarClone() {\r\n\t\tconst sbar = document.createElement('div');\r\n\t\tNS.addStile(sbar, ST_SCROLL_BAR);\r\n\t\tthis._table.parentNode.appendChild(sbar);\r\n\t\tconst spacer = document.createElement('div');\r\n\t\tsbar.appendChild(spacer);\r\n\t\treturn sbar;\r\n\t}\r\n\r\n\t_createEnlargerButton() {\r\n\t\tconst ebtn = document.createElement('div');\r\n\t\tebtn.dataset['stile'] = ST_ENLARGER_BUTTON;\r\n\t\tthis._table.appendChild(ebtn);\r\n\t\treturn ebtn;\r\n\t}\r\n\r\n\t_createShade() {\r\n\t\tconst shade = document.createElement('div');\r\n\t\tshade.dataset['stile'] = ST_TABLE_SHADE;\r\n\t\tthis._table.appendChild(shade);\r\n\t\treturn shade;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_initialize() {\r\n\t\tconst bg = getComputedStyle(this._table).backgroundColor;\r\n\t\tif (bg && bg !== 'transparent') this._table.dataset['background'] = bg;\r\n\r\n\t\tthis._initTableScroll();\r\n\t\tif (this._ebtn) {\r\n\t\t\tthis._ebtn.addEventListener('click', () => {\r\n\t\t\t\tif (this._isEnlarged) this._turnOffEnlarged();\r\n\t\t\t\telse this._turnOnEnlarged();\r\n\t\t\t});\r\n\t\t\tif (!this._isEnlargable()) this._ebtn.style.display = 'none';\r\n\t\t}\r\n\t\tthis._resize();\r\n\t\tthis._adjustUnexpectedScrollBar()\r\n\t}\r\n\r\n\t_initTableScroll() {\r\n\t\tlet tableScrollChanged = false;\r\n\t\tlet sbarScrollChanged  = false;\r\n\t\tthis._table.addEventListener('scroll', NS.throttle(() => {\r\n\t\t\tif (tableScrollChanged) {\r\n\t\t\t\ttableScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t}\r\n\t\t\tthis._onTableScroll();\r\n\t\t}));\r\n\t\tthis._sbar.addEventListener('scroll', NS.throttle(() => {\r\n\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\ttableScrollChanged = true;\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\t_isScrollable() {\r\n\t\tconst t = this._table;\r\n\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t}\r\n\r\n\t_isEnlargable() {\r\n\t\tconst t = this._table;\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\treturn (t.scrollWidth - t.offsetWidth > 1 && t.offsetWidth < ENLARGER_WINDOW_WIDTH_RATIO * ww);  // for avoiding needless scrolling\r\n\t}\r\n\r\n\t_turnOnEnlarged() {\r\n\t\tconst tab = this._table;\r\n\t\tif (tab.scrollWidth - tab.offsetWidth <= 1) return;\r\n\r\n\t\ttab.scrollLeft  = 0;\r\n\t\ttab.style.width = 'calc(100vw - ' + scrollBarWidth + 'px)';\r\n\t\tNS.addStile(tab, ST_STATE_ENLARGED);\r\n\t\tif (this._head) NS.addStile(this._head, ST_STATE_ENLARGED);\r\n\t\tthis._isEnlarged = true;\r\n\r\n\t\t// Do this timing!\r\n\t\tlet left = tab.getBoundingClientRect().left + window.pageXOffset;\r\n\t\tconst tbody = tab.tBodies[0];\r\n\t\tconst width = tbody.clientWidth, pwidth = this._windowWidth - scrollBarWidth;\r\n\t\tif (width < pwidth) left -= (pwidth - width) / 2;\r\n\t\ttab.style.marginLeft = -left + 'px';\r\n\r\n\t\ttab.style.background = null;\r\n\t\tthis._resize();\r\n\t}\r\n\r\n\t_turnOffEnlarged() {\r\n\t\tconst tab = this._table;\r\n\t\ttab.style.marginLeft = '';\r\n\t\ttab.style.width      = '';\r\n\t\ttab.scrollLeft       = 0;\r\n\t\tNS.removeStile(tab, ST_STATE_ENLARGED);\r\n\t\tif (this._head) NS.removeStile(this._head, ST_STATE_ENLARGED);\r\n\t\tthis._isEnlarged = false;\r\n\r\n\t\tNS.removeStile(this._shade, 'visible');\r\n\t\tthis._shade.style.background = null;\r\n\t\tthis._resize();\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowResize() {\r\n\t\tthis._adjustUnexpectedScrollBar();\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tif (this._windowWidth === ww) return;\r\n\t\tthis._windowWidth = ww;\r\n\r\n\t\tif (this._isEnlarged) {\r\n\t\t\tthis._turnOffEnlarged();\r\n\t\t} else {\r\n\t\t\tthis._resize();\r\n\t\t}\r\n\t}\r\n\r\n\t_adjustUnexpectedScrollBar() {\r\n\t\tconst t = this._table;\r\n\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t}\r\n\r\n\t_resize() {\r\n\t\tif (this._head) this._updateHeaderSize(this._head);\r\n\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\tif (this._head || this._sbar) this.onWindowScroll();\r\n\t\tthis._onTableScroll();\r\n\t}\r\n\r\n\t_updateHeaderSize(cont) {\r\n\t\tcont.style.maxWidth = this._table.getBoundingClientRect().width + 'px';\r\n\t\tcont.style.display = 'none';\r\n\t\tcont.style.top = getOffset() + 'px';\r\n\r\n\t\tconst thead = this._table.tHead;\r\n\t\tlet w = thead.getBoundingClientRect().width;\r\n\t\tconst ptab = cont.firstChild;\r\n\t\tptab.style.width = w + 'px';\r\n\r\n\t\tconst clone = ptab.firstChild;\r\n\r\n\t\tconst oTrs = thead.rows;\r\n\t\tconst cTrs = clone.rows;\r\n\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t}\r\n\t\tthis._headerHeight = thead.getBoundingClientRect().height;\r\n\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_updateScrollBarSize(sbar) {\r\n\t\tsbar.style.maxWidth = this._table.clientWidth + 'px';\r\n\t\tsbar.style.display = 'none';\r\n\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\tif (0 < h) sbar.style.height = (h + 2) + 'px';\r\n\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst spacer = sbar.firstChild;\r\n\t\tspacer.style.width = Math.ceil(tbody.clientWidth) + 'px';\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowScroll() {\r\n\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\tconst offset = getOffset();\r\n\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\tconst headH  = this._headerHeight;\r\n\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\r\n\t\tlet headVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (offset < tabTop + capH) {  // do nothing\r\n\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t} else if (tabTop + capH < offset) {\r\n\t\t\theadVisible = true;\r\n\t\t}\r\n\t\tlet sbarVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t} else if (this._isScrollable()) {\r\n\t\t\tsbarVisible = true;\r\n\t\t}\r\n\t\tif (this._head) this.updateHeaderVisibility(headVisible, tr.left);\r\n\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t}\r\n\r\n\tupdateHeaderVisibility(visible, tabLeft) {\r\n\t\tconst head = this._head;\r\n\t\tif (visible) {\r\n\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\thead.style.display = 'block';\r\n\t\t\tif (this._ebtn && head) this.switchEnlargerToFloatingHeader();\r\n\t\t} else {\r\n\t\t\thead.style.display = 'none';\r\n\t\t\tif (this._ebtn && head) this.switchEnlargerToTable();\r\n\t\t}\r\n\t\thead.style.left = tabLeft + 'px';\r\n\t\thead.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\tswitchEnlargerToTable() {\r\n\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\tthis._ebtn.style.top = this._capt ? (this._capt.offsetHeight + 'px') : 0;\r\n\t\tthis._table.appendChild(this._ebtn);\r\n\t}\r\n\r\n\tswitchEnlargerToFloatingHeader() {\r\n\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\tthis._ebtn.style.top = 0;\r\n\t\tthis._head.appendChild(this._ebtn);\r\n\t}\r\n\r\n\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\tconst sbar = this._sbar;\r\n\t\tif (visible) {\r\n\t\t\tsbar.style.display = 'block';\r\n\t\t} else {\r\n\t\t\tsbar.style.display = 'none';\r\n\t\t}\r\n\t\tsbar.style.left = tabLeft + 'px';\r\n\t\tsbar.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_onTableScroll() {\r\n\t\tconst tab = this._table, head = this._head, capt = this._capt, ebtn = this._ebtn, shade = this._shade;\r\n\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\tif (head) head.scrollLeft = sL;\r\n\t\tif (capt) {\r\n\t\t\tif (this._isScrollable()) {\r\n\t\t\t\tif (this._stCapt) clearTimeout(this._stCapt);\r\n\t\t\t\tthis._stCapt = setTimeout(() => { capt.style.transform = `translateX(${sL}px)`; }, 200);\r\n\t\t\t} else {\r\n\t\t\t\tcapt.style.transform = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ebtn) {\r\n\t\t\tNS.removeStile(ebtn, 'visible');\r\n\t\t\tif (this._stEbtn) clearTimeout(this._stEbtn);\r\n\t\t\tthis._stEbtn = setTimeout(() => { NS.addStile(ebtn, 'visible'); }, 100);\r\n\t\t\tthis._updateEnlager();\r\n\t\t}\r\n\r\n\t\tif (this._isEnlarged) {\r\n\t\t\tNS.removeStile(shade, 'visible');\r\n\t\t\tif (this._isScrollable() && this._isEnlarged) {\r\n\t\t\t\tif (this._stShade) clearTimeout(this._stShade);\r\n\t\t\t\tthis._stShade = setTimeout(() => {\r\n\t\t\t\t\tshade.style.transform = `translateX(${sL}px)`;\r\n\t\t\t\t\tNS.addStile(shade, 'visible');\r\n\t\t\t\t}, 100);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._updateShade();\r\n\t}\r\n\r\n\t_updateEnlager() {\r\n\t\tconst tab = this._table, capt = this._capt, ebtn = this._ebtn;\r\n\t\tconst sL = tab.scrollLeft;\r\n\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst scrW = tbody.clientWidth, cltW = tab.clientWidth;\r\n\t\tif (this._isEnlargable() || this._isEnlarged) {\r\n\t\t\tlet etbRight = -Math.min(scrW - cltW, sL);  // for Mobile Safari\r\n\t\t\tif (!this._isEnlargable() && this._isEnlarged) {\r\n\t\t\t\tconst diff = ebtn.parentElement.clientWidth - scrW;\r\n\t\t\t\tif (0 < diff) etbRight = diff;\r\n\t\t\t}\r\n\t\t\tif (ebtn.parentNode === tab) ebtn.style.top = capt ? (capt.offsetHeight + 'px') : 0;\r\n\t\t\tebtn.style.right = etbRight + 'px';\r\n\t\t\tebtn.style.display = 'block';\r\n\t\t} else {\r\n\t\t\tebtn.style.display = 'none';\r\n\t\t}\r\n\t}\r\n\r\n\t_updateShade() {\r\n\t\tconst tab = this._table, shade = this._shade;\r\n\t\tif (this._isScrollable()) {\r\n\t\t\tconst s = this._calcShadeStyle();\r\n\t\t\tif (this._isEnlarged) {\r\n\t\t\t\tshade.style.background = s;\r\n\t\t\t} else {\r\n\t\t\t\ttab.style.background = s;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttab.style.background = '';  // This must be '' for IE11\r\n\t\t}\r\n\t}\r\n\r\n\t_calcShadeStyle() {\r\n\t\tconst tab = this._table;\r\n\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\tlet rl = 0.25, rr = 0.25;\r\n\t\tif (r < 0.1) rl *= r / 0.1;\r\n\t\tif (0.9 < r) rr *= (1 - r) / 0.1;\r\n\t\tconst ch = this._capt ? (this._capt.offsetHeight + 'px') : '0';\r\n\t\tconst sl = `linear-gradient(to left, rgba(0,0,0,0), rgba(0,0,0,${rl}) 1.25rem) 0 ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\tconst sr = `linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,${rr}) 1.25rem) right ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\r\n\t\tconst bg = this._table.dataset['background'];\r\n\t\tconst sb = (this._isEnlarged || !bg || bg === 'transparent') ? '' : `, linear-gradient(to bottom, ${bg}, ${bg}) 0px 0px / 100% 100% no-repeat`;\r\n\t\treturn sl + ',' + sr + sb;\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction _getScrollBarWidth() {\r\n\tconst dummy = document.createElement('div');\r\n\tdummy.style.bottom = '100%';\r\n\tdummy.style.height = '1px';\r\n\tdummy.style.position = 'absolute';\r\n\tdummy.style.width = 'calc(100vw - 100%)';\r\n\tdocument.body.appendChild(dummy);\r\n\tlet width = 0 | window.getComputedStyle(dummy, '').getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\tdummy.style.overflowY = 'scroll';\r\n\t\tdummy.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\tdummy.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c, '').getPropertyValue('width');\r\n\t\twidth = dummy.offsetWidth - cw;\r\n\t}\r\n\tdocument.body.removeChild(dummy);\r\n\treturn width;\r\n}\r\n"]}