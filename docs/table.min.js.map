{"version":3,"sources":["table.js","_neat-width.js","_usable-view.js"],"names":["window","NACSS","NS","makeDummyCell","t","tagName","d","document","createElement","setAttribute","appendChild","removeDummyCell","lt","cMat","removeChild","dcTd","dcTh","isTarget","tab","cMet","rows","length","maxRowSize","cellMinWidth","cellMinAspect","tr","hasChildNodes","n","childNodes","tn","parseInt","getAttribute","cw","clientWidth","ch","clientHeight","addClass","tar","cls","startsWith","dataset","substr","classList","add","removeClass","remove","onScroll","scrollWidth","r","scrollLeft","styleScrollRight","styleScrollLeft","apply","removeAttribute","style","width","height","grid","css","cs","push","collectCells","maxWidth","Math","max","g","Array","y","gr","tds","i","x","td","col","row","p","q","nr","makeCellGrid","ws","gc","w","HTMLTableCellElement","whiteSpace","minWidth","setCellWidth","met","gw","newWs","fill","fixWs","minW","calcMinWidth","origTabW","origCellWs","wNew","wFix","rem","nw","min","widenTabWidth","calcNewWidths","Object","assign","getMetrics","getElementsByTagName","innerHTML","padH","padV","charW","lineH","cellMinLength","ih","trim","ts","split","map","e","replace","calcMaxLineLength","dc","aw","ls","round","tempW","tempH","tableNeatWidth","tabs","opts","cm","fullWidthRate","maxBorderWidth","before","after","styleNeat","styleFull","s","getComputedStyle","parseFloat","paddingLeft","paddingRight","paddingTop","paddingBottom","elm","nodeName","fontFamily","fontSize","parentNode","h","getTextSize","getCommonMetrics","tarTabs","noTarTabs","gcCount","delay","fn","setTimeout","parentElement","rob","ResizeObserver","oes","oe","target","observe","addEventListener","throttle","isRunning","requestAnimationFrame","initScroll","ST_HEADER_CONTAINER","ST_HEADER_TABLE","ST_SCROLL_BAR","_create","head","thead","tHead","trs","tBodies","containsOnlyTh","ths","trsH","I","createTHead","createPseudoHeader","cont","stile","ptab","clone","cloneNode","createHeaderClone","bar","spacer","createScrollBarClone","_initialize","forced","el","op","onTableScroll","initTableScroll","overflowX","tw","getBoundingClientRect","display","top","getOffset","hw","firstChild","oTrs","cTrs","copyWidth","o","c","tag","os","_updateHeaderSize","body","getPropertyValue","overflowY","minHeight","offsetWidth","getScrollBarWidth","updateScrollBarSize","onWindowScroll","onResize","contentRect","tabBottom","bottom","rh","headTop","headBottom","headH","offsetHeight","inView","innerHeight","headVisible","barVisible","visible","tabLeft","left","updateHeaderVisibility","updateScrollBarVisibility","sL","args","tableUsableView","passive"],"mappings":"AAUAA,OAAAC,MAAAD,OAAA,OAAA,GAGA,SAAAE,IAEA,WCiEA,SAAAC,EAAAC,EAAAC,GACA,MAAAC,EAAAC,SAAAC,cAAAH,GAEA,OADAC,EAAAG,aAAA,QAAA,6EACAL,EAAAM,YAAAJ,GAGA,SAAAK,EAAAC,EAAAC,GACAD,EAAAE,YAAAD,EAAAE,MACAH,EAAAE,YAAAD,EAAAG,MAGA,SAAAC,EAAAC,EAAAC,GACA,GAAA,IAAAD,EAAAE,KAAAC,OAAA,OAAA,EACA,GAAAF,EAAAG,WAAAJ,EAAAE,KAAAC,OAAA,OAAA,EAEA,MAAAE,aAAAA,EAAAC,cAAAA,GAAAL,EACA,IAAA,MAAAM,KAAAP,EAAAE,KACA,GAAAK,EAAAC,gBACA,IAAA,MAAAC,KAAAF,EAAAG,WAAA,CACA,MAAAC,EAAAF,EAAAtB,QACA,GAAA,OAAAwB,GAAA,OAAAA,EAAA,SACA,GAAA,EAAAC,SAAAH,EAAAI,aAAA,WAAA,IAAA,SACA,GAAA,EAAAD,SAAAH,EAAAI,aAAA,WAAA,IAAA,SACA,MAAAC,EAAAL,EAAAM,YACAC,EAAAP,EAAAQ,aACA,GAAAH,EAAAT,GAAAS,EAAAE,EAAAV,EAAA,OAAA,EAGA,OAAA,EAOA,SAAAY,EAAAC,EAAAC,GACAA,EAAAC,WAAA,KAAAF,EAAAG,QAAAF,EAAAG,OAAA,IAAA,GACAJ,EAAAK,UAAAC,IAAAL,EAAAG,OAAA,IAGA,SAAAG,EAAAP,EAAAC,GACAA,EAAAC,WAAA,YAAAF,EAAAG,QAAAF,EAAAG,OAAA,IACAJ,EAAAK,UAAAG,OAAAP,EAAAG,OAAA,IA4BA,SAAAK,EAAA5B,EAAAC,GACA,GAAAD,EAAA6B,YAAA7B,EAAAe,YAAA,EAAA,CACA,MAAAe,EAAA9B,EAAA+B,YAAA/B,EAAA6B,YAAA7B,EAAAe,cACA,IAAAe,EAAAJ,EAAAR,GAAAlB,EAAAC,EAAA+B,mBACAF,EAAA,IAAAJ,EAAAR,GAAAlB,EAAAC,EAAAgC,sBAEAP,EAAA1B,EAAAC,EAAA+B,kBACAN,EAAA1B,EAAAC,EAAAgC,iBAQA,SAAAC,EAAAlC,EAAAC,GACAD,EAAAmC,gBAAA,SACAnC,EAAAoC,MAAAC,MAAA,KACArC,EAAAoC,MAAAE,OAAA,KAEA,MAAAC,EAaA,SAAArD,GACA,MAAAsD,EAmCA,SAAAtD,EAAAsD,EAAA,IACA,IAAA,MAAAjC,KAAArB,EAAAgB,KAAA,CACA,MAAAuC,EAAA,GACA,GAAAlC,EAAAC,gBACA,IAAA,MAAAC,KAAAF,EAAAG,WAAA,CACA,MAAAC,EAAAF,EAAAtB,QACA,OAAAwB,GAAA,OAAAA,GAAA8B,EAAAC,KAAAjC,GAGA+B,EAAAE,KAAAD,GAEA,OAAAD,EA9CAG,CAAAzD,GACA,IAAA0D,EAAA,EACA,IAAA,MAAAH,KAAAD,EAAAI,EAAAC,KAAAC,IAAAF,EAAAH,EAAAtC,QACA,MAAA4C,EAAA,GACA,IAAA,MAAAN,KAAAD,EAAAO,EAAAL,KAAA,IAAAM,MAAAJ,IAEA,IAAA,IAAAK,EAAA,EAAAA,EAAAF,EAAA5C,OAAA8C,GAAA,EAAA,CACA,MAAAC,EAAAH,EAAAE,GACAE,EAAAX,EAAAS,GACA,IAAAG,EAAA,EAEA,IAAA,IAAAC,EAAA,EAAAA,EAAAT,EAAAS,GAAA,EAAA,CACA,GAAA,iBAAAH,EAAAG,IAAA,OAAAH,EAAAG,GAAA,SAEA,MAAAC,EAAAH,EAAAC,GACAG,EAAA3C,SAAA0C,EAAAzC,aAAA,YAAA,EAAA,IACA2C,EAAA5C,SAAA0C,EAAAzC,aAAA,YAAA,EAAA,IAGA,GAFAqC,EAAAG,GAAAC,EAEA,EAAAC,EACA,IAAA,IAAAE,EAAA,EAAAA,EAAAF,EAAAE,GAAA,EAAAP,EAAAG,EAAAI,GAAAA,EAEA,GAAA,EAAAD,EACA,IAAA,IAAAE,EAAA,EAAAA,EAAAF,EAAAE,GAAA,EAAA,CACA,MAAAC,EAAAZ,EAAAE,EAAAS,GACA,IAAA,IAAAD,EAAA,EAAAA,EAAAF,EAAAE,GAAA,EAAAE,EAAAN,EAAAI,GAAA,KAIA,GADAL,GAAA,EACAD,EAAAhD,QAAAiD,EAAA,OAGA,OAAAL,EA9CAa,CAAA5D,IAqKA,SAAAuC,EAAAsB,GACA,IAAA,MAAAX,KAAAX,EACA,IAAA,IAAAc,EAAA,EAAAA,EAAAH,EAAA/C,OAAAkD,GAAA,EAAA,CACA,MAAAS,EAAAZ,EAAAG,GAAAU,EAAAF,EAAAR,GACAU,GAAAD,aAAAE,uBACAF,EAAA1B,MAAA6B,WAAA,KACAH,EAAA1B,MAAA8B,SAAAH,EAAA,KACAD,EAAA1B,MAAAC,MAAA,OAzKA8B,CAAA5B,EAmFA,SAAAA,EAAA6B,GACA,IAAA,MAAAlB,KAAAX,EACA,IAAA,MAAAuB,KAAAZ,EACA,iBAAAY,GAAA,OAAAA,IAAAA,EAAA1B,MAAA6B,WAAA,UAGA,MAAAI,EAAA9B,EAAA,GAAApC,OACAmE,EAAA,IAAAtB,MAAAqB,GAAAE,KAAA,GACAC,EAAA,IAAAxB,MAAAqB,GAAAE,KAAA,GAEA,IAAA,MAAArB,KAAAX,EACA,IAAA,IAAAc,EAAA,EAAAA,EAAAgB,EAAAhB,GAAA,EAAA,CACA,MAAAC,EAAAJ,EAAAG,GACA,GAAAC,MAAAA,GAAA,iBAAAA,EAAA,SACA,GAAAD,EAAAgB,EAAA,GAAA,iBAAAnB,EAAAG,EAAA,GAAA,SACA,GAAA,EAAAzC,SAAA0C,EAAAzC,aAAA,WAAA,IAAA,SACA,GAAA,EAAAD,SAAA0C,EAAAzC,aAAA,WAAA,IAAA,SAEA,MAAA4D,EAAAC,EAAApB,EAAAc,GACAE,EAAAjB,GAAAR,KAAAC,IAAAwB,EAAAjB,GAAAoB,GACAA,IAAAD,EAAAnB,GAAAR,KAAAC,IAAA0B,EAAAnB,GAAAC,EAAAvC,cAIA,OA6BA,SAAAuD,EAAAE,EAAAJ,GACA,MAAAO,SAAAA,EAAAC,WAAAA,GAAAR,EACA,IAAAS,EAAA,EAAAC,EAAA,EACA,IAAA,IAAA1B,EAAA,EAAAA,EAAAkB,EAAAnE,OAAAiD,GAAA,EACAkB,EAAAlB,GACAyB,GAAAP,EAAAlB,GAEA0B,GAAAN,EAAApB,GAGA,GAAAuB,EAAAE,EAAAC,EAAA,OACA,IAAAC,EAAAJ,EAAAG,EACA,IAAA,IAAA1B,EAAA,EAAAA,EAAAkB,EAAAnE,OAAAiD,GAAA,EAAA,CACA,IAAAkB,EAAAlB,GAAA,SACA,MAAA4B,EAAAV,EAAAlB,GACAW,EAAAlB,KAAAoC,IAAAD,EAAAH,EAAAE,EAAAH,EAAAxB,IACA2B,GAAAhB,EAAAiB,EACAH,GAAAd,EAAAiB,EACAV,EAAAlB,GAAA,EAAAW,GAhDAmB,CAAAZ,EAAAE,EAAAJ,GACAE,EA5GAa,CAAA5C,EADA6C,OAAAC,OAkEA,SAAArF,EAAAuC,GACA,MAAAoC,EAAA3E,EAAAe,YACA6D,EAAA,GACA,IAAA,IAAAvB,EAAA,EAAAA,EAAAd,EAAA,GAAApC,OAAAkD,GAAA,EACA,IAAA,IAAAJ,EAAA,EAAAA,EAAAV,EAAApC,OAAA8C,GAAA,EAAA,CACA,MAAAF,EAAAR,EAAAU,GAAAI,GACA,GAAAN,aAAAiB,uBAAAjB,EAAAlC,aAAA,WAAA,CACA+D,EAAAlC,KAAAK,EAAAhC,aACA,OAIA,MAAA,CAAA4D,SAAAA,EAAAC,WAAAA,GA9EAU,CAAAtF,EAAAuC,GAAAtC,KAIA,MAAAwC,EAAAzC,EAAAuF,qBAAA,WACA9C,EAAAtC,SAAAsC,EAAA,GAAA+C,UAAA,SAAA/C,EAAA,GAAA+C,oBA2GA,SAAAd,EAAApB,EAAAc,GACA,MAAAqB,KAAAA,EAAAC,KAAAA,EAAAC,MAAAA,EAAAC,MAAAA,EAAA/F,KAAAA,EAAAC,KAAAA,EAAAO,aAAAA,EAAAC,cAAAA,EAAAuF,cAAAA,GAAAzB,EACA,GAiBA,SAAAd,GACA,MAAAwC,EAAAxC,EAAAkC,UAAAO,OAEAC,EADAF,EAAAG,MAAA,mBACAC,KAAAC,GAAAA,EAAAC,QAAA,+BAAA,IAAAjG,SACA,OAAA0C,KAAAC,OAAAkD,GArBAK,CAAA/C,GAAAuC,EAAA,OAAA,EAEAvC,EAAAkC,UAAAlC,EAAAkC,UAAAO,OACA,MAAAO,EAAA,OAAAhD,EAAAnE,QAAAU,EAAAC,EACAwG,EAAAd,UAAAlC,EAAAkC,UACA,MAAAe,EAAAD,EAAAvF,YAAA0E,EACAe,EAAA3D,KAAA4D,OAAAH,EAAArF,aAAAyE,GAAAE,GACA,IAAAnB,EAAA,EACA,IAAA,IAAArB,EAAA,GAAAA,GAAA,EAAA,CACA,MAAAsD,EAAA,EAAAH,EAAAnD,EAAAuC,EAAAvC,EAAAqC,EACAkB,EAAAH,GAAApD,EAAAwC,GAAAF,EACA,GAAAgB,EAAArG,GAAAqG,EAAAC,EAAArG,GAAAmE,GAAAA,EAAAiC,EAAA,MACAjC,EAAAiC,EAEA,OAAAjC,EAAAkB,EAAAW,EAAAvF,YAAA0D,EAAA,ED1RAzF,EAAA4H,eCPA,SAAAC,EAAAC,EAAA,IACA,GAAA,IAAAD,EAAA1G,OAAA,OAEA,MAAAT,EAAAmH,EAAAA,EAAA1G,OAAA,GACA4G,EAAA3B,OAAAC,OAAA,CACA2B,cAAA,IACA3G,aAAA,GACAC,cAAA,EAAA,EACAuF,cAAA,EACAzF,WAAA,IACA6G,eAAA,EACAC,OAAA,KACAC,MAAA,KACAC,UAAA,eACAC,UAAA,eACArF,iBAAA,iBACAC,gBAAA,iBACA6E,EAiCA,SAAA9G,GACA,MAAAsD,EAAAtD,EAAAuF,qBAAA,MAAA,GACA+B,EAAAC,iBAAAjE,GACAmC,EAAA+B,WAAAF,EAAAG,aAAAD,WAAAF,EAAAI,cACAhC,EAAA8B,WAAAF,EAAAK,YAAAH,WAAAF,EAAAM,gBACAjC,EAAAC,GAIA,SAAAiC,GACA,MAAAzI,EAAAC,SAAAC,cAAAuI,EAAAC,UACA1I,EAAAG,aAAA,QAAA,iDAAAsI,EAAAzF,MAAA2F,YAAA,uBAAAF,EAAAzF,MAAA4F,UAAA,cACA5I,EAAAoG,UAAA,IACAqC,EAAAI,WAAAzI,YAAAJ,GACA,MAAA2E,EAAA3E,EAAA2B,YACAmH,EAAA9I,EAAA6B,aAEA,OADA7B,EAAA6I,WAAArI,YAAAR,GACA,CAAA2E,EAAAmE,GAZAC,CAAA7E,GACA,MAAA,CAAAmC,KAAAA,EAAAC,KAAAA,EAAAC,MAAAA,EAAAC,MAAAA,GAvCAwC,CAAA1I,IAEAqH,EAAAtB,MAAA,EAAAsB,EAAAE,eACAF,EAAArB,MAAA,EAAAqB,EAAAE,eACAF,EAAAlH,KAAAZ,EAAAS,EAAA,MACAqH,EAAAjH,KAAAb,EAAAS,EAAA,MAEA,MAAA2I,EAAA,GAAAC,EAAA,GACA,IAAA,MAAApJ,KAAA2H,EACA9G,EAAAb,EAAA6H,GAAAsB,EAAA3F,KAAAxD,GACAoJ,EAAA5F,KAAAxD,GAEA6H,EAAAwB,QAAAF,EAAAlI,OAEA,IAAA,MAAAjB,KAAAmJ,EAAA,CACA,MAAAG,IAAAzB,EAAAG,SAAAH,EAAAG,OAAAhI,IAAA,GAcAuJ,EAbA,KACAvG,EAAAhD,EAAA6H,GACA7F,EAAAhC,EAAA6H,EAAAK,WACAL,EAAAI,OAAAJ,EAAAI,MAAAjI,GACA,KAAA6H,EAAAwB,SAAA9I,EAAAC,EAAAqH,KASA,KAAA3H,EARAoJ,GAQAC,IAAAC,WAAAD,EAAArJ,GAAA,IAAAqJ,EAAArJ,EANA,GAAA2H,EAAAC,cACA,IAAA,MAAA9H,KAAAoJ,EAAA,CACApJ,EAAAyJ,cAAA5H,YACAgG,EAAAC,cAAA9H,EAAA6B,aAAAG,EAAAhC,EAAA6H,EAAAM,YA4EA,SAAAR,EAAA5G,GACA,MAAA2I,EAAA,IAAAC,gBAAAC,IACA,IAAA,MAAAC,KAAAD,EAAAlH,EAAAmH,EAAAC,OAAA/I,MAEA,IAAA,MAAAf,KAAA2H,EACA+B,EAAAK,QAAA/J,GACAA,EAAAgK,iBAAA,SAAAC,GAAA,KAAAvH,EAAA1C,EAAAe,OAEA,SAAAkJ,EAAAV,GACA,IAAAW,EACA,MAAA,KACAA,IACAA,GAAA,EACAC,uBAAA,KACAD,GAAA,EACAX,UAvFAa,CAAAjB,EAAAtB,ID1CA,GAKA,WEVA,MAAAwC,EAAA,+BACAC,EAAA,2BACAC,EAAA,yBAsBA,SAAAC,EAAA1J,GACA,MAAA2J,EAKA,SAAA3J,GACA,IAAA4J,EAAA5J,EAAA6J,MACA,IAAAD,EAAA,CAEA,GADAA,EAiBA,SAAA5J,GACA,MACA8J,EADA9J,EAAA+J,QAAA,GACA7J,KACA,GAAA,IAAA4J,EAAA3J,OAAA,OAAA,KAEA,SAAA6J,EAAAzJ,GACA,MAAA4C,EAAA5C,EAAAgF,qBAAA,MACA0E,EAAA1J,EAAAgF,qBAAA,MACA,OAAA,IAAApC,EAAAhD,QAAA8J,EAAA9J,OAAA,EAIA,MAAA+J,EAAA,GACA,IAAA,IAAA9G,EAAA,EAAA+G,EAAAL,EAAA3J,OAAAiD,EAAA+G,EAAA/G,GAAA,EAAA,CACA,MAAA7C,EAAAuJ,EAAA1G,GACA,IAAA4G,EAAAzJ,GAAA,MACA2J,EAAAxH,KAAAnC,GAEA,GAAA,IAAA2J,EAAA/J,OAAA,OAAA,KAEA,MAAAyJ,EAAA5J,EAAAoK,cACA,IAAA,IAAAhH,EAAA,EAAAA,EAAA8G,EAAA/J,OAAAiD,GAAA,EACAwG,EAAApK,YAAA0K,EAAA9G,IAEA,OAAAwG,EAzCAS,CAAArK,IACA4J,EAAA,OAAA,KACA5J,EAAA6J,MAAAD,EAEA,MAAAU,EAAAjL,SAAAC,cAAA,OACAgL,EAAAhJ,QAAAiJ,OAAA,IAAAhB,EACAvJ,EAAAiI,WAAAzI,YAAA8K,GAEA,MAAAE,EAAAnL,SAAAC,cAAA,OACAkL,EAAAlJ,QAAAiJ,OAAA,IAAAf,EACAc,EAAA9K,YAAAgL,GAEA,MAAAC,EAAAb,EAAAc,WAAA,GAEA,OADAF,EAAAhL,YAAAiL,GACAH,EAtBAK,CAAA3K,GACA4K,EAmDA,SAAA5K,GACA,MAAAmG,EAAA9G,SAAAC,cAAA,OACA6G,EAAA7E,QAAAiJ,OAAA,IAAAd,EACA,MAAAoB,EAAAxL,SAAAC,cAAA,OAGA,OAFA6G,EAAA3G,YAAAqL,GACA7K,EAAAiI,WAAAzI,YAAA2G,GACAA,EAzDA2E,CAAA9K,GACA,MAAA,CAAAA,IAAAA,EAAA2J,KAAAA,EAAAiB,IAAAA,GA+DA,SAAAG,EAAA/K,EAAA2J,EAAAiB,IAOA,SAAA5K,EAAA2J,EAAAiB,GACA,IAAAI,GAAA,EACA,MAAAC,EAAA,CAAA9J,EAAA+J,IAAA/B,GAAA,KACA6B,EACAA,GAAA,GAEAA,GAAA,EACAE,EAAAnJ,WAAAZ,EAAAY,WACAoJ,EAAAnL,EAAA2J,OAGA3J,EAAAkJ,iBAAA,SAAA+B,EAAAjL,EAAA4K,IACAA,EAAA1B,iBAAA,SAAA+B,EAAAL,EAAA5K,IAlBAoL,CAAApL,EAAA2J,EAAAiB,GACA,IAAA/B,gBAAA1C,KAwBA,SAAArE,EAAA9B,EAAA2J,EAAAiB,GACA5K,EAAAoC,MAAAiJ,UAAArL,EAAA6B,YAAA7B,EAAAe,YAAA,EAAA,SAAA,GAEA4I,GAMA,SAAA7H,EAAA9B,EAAA2J,GACA,MAAA2B,EAAAxJ,EAAAA,EAAAO,MAAArC,EAAAuL,wBAAAlJ,MACAsH,EAAAvH,MAAAQ,SAAA0I,EAAA,KACA3B,EAAAvH,MAAAoJ,QAAA,OACA7B,EAAAvH,MAAAqJ,IAAAC,MAEA,MAAA9B,EAAA5J,EAAA6J,MACA8B,EAAA/B,EAAA2B,wBAAAlJ,MACAmI,EAAAb,EAAAiC,WACApB,EAAApI,MAAAC,MAAAsJ,EAAA,KAEA,MAAAlB,EAAAD,EAAAoB,WAEAC,EAAAjC,EAAA1J,KACA4L,EAAArB,EAAAvK,KACA,IAAA,IAAAkD,EAAA,EAAAA,EAAAyI,EAAA1L,OAAAiD,GAAA,EACA2I,EAAAF,EAAAzI,GAAA0I,EAAA1I,GAAA,MACA2I,EAAAF,EAAAzI,GAAA0I,EAAA1I,GAAA,MAEA,SAAA2I,EAAAC,EAAAC,EAAAC,GACA,MAAAC,EAAAH,EAAAzG,qBAAA2G,GACAzJ,EAAAwJ,EAAA1G,qBAAA2G,GACA,IAAA,IAAA9I,EAAA,EAAAA,EAAA+I,EAAAhM,OAAAiD,GAAA,EACAX,EAAAW,GAAAhB,MAAAC,MAAA8J,EAAA/I,GAAAmI,wBAAAlJ,MAAA,MA7BA+J,CAAAtK,EAAA9B,EAAA2J,GACAiB,GAiCA,SAAA5K,EAAA4K,GACAA,EAAAxI,MAAAQ,SAAA,GAAA5C,EAAAe,gBACA6J,EAAAxI,MAAAoJ,QAAA,OACA,MAAAtD,EAAAtH,SA8EA,WACA,MAAAxB,EAAAC,SAAAC,cAAA,OACAF,EAAAG,aAAA,QAAA,sEACAF,SAAAgN,KAAA7M,YAAAJ,GACA,IAAAiD,EAAA,EAAAvD,OAAAyI,iBAAAnI,GAAAkN,iBAAA,SAEA,GAAA,IAAAjK,EAAA,CACAjD,EAAAgD,MAAAmK,UAAA,SACAnN,EAAAgD,MAAAC,MAAA,GACA,MAAA4J,EAAA5M,SAAAC,cAAA,OACA2M,EAAA7J,MAAAoK,UAAA,QACApN,EAAAI,YAAAyM,GACA,MAAAnL,EAAA,EAAAhC,OAAAyI,iBAAA0E,GAAAK,iBAAA,SACAjK,EAAAjD,EAAAqN,YAAA3L,EAGA,OADAzB,SAAAgN,KAAAzM,YAAAR,GACAiD,EA9FAqK,IACA,EAAAxE,IAAA0C,EAAAxI,MAAAE,OAAA4F,EAAA,EAAA,MACA0C,EAAAgB,WAAAxJ,MAAAC,MAAA,GAAArC,EAAA6B,gBAtCA8K,CAAA3M,EAAA4K,IACAjB,GAAAiB,IAAAgC,EAAA5M,EAAA2J,EAAAiB,GACAO,EAAAnL,EAAA2J,GA7BAkD,CAAA1G,EAAA,GAAA2G,YAAA9M,EAAA2J,EAAAiB,MACA3B,QAAAjJ,GAuEA,SAAA4M,EAAA5M,EAAA2J,EAAAiB,GACA,MAAA9I,EAAA9B,EAAAuL,wBACAwB,EAAAjL,EAAAkL,OACAC,EAAAjN,EAAA6J,MAAA0B,wBACA2B,EAAAD,EAAAxB,IAAA0B,EAAAF,EAAAD,OAGAI,EAAApN,EAAA6J,MAAAwD,aACAC,EAAAP,EAAAG,EAzKA,IAyKApO,OAAAyO,YAvKA,GAyKA,IAAAC,GAAA,EACAF,GACAP,EAAAK,EA3KA,GA4KAF,EA5KA,IA6KAM,GAAA,GAEA,IAAAC,GAAA,EACAH,GACAxO,OAAAyO,YAAAJ,GACAJ,EAAAjO,OAAAyO,aACAvN,EAAA6B,YAAA7B,EAAAe,YAAA,IACA0M,GAAA,GAEA9D,GAIA,SAAA3J,EAAA2J,EAAA+D,EAAAC,GACAD,GACA/D,EAAAvH,MAAAqJ,IAAAC,MACA/B,EAAAvH,MAAAoJ,QAAA,SAEA7B,EAAAvH,MAAAoJ,QAAA,OAEA7B,EAAAvH,MAAAwL,KAAAD,EAAA,KACAhE,EAAA5H,WAAA/B,EAAA+B,WAZA8L,CAAA7N,EAAA2J,EAAA6D,EAAA1L,EAAA8L,MACAhD,GAcA,SAAA5K,EAAA4K,EAAA8C,EAAAC,GACA/C,EAAAxI,MAAAoJ,QAAAkC,EAAA,QAAA,OACA9C,EAAAxI,MAAAwL,KAAAD,EAAA,KACA/C,EAAA7I,WAAA/B,EAAA+B,WAjBA+L,CAAA9N,EAAA4K,EAAA6C,EAAA3L,EAAA8L,MAwBA,SAAAzC,EAAAnL,EAAA2J,GACA,MAAAoE,EAAAlL,KAAAC,IAAA,EAAAD,KAAAoC,IAAAjF,EAAA+B,WAAA/B,EAAA6B,YAAA7B,EAAAyM,cACA9C,IAAAA,EAAA5H,WAAAgM,GAOA,SAAA5E,EAAAV,GACA,IAAAW,EACA,MAAA,IAAA4E,KACA5E,IACAA,GAAA,EACAC,uBAAA,KACAD,GAAA,EACAX,KAAAuF,QAwBAhP,EAAAiP,gBAjPA,SAAApH,GACA,MAAApE,EAAA,GACA,IAAA,MAAAvD,KAAA2H,EAAA,CACA,MAAAoF,EAAAvC,EAAAxK,GACAwJ,YAAA,KAAAqC,EAAAkB,EAAAjM,IAAAiM,EAAAtC,KAAAsC,EAAArB,OAAA,IACAnI,EAAAC,KAAAuJ,GAEAnN,OAAAoK,iBAAA,SAAAC,GAAA,KAAA,IAAA,MAAA8C,KAAAxJ,EACAmK,EAAAX,EAAAjM,IAAAiM,EAAAtC,KAAAsC,EAAArB,QACA,CAAAsD,SAAA,KFXA,GAPA,CE6PApP,OAAAC","file":"table.min.js","sourcesContent":["/**\n *\n * Table Style (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-18\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t(function () {\n\t\t/**\n\t\t *\n\t\t * Neat Width\n\t\t *\n\t\t * @author Takuto Yanagida\n\t\t * @version 2021-01-17\n\t\t *\n\t\t */\n\t\t\n\t\t\n\t\tfunction initialize(tabs, opts = {}) {\n\t\t\tif (tabs.length === 0) return;\n\t\t\n\t\t\tconst lt = tabs[tabs.length - 1];\n\t\t\tconst cm = Object.assign({\n\t\t\t\tfullWidthRate   : 0.95,\n\t\t\t\tcellMinWidth    : 80,\n\t\t\t\tcellMinAspect   : 2 / 3,  // width / height\n\t\t\t\tcellMinLength   : 8,\n\t\t\t\tmaxRowSize      : 200,\n\t\t\t\tmaxBorderWidth  : 2,\n\t\t\t\tbefore          : null,  // function (table) { ...; return delay; }\n\t\t\t\tafter           : null,  // function (table) { ... }\n\t\t\t\tstyleNeat       : ':ncTableNeat',\n\t\t\t\tstyleFull       : ':ncTableFull',\n\t\t\t\tstyleScrollRight: ':ncScrollRight',\n\t\t\t\tstyleScrollLeft : ':ncScrollLeft',\n\t\t\t}, opts, getCommonMetrics(lt));\n\t\t\n\t\t\tcm.padH += cm.maxBorderWidth * 2;\n\t\t\tcm.padV += cm.maxBorderWidth * 2;\n\t\t\tcm.dcTd = makeDummyCell(lt, 'td');\n\t\t\tcm.dcTh = makeDummyCell(lt, 'th');\n\t\t\n\t\t\tconst tarTabs = [], noTarTabs = [];\n\t\t\tfor (const t of tabs) {\n\t\t\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\t\t\telse noTarTabs.push(t);\n\t\t\t}\n\t\t\tcm.gcCount = tarTabs.length;\n\t\t\n\t\t\tfor (const t of tarTabs) {\n\t\t\t\tconst delay = (cm.before) ? (cm.before(t) ?? 0) : false;\n\t\t\t\tst(() => {\n\t\t\t\t\tapply(t, cm);\n\t\t\t\t\taddClass(t, cm.styleNeat);\n\t\t\t\t\tif (cm.after) cm.after(t);\n\t\t\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t\t\t}, delay);\n\t\t\t}\n\t\t\tif (cm.fullWidthRate) {\n\t\t\t\tfor (const t of noTarTabs) {\n\t\t\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\t\t\tif (pw * cm.fullWidthRate < t.clientWidth) addClass(t, cm.styleFull);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction st(fn, d) { (d === false) ? fn() : setTimeout(fn, d); }\n\t\t\tinitScroll(tarTabs, cm);\n\t\t}\n\t\t\n\t\tfunction getCommonMetrics(tab) {\n\t\t\tconst td = tab.getElementsByTagName('td')[0];\n\t\t\tconst s = getComputedStyle(td);\n\t\t\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\t\t\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\t\t\tconst [charW, lineH] = getTextSize(td);\n\t\t\treturn { padH, padV, charW, lineH };\n\t\t}\n\t\t\n\t\tfunction getTextSize(elm) {\n\t\t\tconst d = document.createElement(elm.nodeName);\n\t\t\td.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\t\t\td.innerHTML = '\\u3000';  // Full width space\n\t\t\telm.parentNode.appendChild(d);\n\t\t\tconst w = d.clientWidth;\n\t\t\tconst h = d.clientHeight;\n\t\t\td.parentNode.removeChild(d);\n\t\t\treturn [w, h];\n\t\t}\n\t\t\n\t\tfunction makeDummyCell(t, tagName) {\n\t\t\tconst d = document.createElement(tagName);\n\t\t\td.setAttribute('style', `position:fixed;display:inline-block;visibility:hidden;white-space:nowrap;`);\n\t\t\treturn t.appendChild(d);\n\t\t}\n\t\t\n\t\tfunction removeDummyCell(lt, cMat) {\n\t\t\tlt.removeChild(cMat.dcTd);\n\t\t\tlt.removeChild(cMat.dcTh);\n\t\t}\n\t\t\n\t\tfunction isTarget(tab, cMet) {\n\t\t\tif (tab.rows.length === 0) return false;\n\t\t\tif (cMet.maxRowSize < tab.rows.length) return false;\n\t\t\n\t\t\tconst { cellMinWidth, cellMinAspect } = cMet;\n\t\t\tfor (const tr of tab.rows) {\n\t\t\t\tif (!tr.hasChildNodes()) continue;\n\t\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\t\tconst tn = n.tagName;\n\t\t\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\t\t\tconst cw = n.clientWidth;\n\t\t\t\t\tconst ch = n.clientHeight;\n\t\t\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction addClass(tar, cls) {\n\t\t\tif (cls.startsWith(':')) tar.dataset[cls.substr(1)] = '';\n\t\t\telse tar.classList.add(cls.substr(1));\n\t\t}\n\t\t\n\t\tfunction removeClass(tar, cls) {\n\t\t\tif (cls.startsWith(':')) delete tar.dataset[cls.substr(1)];\n\t\t\telse tar.classList.remove(cls.substr(1));\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction initScroll(tabs, cMet) {\n\t\t\tconst rob = new ResizeObserver(oes => {\n\t\t\t\tfor (const oe of oes) onScroll(oe.target, cMet);\n\t\t\t});\n\t\t\tfor (const t of tabs) {\n\t\t\t\trob.observe(t);\n\t\t\t\tt.addEventListener('scroll', throttle(() => { onScroll(t, cMet); }));\n\t\t\t}\n\t\t\tfunction throttle(fn) {\n\t\t\t\tlet isRunning;\n\t\t\t\treturn () => {\n\t\t\t\t\tif (isRunning) return;\n\t\t\t\t\tisRunning = true;\n\t\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\t\tisRunning = false;\n\t\t\t\t\t\tfn();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction onScroll(tab, cMet) {\n\t\t\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\n\t\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\n\t\t\t\t(0.95 < r ? removeClass : addClass)(tab, cMet.styleScrollRight);\n\t\t\t\t(r < 0.05 ? removeClass : addClass)(tab, cMet.styleScrollLeft);\n\t\t\t} else {\n\t\t\t\tremoveClass(tab, cMet.styleScrollRight);\n\t\t\t\tremoveClass(tab, cMet.styleScrollLeft);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction apply(tab, cMet) {\n\t\t\ttab.removeAttribute('width');\n\t\t\ttab.style.width = null;\n\t\t\ttab.style.height = null;\n\t\t\n\t\t\tconst grid  = makeCellGrid(tab);\n\t\t\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\t\t\tconst newWs = calcNewWidths(grid, met);\n\t\t\tsetCellWidth(grid, newWs);\n\t\t\n\t\t\tconst cs = tab.getElementsByTagName('caption');\n\t\t\tif (cs.length) cs[0].innerHTML = `<span>${cs[0].innerHTML}</span>`;\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction makeCellGrid(t) {\n\t\t\tconst css = collectCells(t);\n\t\t\tlet maxWidth = 0;\n\t\t\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\t\t\tconst g = [];\n\t\t\tfor (const cs of css) g.push(new Array(maxWidth));\n\t\t\n\t\t\tfor (let y = 0; y < g.length; y += 1) {\n\t\t\t\tconst gr = g[y];\n\t\t\t\tconst tds = css[y];\n\t\t\t\tlet i = 0;\n\t\t\n\t\t\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\t\t\n\t\t\t\t\tconst td = tds[i]\n\t\t\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\t\t\tgr[x] = td;\n\t\t\n\t\t\t\t\tif (1 < col) {\n\t\t\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t\t\t}\n\t\t\t\t\tif (1 < row) {\n\t\t\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ti += 1;\n\t\t\t\t\tif (tds.length <= i) break;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn g;\n\t\t}\n\t\t\n\t\tfunction collectCells(t, css = []) {\n\t\t\tfor (const tr of t.rows) {\n\t\t\t\tconst cs = [];\n\t\t\t\tif (tr.hasChildNodes()) {\n\t\t\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\t\t\tconst tn = n.tagName;\n\t\t\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcss.push(cs);\n\t\t\t}\n\t\t\treturn css;\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction getMetrics(tab, grid) {\n\t\t\tconst origTabW = tab.clientWidth;\n\t\t\tconst origCellWs = [];\n\t\t\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\t\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\t\t\tconst g = grid[y][x];\n\t\t\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { origTabW, origCellWs };\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction calcNewWidths(grid, met) {\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (const gc of gr) {\n\t\t\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst gw = grid[0].length;\n\t\t\tconst newWs = new Array(gw).fill(0);\n\t\t\tconst fixWs = new Array(gw).fill(0);\n\t\t\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\t\t\tconst td = gr[x];\n\t\t\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\t\t\n\t\t\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t\t\t}\n\t\t\t}\n\t\t\twidenTabWidth(newWs, fixWs, met);\n\t\t\treturn newWs;\n\t\t}\n\t\t\n\t\tfunction calcMinWidth(td, met) {\n\t\t\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\t\t\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\t\t\n\t\t\ttd.innerHTML = td.innerHTML.trim();\n\t\t\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\t\t\tdc.innerHTML = td.innerHTML;\n\t\t\tconst aw = dc.clientWidth - padH;\n\t\t\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\t\t\tlet minW = 0;\n\t\t\tfor (let i = 2;; i += 1) {\n\t\t\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\t\t\tconst tempH = ls * (i * lineH) + padV;\n\t\t\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\t\t\tminW = tempW;\n\t\t\t}\n\t\t\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n\t\t}\n\t\t\n\t\tfunction calcMaxLineLength(td) {\n\t\t\tconst ih = td.innerHTML.trim();\n\t\t\tconst ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\t\t\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\t\t\treturn Math.max(...ts);\n\t\t}\n\t\t\n\t\tfunction widenTabWidth(newWs, fixWs, met) {\n\t\t\tconst { origTabW, origCellWs } = met;\n\t\t\tlet wNew = 0, wFix = 0;\n\t\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\t\tif (newWs[i]) {\n\t\t\t\t\twNew += newWs[i];\n\t\t\t\t} else {\n\t\t\t\t\twFix += fixWs[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (origTabW < wNew + wFix) return;\n\t\t\tlet rem = origTabW - wFix;\n\t\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\t\tif (!newWs[i]) continue;\n\t\t\t\tconst nw = newWs[i];\n\t\t\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\t\t\trem  -= (w - nw);\n\t\t\t\twNew -= (w - nw);\n\t\t\t\tnewWs[i] = 0 | w;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction setCellWidth(grid, ws) {\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\t\t\tgc.style.whiteSpace = null;\n\t\t\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\t\t\tgc.style.width      = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tNS.tableNeatWidth = initialize;\n\t})();\n\n\t(function () {\n\t\t/**\r\n\t\t *\r\n\t\t * Usable View (JS)\r\n\t\t *\r\n\t\t * @author Takuto Yanagida\r\n\t\t * @version 2021-01-20\r\n\t\t *\r\n\t\t */\r\n\t\t\r\n\t\t\r\n\t\tconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\n\t\tconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\n\t\tconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\t\t\r\n\t\tconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\t\t\r\n\t\tlet getOffset = () => { return 0; };\r\n\t\t\r\n\t\t\r\n\t\t// -------------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction initialize(tabs) {\r\n\t\t\tconst cs = [];\r\n\t\t\tfor (const t of tabs) {\r\n\t\t\t\tconst c = _create(t);\r\n\t\t\t\tsetTimeout(() => { _initialize(c.tab, c.head, c.bar); }, 10);\r\n\t\t\t\tcs.push(c);\r\n\t\t\t}\r\n\t\t\twindow.addEventListener('scroll', throttle(() => { for (const c of cs) {\r\n\t\t\t\tonWindowScroll(c.tab, c.head, c.bar);\r\n\t\t\t}}), { passive: true });\r\n\t\t}\r\n\t\t\r\n\t\tfunction _create(tab) {\r\n\t\t\tconst head = createHeaderClone(tab);\r\n\t\t\tconst bar = createScrollBarClone(tab);\r\n\t\t\treturn {tab, head, bar};\r\n\t\t}\r\n\t\t\r\n\t\tfunction createHeaderClone(tab) {\r\n\t\t\tlet thead = tab.tHead;\r\n\t\t\tif (!thead) {\r\n\t\t\t\tthead = createPseudoHeader(tab);\r\n\t\t\t\tif (!thead) return null;\r\n\t\t\t\ttab.tHead = thead;\r\n\t\t\t}\r\n\t\t\tconst cont = document.createElement('div');\r\n\t\t\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\t\t\ttab.parentNode.appendChild(cont);\r\n\t\t\r\n\t\t\tconst ptab = document.createElement('div');\r\n\t\t\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\t\t\tcont.appendChild(ptab);\r\n\t\t\r\n\t\t\tconst clone = thead.cloneNode(true);\r\n\t\t\tptab.appendChild(clone);\r\n\t\t\treturn cont;\r\n\t\t}\r\n\t\t\r\n\t\tfunction createPseudoHeader(tab) {\r\n\t\t\tconst tbody = tab.tBodies[0];\r\n\t\t\tconst trs = tbody.rows;\r\n\t\t\tif (trs.length === 0) return null;\r\n\t\t\r\n\t\t\tfunction containsOnlyTh(tr) {\r\n\t\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tconst trsH = [];\r\n\t\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\t\tconst tr = trs[i];\r\n\t\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\t\ttrsH.push(tr);\r\n\t\t\t}\r\n\t\t\tif (trsH.length === 0) return null;\r\n\t\t\r\n\t\t\tconst thead = tab.createTHead();\r\n\t\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\t\tthead.appendChild(trsH[i]);\r\n\t\t\t}\r\n\t\t\treturn thead;\r\n\t\t}\r\n\t\t\r\n\t\tfunction createScrollBarClone(tab) {\r\n\t\t\tconst e = document.createElement('div');\r\n\t\t\te.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\t\tconst spacer = document.createElement('div');\r\n\t\t\te.appendChild(spacer);\r\n\t\t\ttab.parentNode.appendChild(e);\r\n\t\t\treturn e;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction _initialize(tab, head, bar) {\r\n\t\t\tinitTableScroll(tab, head, bar);\r\n\t\t\tnew ResizeObserver((e) => {\r\n\t\t\t\tonResize(e[0].contentRect, tab, head, bar);\r\n\t\t\t}).observe(tab);\r\n\t\t}\r\n\t\t\r\n\t\tfunction initTableScroll(tab, head, bar) {\r\n\t\t\tlet forced = false;\r\n\t\t\tconst el = (tar, op) => throttle(() => {\r\n\t\t\t\tif (forced) {\r\n\t\t\t\t\tforced = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tforced = true;\r\n\t\t\t\t\top.scrollLeft = tar.scrollLeft;\r\n\t\t\t\t\tonTableScroll(tab, head);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\ttab.addEventListener('scroll', el(tab, bar));\r\n\t\t\tbar.addEventListener('scroll', el(bar, tab));\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction onResize(r, tab, head, bar) {\r\n\t\t\ttab.style.overflowX = (tab.scrollWidth < tab.clientWidth + 2) ? 'hidden' : '';\r\n\t\t\r\n\t\t\tif (head) _updateHeaderSize(r, tab, head);\r\n\t\t\tif (bar) updateScrollBarSize(tab, bar);\r\n\t\t\tif (head || bar) onWindowScroll(tab, head, bar);\r\n\t\t\tonTableScroll(tab, head);\r\n\t\t}\r\n\t\t\r\n\t\tfunction _updateHeaderSize(r, tab, head) {\r\n\t\t\tconst tw = r ? r.width : tab.getBoundingClientRect().width;\r\n\t\t\thead.style.maxWidth = tw + 'px';\r\n\t\t\thead.style.display = 'none';\r\n\t\t\thead.style.top = getOffset() + 'px';\r\n\t\t\r\n\t\t\tconst thead = tab.tHead;\r\n\t\t\tconst hw = thead.getBoundingClientRect().width;\r\n\t\t\tconst ptab = head.firstChild;\r\n\t\t\tptab.style.width = hw + 'px';\r\n\t\t\r\n\t\t\tconst clone = ptab.firstChild;\r\n\t\t\r\n\t\t\tconst oTrs = thead.rows;\r\n\t\t\tconst cTrs = clone.rows;\r\n\t\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t\t}\r\n\t\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction updateScrollBarSize(tab, bar) {\r\n\t\t\tbar.style.maxWidth = `${tab.clientWidth}px`;\r\n\t\t\tbar.style.display = 'none';\r\n\t\t\tconst h = parseInt(getScrollBarWidth());\r\n\t\t\tif (0 < h) bar.style.height = (h + 2) + 'px';\r\n\t\t\tbar.firstChild.style.width = `${tab.scrollWidth}px`;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction onWindowScroll(tab, head, bar) {\r\n\t\t\tconst r = tab.getBoundingClientRect();\r\n\t\t\tconst tabBottom = r.bottom;\r\n\t\t\tconst rh = tab.tHead.getBoundingClientRect();\r\n\t\t\tconst headTop = rh.top, headBottom = rh.bottom;\r\n\t\t\r\n\t\t\tconst offset = getOffset();\r\n\t\t\tconst headH = tab.tHead.offsetHeight;\r\n\t\t\tconst inView = tabBottom - headTop < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\t\t\r\n\t\t\tlet headVisible = false;\r\n\t\t\tif (inView) {  // do nothing\r\n\t\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t\t} else if (headTop < offset) {\r\n\t\t\t\theadVisible = true;\r\n\t\t\t}\r\n\t\t\tlet barVisible = false;\r\n\t\t\tif (inView) {  // do nothing\r\n\t\t\t} else if (window.innerHeight < headBottom) {  // do nothing\r\n\t\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t\t} else if (tab.scrollWidth - tab.clientWidth > 2) {\r\n\t\t\t\tbarVisible = true;\r\n\t\t\t}\r\n\t\t\tif (head) updateHeaderVisibility(tab, head, headVisible, r.left);\r\n\t\t\tif (bar) updateScrollBarVisibility(tab, bar, barVisible, r.left);\r\n\t\t}\r\n\t\t\r\n\t\tfunction updateHeaderVisibility(tab, head, visible, tabLeft) {\r\n\t\t\tif (visible) {\r\n\t\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\t\thead.style.display = 'block';\r\n\t\t\t} else {\r\n\t\t\t\thead.style.display = 'none';\r\n\t\t\t}\r\n\t\t\thead.style.left = tabLeft + 'px';\r\n\t\t\thead.scrollLeft = tab.scrollLeft;\r\n\t\t}\r\n\t\t\r\n\t\tfunction updateScrollBarVisibility(tab, bar, visible, tabLeft) {\r\n\t\t\tbar.style.display = visible ? 'block' : 'none';\r\n\t\t\tbar.style.left = tabLeft + 'px';\r\n\t\t\tbar.scrollLeft = tab.scrollLeft;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction onTableScroll(tab, head) {\r\n\t\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\t\tif (head) head.scrollLeft = sL;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Utilities ---------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction throttle(fn) {\r\n\t\t\tlet isRunning;\r\n\t\t\treturn (...args) => {\r\n\t\t\t\tif (isRunning) return;\r\n\t\t\t\tisRunning = true;\r\n\t\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\t\tisRunning = false;\r\n\t\t\t\t\tfn(...args);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tfunction getScrollBarWidth() {\r\n\t\t\tconst d = document.createElement('div');\r\n\t\t\td.setAttribute('style', `position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;`);\r\n\t\t\tdocument.body.appendChild(d);\r\n\t\t\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\t\t\r\n\t\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\t\td.style.overflowY = 'scroll';\r\n\t\t\t\td.style.width = '';\r\n\t\t\t\tconst c = document.createElement('div');\r\n\t\t\t\tc.style.minHeight = '100px';\r\n\t\t\t\td.appendChild(c);\r\n\t\t\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\t\t\twidth = d.offsetWidth - cw;\r\n\t\t\t}\r\n\t\t\tdocument.body.removeChild(d);\r\n\t\t\treturn width;\r\n\t\t}\r\n\t\t\n\t\tNS.tableUsableView = initialize;\n\t})();\n\n})(window.NACSS);\n","/**\n *\n * Neat Width\n *\n * @author Takuto Yanagida\n * @version 2021-01-17\n *\n */\n\n\nfunction initialize(tabs, opts = {}) {\n\tif (tabs.length === 0) return;\n\n\tconst lt = tabs[tabs.length - 1];\n\tconst cm = Object.assign({\n\t\tfullWidthRate   : 0.95,\n\t\tcellMinWidth    : 80,\n\t\tcellMinAspect   : 2 / 3,  // width / height\n\t\tcellMinLength   : 8,\n\t\tmaxRowSize      : 200,\n\t\tmaxBorderWidth  : 2,\n\t\tbefore          : null,  // function (table) { ...; return delay; }\n\t\tafter           : null,  // function (table) { ... }\n\t\tstyleNeat       : ':ncTableNeat',\n\t\tstyleFull       : ':ncTableFull',\n\t\tstyleScrollRight: ':ncScrollRight',\n\t\tstyleScrollLeft : ':ncScrollLeft',\n\t}, opts, getCommonMetrics(lt));\n\n\tcm.padH += cm.maxBorderWidth * 2;\n\tcm.padV += cm.maxBorderWidth * 2;\n\tcm.dcTd = makeDummyCell(lt, 'td');\n\tcm.dcTh = makeDummyCell(lt, 'th');\n\n\tconst tarTabs = [], noTarTabs = [];\n\tfor (const t of tabs) {\n\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\telse noTarTabs.push(t);\n\t}\n\tcm.gcCount = tarTabs.length;\n\n\tfor (const t of tarTabs) {\n\t\tconst delay = (cm.before) ? (cm.before(t) ?? 0) : false;\n\t\tst(() => {\n\t\t\tapply(t, cm);\n\t\t\taddClass(t, cm.styleNeat);\n\t\t\tif (cm.after) cm.after(t);\n\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t}, delay);\n\t}\n\tif (cm.fullWidthRate) {\n\t\tfor (const t of noTarTabs) {\n\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\tif (pw * cm.fullWidthRate < t.clientWidth) addClass(t, cm.styleFull);\n\t\t}\n\t}\n\tfunction st(fn, d) { (d === false) ? fn() : setTimeout(fn, d); }\n\tinitScroll(tarTabs, cm);\n}\n\nfunction getCommonMetrics(tab) {\n\tconst td = tab.getElementsByTagName('td')[0];\n\tconst s = getComputedStyle(td);\n\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\tconst [charW, lineH] = getTextSize(td);\n\treturn { padH, padV, charW, lineH };\n}\n\nfunction getTextSize(elm) {\n\tconst d = document.createElement(elm.nodeName);\n\td.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\td.innerHTML = '\\u3000';  // Full width space\n\telm.parentNode.appendChild(d);\n\tconst w = d.clientWidth;\n\tconst h = d.clientHeight;\n\td.parentNode.removeChild(d);\n\treturn [w, h];\n}\n\nfunction makeDummyCell(t, tagName) {\n\tconst d = document.createElement(tagName);\n\td.setAttribute('style', `position:fixed;display:inline-block;visibility:hidden;white-space:nowrap;`);\n\treturn t.appendChild(d);\n}\n\nfunction removeDummyCell(lt, cMat) {\n\tlt.removeChild(cMat.dcTd);\n\tlt.removeChild(cMat.dcTh);\n}\n\nfunction isTarget(tab, cMet) {\n\tif (tab.rows.length === 0) return false;\n\tif (cMet.maxRowSize < tab.rows.length) return false;\n\n\tconst { cellMinWidth, cellMinAspect } = cMet;\n\tfor (const tr of tab.rows) {\n\t\tif (!tr.hasChildNodes()) continue;\n\t\tfor (const n of tr.childNodes) {\n\t\t\tconst tn = n.tagName;\n\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\tconst cw = n.clientWidth;\n\t\t\tconst ch = n.clientHeight;\n\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction addClass(tar, cls) {\n\tif (cls.startsWith(':')) tar.dataset[cls.substr(1)] = '';\n\telse tar.classList.add(cls.substr(1));\n}\n\nfunction removeClass(tar, cls) {\n\tif (cls.startsWith(':')) delete tar.dataset[cls.substr(1)];\n\telse tar.classList.remove(cls.substr(1));\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction initScroll(tabs, cMet) {\n\tconst rob = new ResizeObserver(oes => {\n\t\tfor (const oe of oes) onScroll(oe.target, cMet);\n\t});\n\tfor (const t of tabs) {\n\t\trob.observe(t);\n\t\tt.addEventListener('scroll', throttle(() => { onScroll(t, cMet); }));\n\t}\n\tfunction throttle(fn) {\n\t\tlet isRunning;\n\t\treturn () => {\n\t\t\tif (isRunning) return;\n\t\t\tisRunning = true;\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tisRunning = false;\n\t\t\t\tfn();\n\t\t\t});\n\t\t};\n\t}\n}\n\nfunction onScroll(tab, cMet) {\n\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\n\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\n\t\t(0.95 < r ? removeClass : addClass)(tab, cMet.styleScrollRight);\n\t\t(r < 0.05 ? removeClass : addClass)(tab, cMet.styleScrollLeft);\n\t} else {\n\t\tremoveClass(tab, cMet.styleScrollRight);\n\t\tremoveClass(tab, cMet.styleScrollLeft);\n\t}\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction apply(tab, cMet) {\n\ttab.removeAttribute('width');\n\ttab.style.width = null;\n\ttab.style.height = null;\n\n\tconst grid  = makeCellGrid(tab);\n\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\tconst newWs = calcNewWidths(grid, met);\n\tsetCellWidth(grid, newWs);\n\n\tconst cs = tab.getElementsByTagName('caption');\n\tif (cs.length) cs[0].innerHTML = `<span>${cs[0].innerHTML}</span>`;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction makeCellGrid(t) {\n\tconst css = collectCells(t);\n\tlet maxWidth = 0;\n\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\tconst g = [];\n\tfor (const cs of css) g.push(new Array(maxWidth));\n\n\tfor (let y = 0; y < g.length; y += 1) {\n\t\tconst gr = g[y];\n\t\tconst tds = css[y];\n\t\tlet i = 0;\n\n\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\n\t\t\tconst td = tds[i]\n\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\tgr[x] = td;\n\n\t\t\tif (1 < col) {\n\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t}\n\t\t\tif (1 < row) {\n\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tif (tds.length <= i) break;\n\t\t}\n\t}\n\treturn g;\n}\n\nfunction collectCells(t, css = []) {\n\tfor (const tr of t.rows) {\n\t\tconst cs = [];\n\t\tif (tr.hasChildNodes()) {\n\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\tconst tn = n.tagName;\n\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t}\n\t\t}\n\t\tcss.push(cs);\n\t}\n\treturn css;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction getMetrics(tab, grid) {\n\tconst origTabW = tab.clientWidth;\n\tconst origCellWs = [];\n\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\tconst g = grid[y][x];\n\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn { origTabW, origCellWs };\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction calcNewWidths(grid, met) {\n\tfor (const gr of grid) {\n\t\tfor (const gc of gr) {\n\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t}\n\t}\n\tconst gw = grid[0].length;\n\tconst newWs = new Array(gw).fill(0);\n\tconst fixWs = new Array(gw).fill(0);\n\n\tfor (const gr of grid) {\n\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\tconst td = gr[x];\n\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\n\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t}\n\t}\n\twidenTabWidth(newWs, fixWs, met);\n\treturn newWs;\n}\n\nfunction calcMinWidth(td, met) {\n\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\n\ttd.innerHTML = td.innerHTML.trim();\n\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\tdc.innerHTML = td.innerHTML;\n\tconst aw = dc.clientWidth - padH;\n\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\tlet minW = 0;\n\tfor (let i = 2;; i += 1) {\n\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\tconst tempH = ls * (i * lineH) + padV;\n\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\tminW = tempW;\n\t}\n\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n}\n\nfunction calcMaxLineLength(td) {\n\tconst ih = td.innerHTML.trim();\n\tconst ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\treturn Math.max(...ts);\n}\n\nfunction widenTabWidth(newWs, fixWs, met) {\n\tconst { origTabW, origCellWs } = met;\n\tlet wNew = 0, wFix = 0;\n\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\tif (newWs[i]) {\n\t\t\twNew += newWs[i];\n\t\t} else {\n\t\t\twFix += fixWs[i];\n\t\t}\n\t}\n\tif (origTabW < wNew + wFix) return;\n\tlet rem = origTabW - wFix;\n\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\tif (!newWs[i]) continue;\n\t\tconst nw = newWs[i];\n\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\trem  -= (w - nw);\n\t\twNew -= (w - nw);\n\t\tnewWs[i] = 0 | w;\n\t}\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction setCellWidth(grid, ws) {\n\tfor (const gr of grid) {\n\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\tgc.style.whiteSpace = null;\n\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\tgc.style.width      = null;\n\t\t}\n\t}\n}\n","/**\r\n *\r\n * Usable View (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-20\r\n *\r\n */\r\n\r\n\r\nconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\nconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\nconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\r\nconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\r\nlet getOffset = () => { return 0; };\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nfunction initialize(tabs) {\r\n\tconst cs = [];\r\n\tfor (const t of tabs) {\r\n\t\tconst c = _create(t);\r\n\t\tsetTimeout(() => { _initialize(c.tab, c.head, c.bar); }, 10);\r\n\t\tcs.push(c);\r\n\t}\r\n\twindow.addEventListener('scroll', throttle(() => { for (const c of cs) {\r\n\t\tonWindowScroll(c.tab, c.head, c.bar);\r\n\t}}), { passive: true });\r\n}\r\n\r\nfunction _create(tab) {\r\n\tconst head = createHeaderClone(tab);\r\n\tconst bar = createScrollBarClone(tab);\r\n\treturn {tab, head, bar};\r\n}\r\n\r\nfunction createHeaderClone(tab) {\r\n\tlet thead = tab.tHead;\r\n\tif (!thead) {\r\n\t\tthead = createPseudoHeader(tab);\r\n\t\tif (!thead) return null;\r\n\t\ttab.tHead = thead;\r\n\t}\r\n\tconst cont = document.createElement('div');\r\n\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\ttab.parentNode.appendChild(cont);\r\n\r\n\tconst ptab = document.createElement('div');\r\n\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\tcont.appendChild(ptab);\r\n\r\n\tconst clone = thead.cloneNode(true);\r\n\tptab.appendChild(clone);\r\n\treturn cont;\r\n}\r\n\r\nfunction createPseudoHeader(tab) {\r\n\tconst tbody = tab.tBodies[0];\r\n\tconst trs = tbody.rows;\r\n\tif (trs.length === 0) return null;\r\n\r\n\tfunction containsOnlyTh(tr) {\r\n\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst trsH = [];\r\n\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\tconst tr = trs[i];\r\n\t\tif (!containsOnlyTh(tr)) break;\r\n\t\ttrsH.push(tr);\r\n\t}\r\n\tif (trsH.length === 0) return null;\r\n\r\n\tconst thead = tab.createTHead();\r\n\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\tthead.appendChild(trsH[i]);\r\n\t}\r\n\treturn thead;\r\n}\r\n\r\nfunction createScrollBarClone(tab) {\r\n\tconst e = document.createElement('div');\r\n\te.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\tconst spacer = document.createElement('div');\r\n\te.appendChild(spacer);\r\n\ttab.parentNode.appendChild(e);\r\n\treturn e;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction _initialize(tab, head, bar) {\r\n\tinitTableScroll(tab, head, bar);\r\n\tnew ResizeObserver((e) => {\r\n\t\tonResize(e[0].contentRect, tab, head, bar);\r\n\t}).observe(tab);\r\n}\r\n\r\nfunction initTableScroll(tab, head, bar) {\r\n\tlet forced = false;\r\n\tconst el = (tar, op) => throttle(() => {\r\n\t\tif (forced) {\r\n\t\t\tforced = false;\r\n\t\t} else {\r\n\t\t\tforced = true;\r\n\t\t\top.scrollLeft = tar.scrollLeft;\r\n\t\t\tonTableScroll(tab, head);\r\n\t\t}\r\n\t});\r\n\ttab.addEventListener('scroll', el(tab, bar));\r\n\tbar.addEventListener('scroll', el(bar, tab));\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onResize(r, tab, head, bar) {\r\n\ttab.style.overflowX = (tab.scrollWidth < tab.clientWidth + 2) ? 'hidden' : '';\r\n\r\n\tif (head) _updateHeaderSize(r, tab, head);\r\n\tif (bar) updateScrollBarSize(tab, bar);\r\n\tif (head || bar) onWindowScroll(tab, head, bar);\r\n\tonTableScroll(tab, head);\r\n}\r\n\r\nfunction _updateHeaderSize(r, tab, head) {\r\n\tconst tw = r ? r.width : tab.getBoundingClientRect().width;\r\n\thead.style.maxWidth = tw + 'px';\r\n\thead.style.display = 'none';\r\n\thead.style.top = getOffset() + 'px';\r\n\r\n\tconst thead = tab.tHead;\r\n\tconst hw = thead.getBoundingClientRect().width;\r\n\tconst ptab = head.firstChild;\r\n\tptab.style.width = hw + 'px';\r\n\r\n\tconst clone = ptab.firstChild;\r\n\r\n\tconst oTrs = thead.rows;\r\n\tconst cTrs = clone.rows;\r\n\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t}\r\n\tfunction copyWidth(o, c, tag) {\r\n\t\tconst os = o.getElementsByTagName(tag);\r\n\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction updateScrollBarSize(tab, bar) {\r\n\tbar.style.maxWidth = `${tab.clientWidth}px`;\r\n\tbar.style.display = 'none';\r\n\tconst h = parseInt(getScrollBarWidth());\r\n\tif (0 < h) bar.style.height = (h + 2) + 'px';\r\n\tbar.firstChild.style.width = `${tab.scrollWidth}px`;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onWindowScroll(tab, head, bar) {\r\n\tconst r = tab.getBoundingClientRect();\r\n\tconst tabBottom = r.bottom;\r\n\tconst rh = tab.tHead.getBoundingClientRect();\r\n\tconst headTop = rh.top, headBottom = rh.bottom;\r\n\r\n\tconst offset = getOffset();\r\n\tconst headH = tab.tHead.offsetHeight;\r\n\tconst inView = tabBottom - headTop < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\r\n\tlet headVisible = false;\r\n\tif (inView) {  // do nothing\r\n\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t} else if (headTop < offset) {\r\n\t\theadVisible = true;\r\n\t}\r\n\tlet barVisible = false;\r\n\tif (inView) {  // do nothing\r\n\t} else if (window.innerHeight < headBottom) {  // do nothing\r\n\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t} else if (tab.scrollWidth - tab.clientWidth > 2) {\r\n\t\tbarVisible = true;\r\n\t}\r\n\tif (head) updateHeaderVisibility(tab, head, headVisible, r.left);\r\n\tif (bar) updateScrollBarVisibility(tab, bar, barVisible, r.left);\r\n}\r\n\r\nfunction updateHeaderVisibility(tab, head, visible, tabLeft) {\r\n\tif (visible) {\r\n\t\thead.style.top     = getOffset() + 'px';\r\n\t\thead.style.display = 'block';\r\n\t} else {\r\n\t\thead.style.display = 'none';\r\n\t}\r\n\thead.style.left = tabLeft + 'px';\r\n\thead.scrollLeft = tab.scrollLeft;\r\n}\r\n\r\nfunction updateScrollBarVisibility(tab, bar, visible, tabLeft) {\r\n\tbar.style.display = visible ? 'block' : 'none';\r\n\tbar.style.left = tabLeft + 'px';\r\n\tbar.scrollLeft = tab.scrollLeft;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onTableScroll(tab, head) {\r\n\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\tif (head) head.scrollLeft = sL;\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction throttle(fn) {\r\n\tlet isRunning;\r\n\treturn (...args) => {\r\n\t\tif (isRunning) return;\r\n\t\tisRunning = true;\r\n\t\trequestAnimationFrame(() => {\r\n\t\t\tisRunning = false;\r\n\t\t\tfn(...args);\r\n\t\t});\r\n\t};\r\n}\r\n\r\nfunction getScrollBarWidth() {\r\n\tconst d = document.createElement('div');\r\n\td.setAttribute('style', `position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;`);\r\n\tdocument.body.appendChild(d);\r\n\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\td.style.overflowY = 'scroll';\r\n\t\td.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\td.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\twidth = d.offsetWidth - cw;\r\n\t}\r\n\tdocument.body.removeChild(d);\r\n\treturn width;\r\n}\r\n"]}