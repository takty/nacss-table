{"version":3,"sources":["table.js","_neat-width.js","_scroll.js","_fixed-header.js"],"names":["window","NACSS","NS","makeDummyCell","t","tagName","d","document","createElement","setAttribute","appendChild","removeDummyCell","lt","cMat","removeChild","dcTd","dcTh","isTarget","tab","cMet","rows","length","maxRowSize","cellMinWidth","cellMinAspect","tr","hasChildNodes","n","childNodes","tn","parseInt","getAttribute","cw","clientWidth","ch","clientHeight","addClass","tar","cls","startsWith","dataset","substr","classList","add","removeClass","remove","onScroll","scrollWidth","r","scrollLeft","styleScrollRight","styleScrollLeft","apply","removeAttribute","style","width","height","grid","css","cs","push","collectCells","maxWidth","Math","max","g","Array","y","gr","tds","i","x","td","col","row","p","q","nr","makeCellGrid","ws","gc","w","HTMLTableCellElement","whiteSpace","minWidth","setCellWidth","met","gw","newWs","fill","fixWs","minW","calcMinWidth","origTabW","origCellWs","wNew","wFix","rem","nw","min","widenTabWidth","calcNewWidths","Object","assign","getMetrics","getElementsByTagName","innerHTML","padH","padV","charW","lineH","cellMinLength","ih","trim","ts","split","map","e","replace","calcMaxLineLength","dc","aw","ls","round","tempW","tempH","tableNeatWidth","tabs","opts","cm","fullWidthRate","maxBorderWidth","before","after","styleNeat","styleFull","s","getComputedStyle","parseFloat","paddingLeft","paddingRight","paddingTop","paddingBottom","elm","nodeName","fontFamily","fontSize","parentNode","h","getTextSize","getCommonMetrics","tarTabs","noTarTabs","gcCount","delay","fn","setTimeout","parentElement","rob","ResizeObserver","oes","oe","target","observe","addEventListener","throttle","isRunning","requestAnimationFrame","initScroll","scrollBarWidth","FixedHeaderTable","constructor","this","_table","_headerHeight","_windowWidth","_create","_initialize","_sbar","_createScrollBarClone","caps","_capt","stile","spacer","_initTableScroll","onWindowResize","tableScrollChanged","sbarScrollChanged","overflowX","ww","outerWidth","innerWidth","b","display","_getScrollBarWidth","firstChild","onWindowScroll","getBoundingClientRect","tabTop","top","tabBottom","bottom","capH","offsetHeight","headH","sbarVisible","innerHeight","left","body","getPropertyValue","overflowY","c","minHeight","offsetWidth","tableScroll","conts","passive","ST_STATE_ENLARGED","run","_isEnlarged","_head","_createHeaderClone","_ebtn","indexOf","_createEnlargerButton","_shade","_createShade","thead","tHead","_createPseudoHeader","cont","ptab","clone","cloneNode","trs","tBodies","containsOnlyTh","ths","trsH","I","createTHead","sbar","ebtn","shade","bg","backgroundColor","_turnOffEnlarged","_turnOnEnlarged","_isEnlargable","_resize","_adjustUnexpectedScrollBar","_onTableScroll","_isScrollable","addStile","pageXOffset","pwidth","marginLeft","background","_updateHeaderSize","_updateScrollBarSize","getOffset","oTrs","cTrs","copyWidth","o","tag","os","tbody","ceil","inView","headVisible","updateHeaderVisibility","updateScrollBarVisibility","visible","tabLeft","head","switchEnlargerToFloatingHeader","switchEnlargerToTable","capt","sL","_stCapt","clearTimeout","transform","_stEbtn","_updateEnlager","_stShade","_updateShade","scrW","cltW","etbRight","diff","right","_calcShadeStyle","rl","rr","sl","sr","dummy","position","tableFixedHeader"],"mappings":"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","file":"table.min.js","sourcesContent":["/**\n *\n * Table Style (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-15\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t(function () {\n\t\t/**\n\t\t *\n\t\t * Neat Width\n\t\t *\n\t\t * @author Takuto Yanagida\n\t\t * @version 2021-01-17\n\t\t *\n\t\t */\n\t\t\n\t\t\n\t\tfunction initialize(tabs, opts = {}) {\n\t\t\tif (tabs.length === 0) return;\n\t\t\n\t\t\tconst lt = tabs[tabs.length - 1];\n\t\t\tconst cm = Object.assign({\n\t\t\t\tfullWidthRate   : 0.95,\n\t\t\t\tcellMinWidth    : 80,\n\t\t\t\tcellMinAspect   : 2 / 3,  // width / height\n\t\t\t\tcellMinLength   : 8,\n\t\t\t\tmaxRowSize      : 200,\n\t\t\t\tmaxBorderWidth  : 2,\n\t\t\t\tbefore          : null,  // function (table) { ...; return delay; }\n\t\t\t\tafter           : null,  // function (table) { ... }\n\t\t\t\tstyleNeat       : ':ncTableNeat',\n\t\t\t\tstyleFull       : ':ncTableFull',\n\t\t\t\tstyleScrollRight: ':ncScrollRight',\n\t\t\t\tstyleScrollLeft : ':ncScrollLeft',\n\t\t\t}, opts, getCommonMetrics(lt));\n\t\t\n\t\t\tcm.padH += cm.maxBorderWidth * 2;\n\t\t\tcm.padV += cm.maxBorderWidth * 2;\n\t\t\tcm.dcTd = makeDummyCell(lt, 'td');\n\t\t\tcm.dcTh = makeDummyCell(lt, 'th');\n\t\t\n\t\t\tconst tarTabs = [], noTarTabs = [];\n\t\t\tfor (const t of tabs) {\n\t\t\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\t\t\telse noTarTabs.push(t);\n\t\t\t}\n\t\t\tcm.gcCount = tarTabs.length;\n\t\t\n\t\t\tfor (const t of tarTabs) {\n\t\t\t\tconst delay = (cm.before) ? (cm.before(t) ?? 0) : false;\n\t\t\t\tst(() => {\n\t\t\t\t\tapply(t, cm);\n\t\t\t\t\taddClass(t, cm.styleNeat);\n\t\t\t\t\tif (cm.after) cm.after(t);\n\t\t\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t\t\t}, delay);\n\t\t\t}\n\t\t\tif (cm.fullWidthRate) {\n\t\t\t\tfor (const t of noTarTabs) {\n\t\t\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\t\t\tif (pw * cm.fullWidthRate < t.clientWidth) addClass(t, cm.styleFull);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction st(fn, d) { (d === false) ? fn() : setTimeout(fn, d); }\n\t\t\tinitScroll(tarTabs, cm);\n\t\t}\n\t\t\n\t\tfunction getCommonMetrics(tab) {\n\t\t\tconst td = tab.getElementsByTagName('td')[0];\n\t\t\tconst s = getComputedStyle(td);\n\t\t\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\t\t\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\t\t\tconst [charW, lineH] = getTextSize(td);\n\t\t\treturn { padH, padV, charW, lineH };\n\t\t}\n\t\t\n\t\tfunction getTextSize(elm) {\n\t\t\tconst d = document.createElement(elm.nodeName);\n\t\t\td.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\t\t\td.innerHTML = '\\u3000';  // Full width space\n\t\t\telm.parentNode.appendChild(d);\n\t\t\tconst w = d.clientWidth;\n\t\t\tconst h = d.clientHeight;\n\t\t\td.parentNode.removeChild(d);\n\t\t\treturn [w, h];\n\t\t}\n\t\t\n\t\tfunction makeDummyCell(t, tagName) {\n\t\t\tconst d = document.createElement(tagName);\n\t\t\td.setAttribute('style', `position:fixed;display:inline-block;visibility:hidden;white-space:nowrap;`);\n\t\t\treturn t.appendChild(d);\n\t\t}\n\t\t\n\t\tfunction removeDummyCell(lt, cMat) {\n\t\t\tlt.removeChild(cMat.dcTd);\n\t\t\tlt.removeChild(cMat.dcTh);\n\t\t}\n\t\t\n\t\tfunction isTarget(tab, cMet) {\n\t\t\tif (tab.rows.length === 0) return false;\n\t\t\tif (cMet.maxRowSize < tab.rows.length) return false;\n\t\t\n\t\t\tconst { cellMinWidth, cellMinAspect } = cMet;\n\t\t\tfor (const tr of tab.rows) {\n\t\t\t\tif (!tr.hasChildNodes()) continue;\n\t\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\t\tconst tn = n.tagName;\n\t\t\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\t\t\tconst cw = n.clientWidth;\n\t\t\t\t\tconst ch = n.clientHeight;\n\t\t\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction addClass(tar, cls) {\n\t\t\tif (cls.startsWith(':')) tar.dataset[cls.substr(1)] = '';\n\t\t\telse tar.classList.add(cls.substr(1));\n\t\t}\n\t\t\n\t\tfunction removeClass(tar, cls) {\n\t\t\tif (cls.startsWith(':')) delete tar.dataset[cls.substr(1)];\n\t\t\telse tar.classList.remove(cls.substr(1));\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction initScroll(tabs, cMet) {\n\t\t\tconst rob = new ResizeObserver(oes => {\n\t\t\t\tfor (const oe of oes) onScroll(oe.target, cMet);\n\t\t\t});\n\t\t\tfor (const t of tabs) {\n\t\t\t\trob.observe(t);\n\t\t\t\tt.addEventListener('scroll', throttle(() => { onScroll(t, cMet); }));\n\t\t\t}\n\t\t\tfunction throttle(fn) {\n\t\t\t\tlet isRunning;\n\t\t\t\treturn () => {\n\t\t\t\t\tif (isRunning) return;\n\t\t\t\t\tisRunning = true;\n\t\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\t\tisRunning = false;\n\t\t\t\t\t\tfn();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction onScroll(tab, cMet) {\n\t\t\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\n\t\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\n\t\t\t\t(0.95 < r ? removeClass : addClass)(tab, cMet.styleScrollRight);\n\t\t\t\t(r < 0.05 ? removeClass : addClass)(tab, cMet.styleScrollLeft);\n\t\t\t} else {\n\t\t\t\tremoveClass(tab, cMet.styleScrollRight);\n\t\t\t\tremoveClass(tab, cMet.styleScrollLeft);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction apply(tab, cMet) {\n\t\t\ttab.removeAttribute('width');\n\t\t\ttab.style.width = null;\n\t\t\ttab.style.height = null;\n\t\t\n\t\t\tconst grid  = makeCellGrid(tab);\n\t\t\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\t\t\tconst newWs = calcNewWidths(grid, met);\n\t\t\tsetCellWidth(grid, newWs);\n\t\t\n\t\t\tconst cs = tab.getElementsByTagName('caption');\n\t\t\tif (cs.length) cs[0].innerHTML = `<span>${cs[0].innerHTML}</span>`;\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction makeCellGrid(t) {\n\t\t\tconst css = collectCells(t);\n\t\t\tlet maxWidth = 0;\n\t\t\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\t\t\tconst g = [];\n\t\t\tfor (const cs of css) g.push(new Array(maxWidth));\n\t\t\n\t\t\tfor (let y = 0; y < g.length; y += 1) {\n\t\t\t\tconst gr = g[y];\n\t\t\t\tconst tds = css[y];\n\t\t\t\tlet i = 0;\n\t\t\n\t\t\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\t\t\n\t\t\t\t\tconst td = tds[i]\n\t\t\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\t\t\tgr[x] = td;\n\t\t\n\t\t\t\t\tif (1 < col) {\n\t\t\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t\t\t}\n\t\t\t\t\tif (1 < row) {\n\t\t\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ti += 1;\n\t\t\t\t\tif (tds.length <= i) break;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn g;\n\t\t}\n\t\t\n\t\tfunction collectCells(t, css = []) {\n\t\t\tfor (const tr of t.rows) {\n\t\t\t\tconst cs = [];\n\t\t\t\tif (tr.hasChildNodes()) {\n\t\t\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\t\t\tconst tn = n.tagName;\n\t\t\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcss.push(cs);\n\t\t\t}\n\t\t\treturn css;\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction getMetrics(tab, grid) {\n\t\t\tconst origTabW = tab.clientWidth;\n\t\t\tconst origCellWs = [];\n\t\t\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\t\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\t\t\tconst g = grid[y][x];\n\t\t\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { origTabW, origCellWs };\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction calcNewWidths(grid, met) {\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (const gc of gr) {\n\t\t\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst gw = grid[0].length;\n\t\t\tconst newWs = new Array(gw).fill(0);\n\t\t\tconst fixWs = new Array(gw).fill(0);\n\t\t\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\t\t\tconst td = gr[x];\n\t\t\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\t\t\n\t\t\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t\t\t}\n\t\t\t}\n\t\t\twidenTabWidth(newWs, fixWs, met);\n\t\t\treturn newWs;\n\t\t}\n\t\t\n\t\tfunction calcMinWidth(td, met) {\n\t\t\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\t\t\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\t\t\n\t\t\ttd.innerHTML = td.innerHTML.trim();\n\t\t\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\t\t\tdc.innerHTML = td.innerHTML;\n\t\t\tconst aw = dc.clientWidth - padH;\n\t\t\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\t\t\tlet minW = 0;\n\t\t\tfor (let i = 2;; i += 1) {\n\t\t\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\t\t\tconst tempH = ls * (i * lineH) + padV;\n\t\t\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\t\t\tminW = tempW;\n\t\t\t}\n\t\t\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n\t\t}\n\t\t\n\t\tfunction calcMaxLineLength(td) {\n\t\t\tconst ih = td.innerHTML.trim();\n\t\t\tconst ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\t\t\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\t\t\treturn Math.max(...ts);\n\t\t}\n\t\t\n\t\tfunction widenTabWidth(newWs, fixWs, met) {\n\t\t\tconst { origTabW, origCellWs } = met;\n\t\t\tlet wNew = 0, wFix = 0;\n\t\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\t\tif (newWs[i]) {\n\t\t\t\t\twNew += newWs[i];\n\t\t\t\t} else {\n\t\t\t\t\twFix += fixWs[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (origTabW < wNew + wFix) return;\n\t\t\tlet rem = origTabW - wFix;\n\t\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\t\tif (!newWs[i]) continue;\n\t\t\t\tconst nw = newWs[i];\n\t\t\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\t\t\trem  -= (w - nw);\n\t\t\t\twNew -= (w - nw);\n\t\t\t\tnewWs[i] = 0 | w;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction setCellWidth(grid, ws) {\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\t\t\tgc.style.whiteSpace = null;\n\t\t\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\t\t\tgc.style.width      = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tNS.tableNeatWidth = initialize;\n\t})();\n\n\t(function () {\n\t\t/**\r\n\t\t *\r\n\t\t * Scroll (JS)\r\n\t\t *\r\n\t\t * @author Takuto Yanagida\r\n\t\t * @version 2021-01-15\r\n\t\t *\r\n\t\t */\r\n\t\t\r\n\t\t\r\n\t\tconst ST_SCROLL_BAR = 'fixed-table-scroll-bar';\r\n\t\tconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\t\t\r\n\t\tlet getOffset = () => { return 0; };\r\n\t\tlet scrollBarWidth;\r\n\t\t\r\n\t\t\r\n\t\t// -------------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction initialize(tabs) {\r\n\t\t\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\t\t\tconst conts = [];\r\n\t\t\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\t\t\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\t\t\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n\t\t}\r\n\t\t\r\n\t\tfunction throttle(fn) {\r\n\t\t\tlet isRunning;\r\n\t\t\treturn () => {\r\n\t\t\t\tif (isRunning) return;\r\n\t\t\t\tisRunning = true;\r\n\t\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\t\tisRunning = false;\r\n\t\t\t\t\tfn();\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tclass FixedHeaderTable {\r\n\t\t\r\n\t\t\tconstructor (tab) {\r\n\t\t\t\tthis._table        = tab;\r\n\t\t\t\tthis._headerHeight = 0;\r\n\t\t\t\tthis._windowWidth  = 0;\r\n\t\t\t\tthis._create();\r\n\t\t\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_create() {\r\n\t\t\t\tthis._sbar = this._createScrollBarClone();\r\n\t\t\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\t\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createScrollBarClone() {\r\n\t\t\t\tconst e = document.createElement('div');\r\n\t\t\t\te.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\t\t\tconst spacer = document.createElement('div');\r\n\t\t\t\te.appendChild(spacer);\r\n\t\t\t\tthis._table.parentNode.appendChild(e);\r\n\t\t\t\treturn e;\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\t_initialize() {\r\n\t\t\t\tthis._initTableScroll();\r\n\t\t\t\tthis.onWindowResize();\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_initTableScroll() {\r\n\t\t\t\tlet tableScrollChanged = false;\r\n\t\t\t\tlet sbarScrollChanged  = false;\r\n\t\t\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\t\t\tif (tableScrollChanged) {\r\n\t\t\t\t\t\ttableScrollChanged = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\t\t\ttableScrollChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\tonWindowResize() {\r\n\t\t\t\tconst t = this._table;\r\n\t\t\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\t\tif (this._windowWidth === ww) return;\r\n\t\t\t\tthis._windowWidth = ww;\r\n\t\t\t\tif (this._sbar) {\r\n\t\t\t\t\tconst b = this._sbar;\r\n\t\t\t\t\tb.style.maxWidth = `${t.clientWidth}px`;\r\n\t\t\t\t\tb.style.display = 'none';\r\n\t\t\t\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\t\t\t\tif (0 < h) b.style.height = (h + 2) + 'px';\r\n\t\t\t\t\tb.firstChild.style.width = `${t.scrollWidth}px`;\r\n\t\t\t\t\tthis.onWindowScroll();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\tonWindowScroll() {\r\n\t\t\t\tconst t = this._table;\r\n\t\t\t\tconst tr     = t.getBoundingClientRect();\r\n\t\t\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\t\t\tconst offset = getOffset();\r\n\t\t\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\t\t\tconst headH  = this._headerHeight;\r\n\t\t\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\t\t\r\n\t\t\t\tlet sbarVisible = false;\r\n\t\t\t\tif (inView) {  // do nothing\r\n\t\t\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t\t\t} else if (t.scrollWidth - t.clientWidth > 2) {\r\n\t\t\t\t\tsbarVisible = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._sbar) {\r\n\t\t\t\t\tconst b = this._sbar;\r\n\t\t\t\t\tb.style.display = sbarVisible ? 'block' : 'none';\r\n\t\t\t\t\tb.style.left = tr.left + 'px';\r\n\t\t\t\t\tb.scrollLeft = t.scrollLeft;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Utilities ---------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction _getScrollBarWidth() {\r\n\t\t\tconst d = document.createElement('div');\r\n\t\t\td.setAttribute('style', `position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;`);\r\n\t\t\tdocument.body.appendChild(d);\r\n\t\t\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\t\t\r\n\t\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\t\td.style.overflowY = 'scroll';\r\n\t\t\t\td.style.width = '';\r\n\t\t\t\tconst c = document.createElement('div');\r\n\t\t\t\tc.style.minHeight = '100px';\r\n\t\t\t\td.appendChild(c);\r\n\t\t\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\t\t\twidth = d.offsetWidth - cw;\r\n\t\t\t}\r\n\t\t\tdocument.body.removeChild(d);\r\n\t\t\treturn width;\r\n\t\t}\r\n\t\t\n\t\tNS.tableScroll = initialize;\n\t})();\n\n\t(function () {\n\t\t/**\r\n\t\t *\r\n\t\t * Fixed Header (JS)\r\n\t\t *\r\n\t\t * @author Takuto Yanagida\r\n\t\t * @version 2021-01-04\r\n\t\t *\r\n\t\t */\r\n\t\t\r\n\t\t\r\n\t\tconst SEL_TARGET = '.stile';\r\n\t\t\r\n\t\tconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\n\t\tconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\n\t\tconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\t\tconst ST_ENLARGER_BUTTON  = 'enlarger-button';\r\n\t\tconst ST_TABLE_SHADE      = 'table-shade';\r\n\t\tconst ST_STATE_ENLARGED   = 'table-enlarged';\r\n\t\tconst ST_OPT_NO_ENLARGER  = 'no-enlarger';\r\n\t\t\r\n\t\tconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\t\tconst ENLARGER_WINDOW_WIDTH_RATIO = 0.9;\r\n\t\t\r\n\t\tlet getOffset = () => { return 0; };\r\n\t\tlet scrollBarWidth;\r\n\t\t\r\n\t\t// NS.addInit(4, () => {\r\n\t\t// \tgetOffset = NS.makeOffsetFunction(false, true);  // Initialize here\r\n\t\t\r\n\t\t// \tconst tabs = document.querySelectorAll(SEL_TARGET + ' table:not([class])');\r\n\t\t// \tsetTimeout(() => { initialize(tabs); }, 0);  // Delay for IE11\r\n\t\t// });\r\n\t\t\r\n\t\t\r\n\t\t// -------------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction initialize(tabs) {\r\n\t\t\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\t\t\tconst conts = [];\r\n\t\t\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\t\t\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\t\t\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n\t\t}\r\n\t\t\r\n\t\tfunction throttle(fn) {\r\n\t\t\tlet isRunning;\r\n\t\t\tfunction run() {\r\n\t\t\t\tisRunning = false;\r\n\t\t\t\tfn();\r\n\t\t\t}\r\n\t\t\treturn () => {\r\n\t\t\t\tif (isRunning) return;\r\n\t\t\t\tisRunning = true;\r\n\t\t\t\trequestAnimationFrame(run);\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tclass FixedHeaderTable {\r\n\t\t\r\n\t\t\tconstructor (tab) {\r\n\t\t\t\tif (tab.style.height) tab.style.height = '';\r\n\t\t\t\tthis._table        = tab;\r\n\t\t\t\tthis._headerHeight = 0;\r\n\t\t\t\tthis._isEnlarged   = false;\r\n\t\t\t\tthis._windowWidth  = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\t\tthis._create();\r\n\t\t\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_create() {\r\n\t\t\t\tthis._head = this._createHeaderClone();\r\n\t\t\t\tthis._sbar = this._createScrollBarClone();\r\n\t\t\t\t// this._ebtn = NS.containStile(this._table, ST_OPT_NO_ENLARGER) ? null : this._createEnlargerButton();\r\n\t\t\t\tthis._ebtn = (this._table.dataset.stile && this._table.dataset.stile.indexOf(ST_OPT_NO_ENLARGER) !== -1) ? null : this._createEnlargerButton();\r\n\t\t\t\tthis._shade = this._createShade();\r\n\t\t\r\n\t\t\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\t\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createHeaderClone() {\r\n\t\t\t\tlet thead = this._table.tHead;\r\n\t\t\t\tif (!thead) {\r\n\t\t\t\t\tthead = this._createPseudoHeader();\r\n\t\t\t\t\tif (!thead) return null;\r\n\t\t\t\t\tthis._table.tHead = thead;\r\n\t\t\t\t}\r\n\t\t\t\tconst cont = document.createElement('div');\r\n\t\t\t\t// NS.addStile(cont, ST_HEADER_CONTAINER);\r\n\t\t\t\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\t\t\t\tthis._table.parentNode.appendChild(cont);\r\n\t\t\r\n\t\t\t\tconst ptab = document.createElement('div');\r\n\t\t\t\t// NS.addStile(ptab, ST_HEADER_TABLE);\r\n\t\t\t\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\t\t\t\tcont.appendChild(ptab);\r\n\t\t\r\n\t\t\t\tconst clone = thead.cloneNode(true);\r\n\t\t\t\tptab.appendChild(clone);\r\n\t\t\r\n\t\t\t\t// if (NS.containStile(this._table, ST_STATE_ENLARGED)) NS.addStile(cont, ST_STATE_ENLARGED);\r\n\t\t\t\tif (this._table.dataset.stile && this._table.dataset.stile.indexOf(ST_STATE_ENLARGED) !== -1) cont.dataset.stile += ' ' + ST_STATE_ENLARGED;\r\n\t\t\t\treturn cont;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createPseudoHeader() {\r\n\t\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\t\tconst trs = tbody.rows;\r\n\t\t\t\tif (trs.length === 0) return null;\r\n\t\t\r\n\t\t\t\tfunction containsOnlyTh(tr) {\r\n\t\t\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tconst trsH = [];\r\n\t\t\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\t\t\tconst tr = trs[i];\r\n\t\t\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\t\t\ttrsH.push(tr);\r\n\t\t\t\t}\r\n\t\t\t\tif (trsH.length === 0) return null;\r\n\t\t\r\n\t\t\t\tconst thead = this._table.createTHead();\r\n\t\t\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\t\t\tthead.appendChild(trsH[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn thead;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createScrollBarClone() {\r\n\t\t\t\tconst sbar = document.createElement('div');\r\n\t\t\t\t// NS.addStile(sbar, ST_SCROLL_BAR);\r\n\t\t\t\tsbar.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\t\t\tthis._table.parentNode.appendChild(sbar);\r\n\t\t\t\tconst spacer = document.createElement('div');\r\n\t\t\t\tsbar.appendChild(spacer);\r\n\t\t\t\treturn sbar;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createEnlargerButton() {\r\n\t\t\t\tconst ebtn = document.createElement('div');\r\n\t\t\t\tebtn.dataset['stile'] = ST_ENLARGER_BUTTON;\r\n\t\t\t\tthis._table.appendChild(ebtn);\r\n\t\t\t\treturn ebtn;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createShade() {\r\n\t\t\t\tconst shade = document.createElement('div');\r\n\t\t\t\tshade.dataset['stile'] = ST_TABLE_SHADE;\r\n\t\t\t\tthis._table.appendChild(shade);\r\n\t\t\t\treturn shade;\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\t_initialize() {\r\n\t\t\t\tconst bg = getComputedStyle(this._table).backgroundColor;\r\n\t\t\t\tif (bg && bg !== 'transparent') this._table.dataset['background'] = bg;\r\n\t\t\r\n\t\t\t\tthis._initTableScroll();\r\n\t\t\t\tif (this._ebtn) {\r\n\t\t\t\t\tthis._ebtn.addEventListener('click', () => {\r\n\t\t\t\t\t\tif (this._isEnlarged) this._turnOffEnlarged();\r\n\t\t\t\t\t\telse this._turnOnEnlarged();\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (!this._isEnlargable()) this._ebtn.style.display = 'none';\r\n\t\t\t\t}\r\n\t\t\t\tthis._resize();\r\n\t\t\t\tthis._adjustUnexpectedScrollBar()\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_initTableScroll() {\r\n\t\t\t\tlet tableScrollChanged = false;\r\n\t\t\t\tlet sbarScrollChanged  = false;\r\n\t\t\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\t\t\tif (tableScrollChanged) {\r\n\t\t\t\t\t\ttableScrollChanged = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._onTableScroll();\r\n\t\t\t\t}));\r\n\t\t\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\t\t\ttableScrollChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_isScrollable() {\r\n\t\t\t\tconst t = this._table;\r\n\t\t\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_isEnlargable() {\r\n\t\t\t\tconst t = this._table;\r\n\t\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\t\treturn (t.scrollWidth - t.offsetWidth > 1 && t.offsetWidth < ENLARGER_WINDOW_WIDTH_RATIO * ww);  // for avoiding needless scrolling\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_turnOnEnlarged() {\r\n\t\t\t\tconst tab = this._table;\r\n\t\t\t\tif (tab.scrollWidth - tab.offsetWidth <= 1) return;\r\n\t\t\r\n\t\t\t\ttab.scrollLeft  = 0;\r\n\t\t\t\ttab.style.width = 'calc(100vw - ' + scrollBarWidth + 'px)';\r\n\t\t\t\tNS.addStile(tab, ST_STATE_ENLARGED);\r\n\t\t\t\tif (this._head) NS.addStile(this._head, ST_STATE_ENLARGED);\r\n\t\t\t\tthis._isEnlarged = true;\r\n\t\t\r\n\t\t\t\t// Do this timing!\r\n\t\t\t\tlet left = tab.getBoundingClientRect().left + window.pageXOffset;\r\n\t\t\t\tconst tbody = tab.tBodies[0];\r\n\t\t\t\tconst width = tbody.clientWidth, pwidth = this._windowWidth - scrollBarWidth;\r\n\t\t\t\tif (width < pwidth) left -= (pwidth - width) / 2;\r\n\t\t\t\ttab.style.marginLeft = -left + 'px';\r\n\t\t\r\n\t\t\t\ttab.style.background = null;\r\n\t\t\t\tthis._resize();\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_turnOffEnlarged() {\r\n\t\t\t\tconst tab = this._table;\r\n\t\t\t\ttab.style.marginLeft = '';\r\n\t\t\t\ttab.style.width      = '';\r\n\t\t\t\ttab.scrollLeft       = 0;\r\n\t\t\t\t// NS.removeStile(tab, ST_STATE_ENLARGED);\r\n\t\t\t\ttab.dataset.stile = ` ${tab.dataset.stile} `.replace(` ${ST_STATE_ENLARGED} `, '').trim();\r\n\t\t\t\t// if (this._head) NS.removeStile(this._head, ST_STATE_ENLARGED);\r\n\t\t\t\tif (this._head) this._head.dataset.stile = ` ${this._head.dataset.stile} `.replace(` ${ST_STATE_ENLARGED} `, '').trim();\r\n\t\t\t\tthis._isEnlarged = false;\r\n\t\t\r\n\t\t\t\t// NS.removeStile(this._shade, 'visible');\r\n\t\t\t\tthis._shade.dataset.stile = ` ${this._shade.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\t\tthis._shade.style.background = null;\r\n\t\t\t\tthis._resize();\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\tonWindowResize() {\r\n\t\t\t\tthis._adjustUnexpectedScrollBar();\r\n\t\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\t\tif (this._windowWidth === ww) return;\r\n\t\t\t\tthis._windowWidth = ww;\r\n\t\t\r\n\t\t\t\tif (this._isEnlarged) {\r\n\t\t\t\t\tthis._turnOffEnlarged();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._resize();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_adjustUnexpectedScrollBar() {\r\n\t\t\t\tconst t = this._table;\r\n\t\t\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_resize() {\r\n\t\t\t\tif (this._head) this._updateHeaderSize(this._head);\r\n\t\t\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\t\t\tif (this._head || this._sbar) this.onWindowScroll();\r\n\t\t\t\tthis._onTableScroll();\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_updateHeaderSize(cont) {\r\n\t\t\t\tcont.style.maxWidth = this._table.getBoundingClientRect().width + 'px';\r\n\t\t\t\tcont.style.display = 'none';\r\n\t\t\t\tcont.style.top = getOffset() + 'px';\r\n\t\t\r\n\t\t\t\tconst thead = this._table.tHead;\r\n\t\t\t\tlet w = thead.getBoundingClientRect().width;\r\n\t\t\t\tconst ptab = cont.firstChild;\r\n\t\t\t\tptab.style.width = w + 'px';\r\n\t\t\r\n\t\t\t\tconst clone = ptab.firstChild;\r\n\t\t\r\n\t\t\t\tconst oTrs = thead.rows;\r\n\t\t\t\tconst cTrs = clone.rows;\r\n\t\t\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t\t\t}\r\n\t\t\t\tthis._headerHeight = thead.getBoundingClientRect().height;\r\n\t\t\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_updateScrollBarSize(sbar) {\r\n\t\t\t\tsbar.style.maxWidth = this._table.clientWidth + 'px';\r\n\t\t\t\tsbar.style.display = 'none';\r\n\t\t\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\t\t\tif (0 < h) sbar.style.height = (h + 2) + 'px';\r\n\t\t\r\n\t\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\t\tconst spacer = sbar.firstChild;\r\n\t\t\t\tspacer.style.width = Math.ceil(tbody.clientWidth) + 'px';\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\tonWindowScroll() {\r\n\t\t\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\t\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\t\t\tconst offset = getOffset();\r\n\t\t\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\t\t\tconst headH  = this._headerHeight;\r\n\t\t\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\t\t\r\n\t\t\t\tlet headVisible = false;\r\n\t\t\t\tif (inView) {  // do nothing\r\n\t\t\t\t} else if (offset < tabTop + capH) {  // do nothing\r\n\t\t\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t\t\t} else if (tabTop + capH < offset) {\r\n\t\t\t\t\theadVisible = true;\r\n\t\t\t\t}\r\n\t\t\t\tlet sbarVisible = false;\r\n\t\t\t\tif (inView) {  // do nothing\r\n\t\t\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t\t\t} else if (this._isScrollable()) {\r\n\t\t\t\t\tsbarVisible = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._head) this.updateHeaderVisibility(headVisible, tr.left);\r\n\t\t\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tupdateHeaderVisibility(visible, tabLeft) {\r\n\t\t\t\tconst head = this._head;\r\n\t\t\t\tif (visible) {\r\n\t\t\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\t\t\thead.style.display = 'block';\r\n\t\t\t\t\tif (this._ebtn && head) this.switchEnlargerToFloatingHeader();\r\n\t\t\t\t} else {\r\n\t\t\t\t\thead.style.display = 'none';\r\n\t\t\t\t\tif (this._ebtn && head) this.switchEnlargerToTable();\r\n\t\t\t\t}\r\n\t\t\t\thead.style.left = tabLeft + 'px';\r\n\t\t\t\thead.scrollLeft = this._table.scrollLeft;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tswitchEnlargerToTable() {\r\n\t\t\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\t\t\tthis._ebtn.style.top = this._capt ? (this._capt.offsetHeight + 'px') : 0;\r\n\t\t\t\tthis._table.appendChild(this._ebtn);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tswitchEnlargerToFloatingHeader() {\r\n\t\t\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\t\t\tthis._ebtn.style.top = 0;\r\n\t\t\t\tthis._head.appendChild(this._ebtn);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\t\t\tconst sbar = this._sbar;\r\n\t\t\t\tif (visible) {\r\n\t\t\t\t\tsbar.style.display = 'block';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsbar.style.display = 'none';\r\n\t\t\t\t}\r\n\t\t\t\tsbar.style.left = tabLeft + 'px';\r\n\t\t\t\tsbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\t_onTableScroll() {\r\n\t\t\t\tconst tab = this._table, head = this._head, capt = this._capt, ebtn = this._ebtn, shade = this._shade;\r\n\t\t\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\t\t\tif (head) head.scrollLeft = sL;\r\n\t\t\t\tif (capt) {\r\n\t\t\t\t\tif (this._isScrollable()) {\r\n\t\t\t\t\t\tif (this._stCapt) clearTimeout(this._stCapt);\r\n\t\t\t\t\t\tthis._stCapt = setTimeout(() => { capt.style.transform = `translateX(${sL}px)`; }, 200);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcapt.style.transform = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ebtn) {\r\n\t\t\t\t\t// NS.removeStile(ebtn, 'visible');\r\n\t\t\t\t\tebtn.dataset.stile = ` ${ebtn.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\t\t\tif (this._stEbtn) clearTimeout(this._stEbtn);\r\n\t\t\t\t\tthis._stEbtn = setTimeout(() => {\r\n\t\t\t\t\t\t// NS.addStile(ebtn, 'visible');\r\n\t\t\t\t\t\tebtn.dataset.stile = ((ebtn.dataset.stile ?? '') + ` visible`).trim();\r\n\t\t\t\t\t}, 100);\r\n\t\t\t\t\tthis._updateEnlager();\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif (this._isEnlarged) {\r\n\t\t\t\t\t// NS.removeStile(shade, 'visible');\r\n\t\t\t\t\tshade.dataset.stile = ` ${shade.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\t\t\tif (this._isScrollable() && this._isEnlarged) {\r\n\t\t\t\t\t\tif (this._stShade) clearTimeout(this._stShade);\r\n\t\t\t\t\t\tthis._stShade = setTimeout(() => {\r\n\t\t\t\t\t\t\tshade.style.transform = `translateX(${sL}px)`;\r\n\t\t\t\t\t\t\t// NS.addStile(shade, 'visible');\r\n\t\t\t\t\t\t\tshade.dataset.stile = ((shade.dataset.stile ?? '') + ` visible`).trim();\r\n\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._updateShade();\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_updateEnlager() {\r\n\t\t\t\tconst tab = this._table, capt = this._capt, ebtn = this._ebtn;\r\n\t\t\t\tconst sL = tab.scrollLeft;\r\n\t\t\r\n\t\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\t\tconst scrW = tbody.clientWidth, cltW = tab.clientWidth;\r\n\t\t\t\tif (this._isEnlargable() || this._isEnlarged) {\r\n\t\t\t\t\tlet etbRight = -Math.min(scrW - cltW, sL);  // for Mobile Safari\r\n\t\t\t\t\tif (!this._isEnlargable() && this._isEnlarged) {\r\n\t\t\t\t\t\tconst diff = ebtn.parentElement.clientWidth - scrW;\r\n\t\t\t\t\t\tif (0 < diff) etbRight = diff;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ebtn.parentNode === tab) ebtn.style.top = capt ? (capt.offsetHeight + 'px') : 0;\r\n\t\t\t\t\tebtn.style.right = etbRight + 'px';\r\n\t\t\t\t\tebtn.style.display = 'block';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tebtn.style.display = 'none';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_updateShade() {\r\n\t\t\t\tconst tab = this._table, shade = this._shade;\r\n\t\t\t\tif (this._isScrollable()) {\r\n\t\t\t\t\tconst s = this._calcShadeStyle();\r\n\t\t\t\t\tif (this._isEnlarged) {\r\n\t\t\t\t\t\tshade.style.background = s;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttab.style.background = s;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttab.style.background = '';  // This must be '' for IE11\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_calcShadeStyle() {\r\n\t\t\t\tconst tab = this._table;\r\n\t\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\t\t\tlet rl = 0.25, rr = 0.25;\r\n\t\t\t\tif (r < 0.1) rl *= r / 0.1;\r\n\t\t\t\tif (0.9 < r) rr *= (1 - r) / 0.1;\r\n\t\t\t\tconst ch = this._capt ? (this._capt.offsetHeight + 'px') : '0';\r\n\t\t\t\tconst sl = `linear-gradient(to left, rgba(0,0,0,0), rgba(0,0,0,${rl}) 1.25rem) 0 ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\t\t\tconst sr = `linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,${rr}) 1.25rem) right ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\t\r\n\t\t\t\tconst bg = this._table.dataset['background'];\r\n\t\t\t\tconst sb = (this._isEnlarged || !bg || bg === 'transparent') ? '' : `, linear-gradient(to bottom, ${bg}, ${bg}) 0px 0px / 100% 100% no-repeat`;\r\n\t\t\t\treturn sl + ',' + sr + sb;\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Utilities ---------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction _getScrollBarWidth() {\r\n\t\t\tconst dummy = document.createElement('div');\r\n\t\t\tdummy.style.bottom = '100%';\r\n\t\t\tdummy.style.height = '1px';\r\n\t\t\tdummy.style.position = 'absolute';\r\n\t\t\tdummy.style.width = 'calc(100vw - 100%)';\r\n\t\t\tdocument.body.appendChild(dummy);\r\n\t\t\tlet width = 0 | window.getComputedStyle(dummy, '').getPropertyValue('width');\r\n\t\t\r\n\t\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\t\tdummy.style.overflowY = 'scroll';\r\n\t\t\t\tdummy.style.width = '';\r\n\t\t\t\tconst c = document.createElement('div');\r\n\t\t\t\tc.style.minHeight = '100px';\r\n\t\t\t\tdummy.appendChild(c);\r\n\t\t\t\tconst cw = 0 | window.getComputedStyle(c, '').getPropertyValue('width');\r\n\t\t\t\twidth = dummy.offsetWidth - cw;\r\n\t\t\t}\r\n\t\t\tdocument.body.removeChild(dummy);\r\n\t\t\treturn width;\r\n\t\t}\r\n\t\t\n\t\tNS.tableFixedHeader = initialize;\n\t})();\n\n})(window.NACSS);\n","/**\n *\n * Neat Width\n *\n * @author Takuto Yanagida\n * @version 2021-01-17\n *\n */\n\n\nfunction initialize(tabs, opts = {}) {\n\tif (tabs.length === 0) return;\n\n\tconst lt = tabs[tabs.length - 1];\n\tconst cm = Object.assign({\n\t\tfullWidthRate   : 0.95,\n\t\tcellMinWidth    : 80,\n\t\tcellMinAspect   : 2 / 3,  // width / height\n\t\tcellMinLength   : 8,\n\t\tmaxRowSize      : 200,\n\t\tmaxBorderWidth  : 2,\n\t\tbefore          : null,  // function (table) { ...; return delay; }\n\t\tafter           : null,  // function (table) { ... }\n\t\tstyleNeat       : ':ncTableNeat',\n\t\tstyleFull       : ':ncTableFull',\n\t\tstyleScrollRight: ':ncScrollRight',\n\t\tstyleScrollLeft : ':ncScrollLeft',\n\t}, opts, getCommonMetrics(lt));\n\n\tcm.padH += cm.maxBorderWidth * 2;\n\tcm.padV += cm.maxBorderWidth * 2;\n\tcm.dcTd = makeDummyCell(lt, 'td');\n\tcm.dcTh = makeDummyCell(lt, 'th');\n\n\tconst tarTabs = [], noTarTabs = [];\n\tfor (const t of tabs) {\n\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\telse noTarTabs.push(t);\n\t}\n\tcm.gcCount = tarTabs.length;\n\n\tfor (const t of tarTabs) {\n\t\tconst delay = (cm.before) ? (cm.before(t) ?? 0) : false;\n\t\tst(() => {\n\t\t\tapply(t, cm);\n\t\t\taddClass(t, cm.styleNeat);\n\t\t\tif (cm.after) cm.after(t);\n\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t}, delay);\n\t}\n\tif (cm.fullWidthRate) {\n\t\tfor (const t of noTarTabs) {\n\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\tif (pw * cm.fullWidthRate < t.clientWidth) addClass(t, cm.styleFull);\n\t\t}\n\t}\n\tfunction st(fn, d) { (d === false) ? fn() : setTimeout(fn, d); }\n\tinitScroll(tarTabs, cm);\n}\n\nfunction getCommonMetrics(tab) {\n\tconst td = tab.getElementsByTagName('td')[0];\n\tconst s = getComputedStyle(td);\n\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\tconst [charW, lineH] = getTextSize(td);\n\treturn { padH, padV, charW, lineH };\n}\n\nfunction getTextSize(elm) {\n\tconst d = document.createElement(elm.nodeName);\n\td.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\td.innerHTML = '\\u3000';  // Full width space\n\telm.parentNode.appendChild(d);\n\tconst w = d.clientWidth;\n\tconst h = d.clientHeight;\n\td.parentNode.removeChild(d);\n\treturn [w, h];\n}\n\nfunction makeDummyCell(t, tagName) {\n\tconst d = document.createElement(tagName);\n\td.setAttribute('style', `position:fixed;display:inline-block;visibility:hidden;white-space:nowrap;`);\n\treturn t.appendChild(d);\n}\n\nfunction removeDummyCell(lt, cMat) {\n\tlt.removeChild(cMat.dcTd);\n\tlt.removeChild(cMat.dcTh);\n}\n\nfunction isTarget(tab, cMet) {\n\tif (tab.rows.length === 0) return false;\n\tif (cMet.maxRowSize < tab.rows.length) return false;\n\n\tconst { cellMinWidth, cellMinAspect } = cMet;\n\tfor (const tr of tab.rows) {\n\t\tif (!tr.hasChildNodes()) continue;\n\t\tfor (const n of tr.childNodes) {\n\t\t\tconst tn = n.tagName;\n\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\tconst cw = n.clientWidth;\n\t\t\tconst ch = n.clientHeight;\n\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction addClass(tar, cls) {\n\tif (cls.startsWith(':')) tar.dataset[cls.substr(1)] = '';\n\telse tar.classList.add(cls.substr(1));\n}\n\nfunction removeClass(tar, cls) {\n\tif (cls.startsWith(':')) delete tar.dataset[cls.substr(1)];\n\telse tar.classList.remove(cls.substr(1));\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction initScroll(tabs, cMet) {\n\tconst rob = new ResizeObserver(oes => {\n\t\tfor (const oe of oes) onScroll(oe.target, cMet);\n\t});\n\tfor (const t of tabs) {\n\t\trob.observe(t);\n\t\tt.addEventListener('scroll', throttle(() => { onScroll(t, cMet); }));\n\t}\n\tfunction throttle(fn) {\n\t\tlet isRunning;\n\t\treturn () => {\n\t\t\tif (isRunning) return;\n\t\t\tisRunning = true;\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tisRunning = false;\n\t\t\t\tfn();\n\t\t\t});\n\t\t};\n\t}\n}\n\nfunction onScroll(tab, cMet) {\n\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\n\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\n\t\t(0.95 < r ? removeClass : addClass)(tab, cMet.styleScrollRight);\n\t\t(r < 0.05 ? removeClass : addClass)(tab, cMet.styleScrollLeft);\n\t} else {\n\t\tremoveClass(tab, cMet.styleScrollRight);\n\t\tremoveClass(tab, cMet.styleScrollLeft);\n\t}\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction apply(tab, cMet) {\n\ttab.removeAttribute('width');\n\ttab.style.width = null;\n\ttab.style.height = null;\n\n\tconst grid  = makeCellGrid(tab);\n\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\tconst newWs = calcNewWidths(grid, met);\n\tsetCellWidth(grid, newWs);\n\n\tconst cs = tab.getElementsByTagName('caption');\n\tif (cs.length) cs[0].innerHTML = `<span>${cs[0].innerHTML}</span>`;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction makeCellGrid(t) {\n\tconst css = collectCells(t);\n\tlet maxWidth = 0;\n\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\tconst g = [];\n\tfor (const cs of css) g.push(new Array(maxWidth));\n\n\tfor (let y = 0; y < g.length; y += 1) {\n\t\tconst gr = g[y];\n\t\tconst tds = css[y];\n\t\tlet i = 0;\n\n\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\n\t\t\tconst td = tds[i]\n\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\tgr[x] = td;\n\n\t\t\tif (1 < col) {\n\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t}\n\t\t\tif (1 < row) {\n\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tif (tds.length <= i) break;\n\t\t}\n\t}\n\treturn g;\n}\n\nfunction collectCells(t, css = []) {\n\tfor (const tr of t.rows) {\n\t\tconst cs = [];\n\t\tif (tr.hasChildNodes()) {\n\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\tconst tn = n.tagName;\n\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t}\n\t\t}\n\t\tcss.push(cs);\n\t}\n\treturn css;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction getMetrics(tab, grid) {\n\tconst origTabW = tab.clientWidth;\n\tconst origCellWs = [];\n\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\tconst g = grid[y][x];\n\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn { origTabW, origCellWs };\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction calcNewWidths(grid, met) {\n\tfor (const gr of grid) {\n\t\tfor (const gc of gr) {\n\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t}\n\t}\n\tconst gw = grid[0].length;\n\tconst newWs = new Array(gw).fill(0);\n\tconst fixWs = new Array(gw).fill(0);\n\n\tfor (const gr of grid) {\n\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\tconst td = gr[x];\n\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\n\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t}\n\t}\n\twidenTabWidth(newWs, fixWs, met);\n\treturn newWs;\n}\n\nfunction calcMinWidth(td, met) {\n\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\n\ttd.innerHTML = td.innerHTML.trim();\n\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\tdc.innerHTML = td.innerHTML;\n\tconst aw = dc.clientWidth - padH;\n\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\tlet minW = 0;\n\tfor (let i = 2;; i += 1) {\n\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\tconst tempH = ls * (i * lineH) + padV;\n\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\tminW = tempW;\n\t}\n\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n}\n\nfunction calcMaxLineLength(td) {\n\tconst ih = td.innerHTML.trim();\n\tconst ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\treturn Math.max(...ts);\n}\n\nfunction widenTabWidth(newWs, fixWs, met) {\n\tconst { origTabW, origCellWs } = met;\n\tlet wNew = 0, wFix = 0;\n\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\tif (newWs[i]) {\n\t\t\twNew += newWs[i];\n\t\t} else {\n\t\t\twFix += fixWs[i];\n\t\t}\n\t}\n\tif (origTabW < wNew + wFix) return;\n\tlet rem = origTabW - wFix;\n\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\tif (!newWs[i]) continue;\n\t\tconst nw = newWs[i];\n\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\trem  -= (w - nw);\n\t\twNew -= (w - nw);\n\t\tnewWs[i] = 0 | w;\n\t}\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction setCellWidth(grid, ws) {\n\tfor (const gr of grid) {\n\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\tgc.style.whiteSpace = null;\n\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\tgc.style.width      = null;\n\t\t}\n\t}\n}\n","/**\r\n *\r\n * Scroll (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-15\r\n *\r\n */\r\n\r\n\r\nconst ST_SCROLL_BAR = 'fixed-table-scroll-bar';\r\nconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\r\nlet getOffset = () => { return 0; };\r\nlet scrollBarWidth;\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nfunction initialize(tabs) {\r\n\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\tconst conts = [];\r\n\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n}\r\n\r\nfunction throttle(fn) {\r\n\tlet isRunning;\r\n\treturn () => {\r\n\t\tif (isRunning) return;\r\n\t\tisRunning = true;\r\n\t\trequestAnimationFrame(() => {\r\n\t\t\tisRunning = false;\r\n\t\t\tfn();\r\n\t\t});\r\n\t};\r\n}\r\n\r\nclass FixedHeaderTable {\r\n\r\n\tconstructor (tab) {\r\n\t\tthis._table        = tab;\r\n\t\tthis._headerHeight = 0;\r\n\t\tthis._windowWidth  = 0;\r\n\t\tthis._create();\r\n\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t}\r\n\r\n\t_create() {\r\n\t\tthis._sbar = this._createScrollBarClone();\r\n\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t}\r\n\r\n\t_createScrollBarClone() {\r\n\t\tconst e = document.createElement('div');\r\n\t\te.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\tconst spacer = document.createElement('div');\r\n\t\te.appendChild(spacer);\r\n\t\tthis._table.parentNode.appendChild(e);\r\n\t\treturn e;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_initialize() {\r\n\t\tthis._initTableScroll();\r\n\t\tthis.onWindowResize();\r\n\t}\r\n\r\n\t_initTableScroll() {\r\n\t\tlet tableScrollChanged = false;\r\n\t\tlet sbarScrollChanged  = false;\r\n\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (tableScrollChanged) {\r\n\t\t\t\ttableScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t}\r\n\t\t}));\r\n\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\ttableScrollChanged = true;\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowResize() {\r\n\t\tconst t = this._table;\r\n\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tif (this._windowWidth === ww) return;\r\n\t\tthis._windowWidth = ww;\r\n\t\tif (this._sbar) {\r\n\t\t\tconst b = this._sbar;\r\n\t\t\tb.style.maxWidth = `${t.clientWidth}px`;\r\n\t\t\tb.style.display = 'none';\r\n\t\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\t\tif (0 < h) b.style.height = (h + 2) + 'px';\r\n\t\t\tb.firstChild.style.width = `${t.scrollWidth}px`;\r\n\t\t\tthis.onWindowScroll();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowScroll() {\r\n\t\tconst t = this._table;\r\n\t\tconst tr     = t.getBoundingClientRect();\r\n\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\tconst offset = getOffset();\r\n\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\tconst headH  = this._headerHeight;\r\n\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\r\n\t\tlet sbarVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t} else if (t.scrollWidth - t.clientWidth > 2) {\r\n\t\t\tsbarVisible = true;\r\n\t\t}\r\n\t\tif (this._sbar) {\r\n\t\t\tconst b = this._sbar;\r\n\t\t\tb.style.display = sbarVisible ? 'block' : 'none';\r\n\t\t\tb.style.left = tr.left + 'px';\r\n\t\t\tb.scrollLeft = t.scrollLeft;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction _getScrollBarWidth() {\r\n\tconst d = document.createElement('div');\r\n\td.setAttribute('style', `position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;`);\r\n\tdocument.body.appendChild(d);\r\n\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\td.style.overflowY = 'scroll';\r\n\t\td.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\td.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\twidth = d.offsetWidth - cw;\r\n\t}\r\n\tdocument.body.removeChild(d);\r\n\treturn width;\r\n}\r\n","/**\r\n *\r\n * Fixed Header (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-04\r\n *\r\n */\r\n\r\n\r\nconst SEL_TARGET = '.stile';\r\n\r\nconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\nconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\nconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\nconst ST_ENLARGER_BUTTON  = 'enlarger-button';\r\nconst ST_TABLE_SHADE      = 'table-shade';\r\nconst ST_STATE_ENLARGED   = 'table-enlarged';\r\nconst ST_OPT_NO_ENLARGER  = 'no-enlarger';\r\n\r\nconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\nconst ENLARGER_WINDOW_WIDTH_RATIO = 0.9;\r\n\r\nlet getOffset = () => { return 0; };\r\nlet scrollBarWidth;\r\n\r\n// NS.addInit(4, () => {\r\n// \tgetOffset = NS.makeOffsetFunction(false, true);  // Initialize here\r\n\r\n// \tconst tabs = document.querySelectorAll(SEL_TARGET + ' table:not([class])');\r\n// \tsetTimeout(() => { initialize(tabs); }, 0);  // Delay for IE11\r\n// });\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nfunction initialize(tabs) {\r\n\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\tconst conts = [];\r\n\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n}\r\n\r\nfunction throttle(fn) {\r\n\tlet isRunning;\r\n\tfunction run() {\r\n\t\tisRunning = false;\r\n\t\tfn();\r\n\t}\r\n\treturn () => {\r\n\t\tif (isRunning) return;\r\n\t\tisRunning = true;\r\n\t\trequestAnimationFrame(run);\r\n\t};\r\n}\r\n\r\nclass FixedHeaderTable {\r\n\r\n\tconstructor (tab) {\r\n\t\tif (tab.style.height) tab.style.height = '';\r\n\t\tthis._table        = tab;\r\n\t\tthis._headerHeight = 0;\r\n\t\tthis._isEnlarged   = false;\r\n\t\tthis._windowWidth  = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tthis._create();\r\n\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t}\r\n\r\n\t_create() {\r\n\t\tthis._head = this._createHeaderClone();\r\n\t\tthis._sbar = this._createScrollBarClone();\r\n\t\t// this._ebtn = NS.containStile(this._table, ST_OPT_NO_ENLARGER) ? null : this._createEnlargerButton();\r\n\t\tthis._ebtn = (this._table.dataset.stile && this._table.dataset.stile.indexOf(ST_OPT_NO_ENLARGER) !== -1) ? null : this._createEnlargerButton();\r\n\t\tthis._shade = this._createShade();\r\n\r\n\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t}\r\n\r\n\t_createHeaderClone() {\r\n\t\tlet thead = this._table.tHead;\r\n\t\tif (!thead) {\r\n\t\t\tthead = this._createPseudoHeader();\r\n\t\t\tif (!thead) return null;\r\n\t\t\tthis._table.tHead = thead;\r\n\t\t}\r\n\t\tconst cont = document.createElement('div');\r\n\t\t// NS.addStile(cont, ST_HEADER_CONTAINER);\r\n\t\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\t\tthis._table.parentNode.appendChild(cont);\r\n\r\n\t\tconst ptab = document.createElement('div');\r\n\t\t// NS.addStile(ptab, ST_HEADER_TABLE);\r\n\t\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\t\tcont.appendChild(ptab);\r\n\r\n\t\tconst clone = thead.cloneNode(true);\r\n\t\tptab.appendChild(clone);\r\n\r\n\t\t// if (NS.containStile(this._table, ST_STATE_ENLARGED)) NS.addStile(cont, ST_STATE_ENLARGED);\r\n\t\tif (this._table.dataset.stile && this._table.dataset.stile.indexOf(ST_STATE_ENLARGED) !== -1) cont.dataset.stile += ' ' + ST_STATE_ENLARGED;\r\n\t\treturn cont;\r\n\t}\r\n\r\n\t_createPseudoHeader() {\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst trs = tbody.rows;\r\n\t\tif (trs.length === 0) return null;\r\n\r\n\t\tfunction containsOnlyTh(tr) {\r\n\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst trsH = [];\r\n\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\tconst tr = trs[i];\r\n\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\ttrsH.push(tr);\r\n\t\t}\r\n\t\tif (trsH.length === 0) return null;\r\n\r\n\t\tconst thead = this._table.createTHead();\r\n\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\tthead.appendChild(trsH[i]);\r\n\t\t}\r\n\t\treturn thead;\r\n\t}\r\n\r\n\t_createScrollBarClone() {\r\n\t\tconst sbar = document.createElement('div');\r\n\t\t// NS.addStile(sbar, ST_SCROLL_BAR);\r\n\t\tsbar.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\tthis._table.parentNode.appendChild(sbar);\r\n\t\tconst spacer = document.createElement('div');\r\n\t\tsbar.appendChild(spacer);\r\n\t\treturn sbar;\r\n\t}\r\n\r\n\t_createEnlargerButton() {\r\n\t\tconst ebtn = document.createElement('div');\r\n\t\tebtn.dataset['stile'] = ST_ENLARGER_BUTTON;\r\n\t\tthis._table.appendChild(ebtn);\r\n\t\treturn ebtn;\r\n\t}\r\n\r\n\t_createShade() {\r\n\t\tconst shade = document.createElement('div');\r\n\t\tshade.dataset['stile'] = ST_TABLE_SHADE;\r\n\t\tthis._table.appendChild(shade);\r\n\t\treturn shade;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_initialize() {\r\n\t\tconst bg = getComputedStyle(this._table).backgroundColor;\r\n\t\tif (bg && bg !== 'transparent') this._table.dataset['background'] = bg;\r\n\r\n\t\tthis._initTableScroll();\r\n\t\tif (this._ebtn) {\r\n\t\t\tthis._ebtn.addEventListener('click', () => {\r\n\t\t\t\tif (this._isEnlarged) this._turnOffEnlarged();\r\n\t\t\t\telse this._turnOnEnlarged();\r\n\t\t\t});\r\n\t\t\tif (!this._isEnlargable()) this._ebtn.style.display = 'none';\r\n\t\t}\r\n\t\tthis._resize();\r\n\t\tthis._adjustUnexpectedScrollBar()\r\n\t}\r\n\r\n\t_initTableScroll() {\r\n\t\tlet tableScrollChanged = false;\r\n\t\tlet sbarScrollChanged  = false;\r\n\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (tableScrollChanged) {\r\n\t\t\t\ttableScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t}\r\n\t\t\tthis._onTableScroll();\r\n\t\t}));\r\n\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\ttableScrollChanged = true;\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\t_isScrollable() {\r\n\t\tconst t = this._table;\r\n\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t}\r\n\r\n\t_isEnlargable() {\r\n\t\tconst t = this._table;\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\treturn (t.scrollWidth - t.offsetWidth > 1 && t.offsetWidth < ENLARGER_WINDOW_WIDTH_RATIO * ww);  // for avoiding needless scrolling\r\n\t}\r\n\r\n\t_turnOnEnlarged() {\r\n\t\tconst tab = this._table;\r\n\t\tif (tab.scrollWidth - tab.offsetWidth <= 1) return;\r\n\r\n\t\ttab.scrollLeft  = 0;\r\n\t\ttab.style.width = 'calc(100vw - ' + scrollBarWidth + 'px)';\r\n\t\tNS.addStile(tab, ST_STATE_ENLARGED);\r\n\t\tif (this._head) NS.addStile(this._head, ST_STATE_ENLARGED);\r\n\t\tthis._isEnlarged = true;\r\n\r\n\t\t// Do this timing!\r\n\t\tlet left = tab.getBoundingClientRect().left + window.pageXOffset;\r\n\t\tconst tbody = tab.tBodies[0];\r\n\t\tconst width = tbody.clientWidth, pwidth = this._windowWidth - scrollBarWidth;\r\n\t\tif (width < pwidth) left -= (pwidth - width) / 2;\r\n\t\ttab.style.marginLeft = -left + 'px';\r\n\r\n\t\ttab.style.background = null;\r\n\t\tthis._resize();\r\n\t}\r\n\r\n\t_turnOffEnlarged() {\r\n\t\tconst tab = this._table;\r\n\t\ttab.style.marginLeft = '';\r\n\t\ttab.style.width      = '';\r\n\t\ttab.scrollLeft       = 0;\r\n\t\t// NS.removeStile(tab, ST_STATE_ENLARGED);\r\n\t\ttab.dataset.stile = ` ${tab.dataset.stile} `.replace(` ${ST_STATE_ENLARGED} `, '').trim();\r\n\t\t// if (this._head) NS.removeStile(this._head, ST_STATE_ENLARGED);\r\n\t\tif (this._head) this._head.dataset.stile = ` ${this._head.dataset.stile} `.replace(` ${ST_STATE_ENLARGED} `, '').trim();\r\n\t\tthis._isEnlarged = false;\r\n\r\n\t\t// NS.removeStile(this._shade, 'visible');\r\n\t\tthis._shade.dataset.stile = ` ${this._shade.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\tthis._shade.style.background = null;\r\n\t\tthis._resize();\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowResize() {\r\n\t\tthis._adjustUnexpectedScrollBar();\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tif (this._windowWidth === ww) return;\r\n\t\tthis._windowWidth = ww;\r\n\r\n\t\tif (this._isEnlarged) {\r\n\t\t\tthis._turnOffEnlarged();\r\n\t\t} else {\r\n\t\t\tthis._resize();\r\n\t\t}\r\n\t}\r\n\r\n\t_adjustUnexpectedScrollBar() {\r\n\t\tconst t = this._table;\r\n\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t}\r\n\r\n\t_resize() {\r\n\t\tif (this._head) this._updateHeaderSize(this._head);\r\n\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\tif (this._head || this._sbar) this.onWindowScroll();\r\n\t\tthis._onTableScroll();\r\n\t}\r\n\r\n\t_updateHeaderSize(cont) {\r\n\t\tcont.style.maxWidth = this._table.getBoundingClientRect().width + 'px';\r\n\t\tcont.style.display = 'none';\r\n\t\tcont.style.top = getOffset() + 'px';\r\n\r\n\t\tconst thead = this._table.tHead;\r\n\t\tlet w = thead.getBoundingClientRect().width;\r\n\t\tconst ptab = cont.firstChild;\r\n\t\tptab.style.width = w + 'px';\r\n\r\n\t\tconst clone = ptab.firstChild;\r\n\r\n\t\tconst oTrs = thead.rows;\r\n\t\tconst cTrs = clone.rows;\r\n\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t}\r\n\t\tthis._headerHeight = thead.getBoundingClientRect().height;\r\n\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_updateScrollBarSize(sbar) {\r\n\t\tsbar.style.maxWidth = this._table.clientWidth + 'px';\r\n\t\tsbar.style.display = 'none';\r\n\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\tif (0 < h) sbar.style.height = (h + 2) + 'px';\r\n\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst spacer = sbar.firstChild;\r\n\t\tspacer.style.width = Math.ceil(tbody.clientWidth) + 'px';\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowScroll() {\r\n\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\tconst offset = getOffset();\r\n\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\tconst headH  = this._headerHeight;\r\n\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\r\n\t\tlet headVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (offset < tabTop + capH) {  // do nothing\r\n\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t} else if (tabTop + capH < offset) {\r\n\t\t\theadVisible = true;\r\n\t\t}\r\n\t\tlet sbarVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t} else if (this._isScrollable()) {\r\n\t\t\tsbarVisible = true;\r\n\t\t}\r\n\t\tif (this._head) this.updateHeaderVisibility(headVisible, tr.left);\r\n\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t}\r\n\r\n\tupdateHeaderVisibility(visible, tabLeft) {\r\n\t\tconst head = this._head;\r\n\t\tif (visible) {\r\n\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\thead.style.display = 'block';\r\n\t\t\tif (this._ebtn && head) this.switchEnlargerToFloatingHeader();\r\n\t\t} else {\r\n\t\t\thead.style.display = 'none';\r\n\t\t\tif (this._ebtn && head) this.switchEnlargerToTable();\r\n\t\t}\r\n\t\thead.style.left = tabLeft + 'px';\r\n\t\thead.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\tswitchEnlargerToTable() {\r\n\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\tthis._ebtn.style.top = this._capt ? (this._capt.offsetHeight + 'px') : 0;\r\n\t\tthis._table.appendChild(this._ebtn);\r\n\t}\r\n\r\n\tswitchEnlargerToFloatingHeader() {\r\n\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\tthis._ebtn.style.top = 0;\r\n\t\tthis._head.appendChild(this._ebtn);\r\n\t}\r\n\r\n\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\tconst sbar = this._sbar;\r\n\t\tif (visible) {\r\n\t\t\tsbar.style.display = 'block';\r\n\t\t} else {\r\n\t\t\tsbar.style.display = 'none';\r\n\t\t}\r\n\t\tsbar.style.left = tabLeft + 'px';\r\n\t\tsbar.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_onTableScroll() {\r\n\t\tconst tab = this._table, head = this._head, capt = this._capt, ebtn = this._ebtn, shade = this._shade;\r\n\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\tif (head) head.scrollLeft = sL;\r\n\t\tif (capt) {\r\n\t\t\tif (this._isScrollable()) {\r\n\t\t\t\tif (this._stCapt) clearTimeout(this._stCapt);\r\n\t\t\t\tthis._stCapt = setTimeout(() => { capt.style.transform = `translateX(${sL}px)`; }, 200);\r\n\t\t\t} else {\r\n\t\t\t\tcapt.style.transform = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ebtn) {\r\n\t\t\t// NS.removeStile(ebtn, 'visible');\r\n\t\t\tebtn.dataset.stile = ` ${ebtn.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\tif (this._stEbtn) clearTimeout(this._stEbtn);\r\n\t\t\tthis._stEbtn = setTimeout(() => {\r\n\t\t\t\t// NS.addStile(ebtn, 'visible');\r\n\t\t\t\tebtn.dataset.stile = ((ebtn.dataset.stile ?? '') + ` visible`).trim();\r\n\t\t\t}, 100);\r\n\t\t\tthis._updateEnlager();\r\n\t\t}\r\n\r\n\t\tif (this._isEnlarged) {\r\n\t\t\t// NS.removeStile(shade, 'visible');\r\n\t\t\tshade.dataset.stile = ` ${shade.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\tif (this._isScrollable() && this._isEnlarged) {\r\n\t\t\t\tif (this._stShade) clearTimeout(this._stShade);\r\n\t\t\t\tthis._stShade = setTimeout(() => {\r\n\t\t\t\t\tshade.style.transform = `translateX(${sL}px)`;\r\n\t\t\t\t\t// NS.addStile(shade, 'visible');\r\n\t\t\t\t\tshade.dataset.stile = ((shade.dataset.stile ?? '') + ` visible`).trim();\r\n\t\t\t\t}, 100);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._updateShade();\r\n\t}\r\n\r\n\t_updateEnlager() {\r\n\t\tconst tab = this._table, capt = this._capt, ebtn = this._ebtn;\r\n\t\tconst sL = tab.scrollLeft;\r\n\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst scrW = tbody.clientWidth, cltW = tab.clientWidth;\r\n\t\tif (this._isEnlargable() || this._isEnlarged) {\r\n\t\t\tlet etbRight = -Math.min(scrW - cltW, sL);  // for Mobile Safari\r\n\t\t\tif (!this._isEnlargable() && this._isEnlarged) {\r\n\t\t\t\tconst diff = ebtn.parentElement.clientWidth - scrW;\r\n\t\t\t\tif (0 < diff) etbRight = diff;\r\n\t\t\t}\r\n\t\t\tif (ebtn.parentNode === tab) ebtn.style.top = capt ? (capt.offsetHeight + 'px') : 0;\r\n\t\t\tebtn.style.right = etbRight + 'px';\r\n\t\t\tebtn.style.display = 'block';\r\n\t\t} else {\r\n\t\t\tebtn.style.display = 'none';\r\n\t\t}\r\n\t}\r\n\r\n\t_updateShade() {\r\n\t\tconst tab = this._table, shade = this._shade;\r\n\t\tif (this._isScrollable()) {\r\n\t\t\tconst s = this._calcShadeStyle();\r\n\t\t\tif (this._isEnlarged) {\r\n\t\t\t\tshade.style.background = s;\r\n\t\t\t} else {\r\n\t\t\t\ttab.style.background = s;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttab.style.background = '';  // This must be '' for IE11\r\n\t\t}\r\n\t}\r\n\r\n\t_calcShadeStyle() {\r\n\t\tconst tab = this._table;\r\n\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\tlet rl = 0.25, rr = 0.25;\r\n\t\tif (r < 0.1) rl *= r / 0.1;\r\n\t\tif (0.9 < r) rr *= (1 - r) / 0.1;\r\n\t\tconst ch = this._capt ? (this._capt.offsetHeight + 'px') : '0';\r\n\t\tconst sl = `linear-gradient(to left, rgba(0,0,0,0), rgba(0,0,0,${rl}) 1.25rem) 0 ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\tconst sr = `linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,${rr}) 1.25rem) right ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\r\n\t\tconst bg = this._table.dataset['background'];\r\n\t\tconst sb = (this._isEnlarged || !bg || bg === 'transparent') ? '' : `, linear-gradient(to bottom, ${bg}, ${bg}) 0px 0px / 100% 100% no-repeat`;\r\n\t\treturn sl + ',' + sr + sb;\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction _getScrollBarWidth() {\r\n\tconst dummy = document.createElement('div');\r\n\tdummy.style.bottom = '100%';\r\n\tdummy.style.height = '1px';\r\n\tdummy.style.position = 'absolute';\r\n\tdummy.style.width = 'calc(100vw - 100%)';\r\n\tdocument.body.appendChild(dummy);\r\n\tlet width = 0 | window.getComputedStyle(dummy, '').getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\tdummy.style.overflowY = 'scroll';\r\n\t\tdummy.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\tdummy.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c, '').getPropertyValue('width');\r\n\t\twidth = dummy.offsetWidth - cw;\r\n\t}\r\n\tdocument.body.removeChild(dummy);\r\n\treturn width;\r\n}\r\n"]}