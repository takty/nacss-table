{"version":3,"sources":["table.js","_neat-width.js","_fixed-header.js"],"names":["window","NACSS","NS","makeDummyCell","t","tagName","d","document","createElement","style","display","position","visibility","whiteSpace","appendChild","removeDummyCell","lt","cMat","removeChild","dcTd","dcTh","isTarget","tab","cMet","rows","length","maxRowSize","cellMinWidth","cellMinAspect","tr","hasChildNodes","n","childNodes","tn","parseInt","getAttribute","cw","clientWidth","ch","clientHeight","apply","removeAttribute","width","maxWidth","overflow","grid","css","cs","push","collectCells","Math","max","g","Array","y","gr","tds","i","x","td","col","row","p","q","nr","makeCellGrid","ws","gc","w","HTMLTableCellElement","minWidth","setCellWidth","met","gw","newWs","fill","fixWs","minW","calcMinWidth","origTabW","origCellWs","wNew","wFix","rem","nw","min","widenTabWidth","calcNewWidths","Object","assign","getMetrics","padH","padV","charW","lineH","cellMinLength","ih","innerHTML","trim","ls","split","ts","map","e","replace","calcMaxLineLength","dc","aw","round","tempW","tempH","tableNeatWidth","tabs","opts","cm","tableWidthRateForFull","maxBorderWidth","onDoing","onDone","getElementsByTagName","s","getComputedStyle","parseFloat","paddingLeft","paddingRight","paddingTop","paddingBottom","elm","temp","nodeName","setAttribute","fontFamily","fontSize","parentNode","h","getTextSize","getCommonMetrics","tarTabs","noTarTabs","gcCount","st","parentElement","fn","setTimeout","ST_STATE_ENLARGED","scrollBarWidth","throttle","isRunning","run","requestAnimationFrame","FixedHeaderTable","constructor","height","this","_table","_headerHeight","_isEnlarged","_windowWidth","outerWidth","innerWidth","_create","_initialize","_head","_createHeaderClone","_sbar","_createScrollBarClone","_ebtn","dataset","stile","indexOf","_createEnlargerButton","_shade","_createShade","caps","_capt","thead","tHead","_createPseudoHeader","cont","ptab","clone","cloneNode","trs","tBodies","containsOnlyTh","ths","trsH","I","createTHead","sbar","spacer","ebtn","shade","bg","backgroundColor","_initTableScroll","addEventListener","_turnOffEnlarged","_turnOnEnlarged","_isEnlargable","_resize","_adjustUnexpectedScrollBar","tableScrollChanged","sbarScrollChanged","scrollLeft","_onTableScroll","_isScrollable","scrollWidth","ww","offsetWidth","addStile","left","getBoundingClientRect","pageXOffset","pwidth","marginLeft","background","onWindowResize","overflowX","_updateHeaderSize","_updateScrollBarSize","onWindowScroll","top","getOffset","firstChild","oTrs","cTrs","copyWidth","o","c","tag","os","_getScrollBarWidth","tbody","ceil","tabTop","tabBottom","bottom","capH","offsetHeight","headH","inView","innerHeight","headVisible","sbarVisible","updateHeaderVisibility","updateScrollBarVisibility","visible","tabLeft","head","switchEnlargerToFloatingHeader","switchEnlargerToTable","capt","sL","_stCapt","clearTimeout","transform","_stEbtn","_updateEnlager","_stShade","_updateShade","scrW","cltW","etbRight","diff","right","_calcShadeStyle","r","rl","rr","sl","sr","dummy","body","getPropertyValue","overflowY","minHeight","tableFixedHeader","conts","passive"],"mappings":"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","file":"table.min.js","sourcesContent":["/**\n *\n * Table Style (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-04\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t(function () {\n\t\t/**\n\t\t *\n\t\t * Neat Width\n\t\t *\n\t\t * @author Takuto Yanagida\n\t\t * @version 2021-01-10\n\t\t *\n\t\t */\n\t\t\n\t\t\n\t\tfunction initialize(tabs, opts = {}) {\n\t\t\tif (tabs.length === 0) return;\n\t\t\n\t\t\tconst lt = tabs[tabs.length - 1];\n\t\t\tconst cm = Object.assign({\n\t\t\t\ttableWidthRateForFull: 0.95,\n\t\t\t\tcellMinWidth         : 80,\n\t\t\t\tcellMinAspect        : 2 / 3,  // width / height\n\t\t\t\tcellMinLength        : 8,\n\t\t\t\tmaxRowSize           : 200,\n\t\t\t\tmaxBorderWidth       : 2,\n\t\t\t\tonDoing              : null,  // function (table) { ...; return delay; }\n\t\t\t\tonDone               : null,  // function (table) { ... }\n\t\t\t}, opts, getCommonMetrics(lt));\n\t\t\n\t\t\tcm.padH += cm.maxBorderWidth * 2;\n\t\t\tcm.padV += cm.maxBorderWidth * 2;\n\t\t\tcm.dcTd = makeDummyCell(lt, 'td');\n\t\t\tcm.dcTh = makeDummyCell(lt, 'th');\n\t\t\n\t\t\tconst tarTabs = [], noTarTabs = [];\n\t\t\tfor (const t of tabs) {\n\t\t\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\t\t\telse noTarTabs.push(t);\n\t\t\t}\n\t\t\tcm.gcCount = tarTabs.length;\n\t\t\n\t\t\tfor (const t of tarTabs) {\n\t\t\t\tconst delay = (cm.onDoing) ? (cm.onDoing(t) ?? 0) : false;\n\t\t\t\tst(() => {\n\t\t\t\t\tapply(t, cm);\n\t\t\t\t\tif (cm.onDone) cm.onDone(t);\n\t\t\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t\t\t}, delay);\n\t\t\t}\n\t\t\tif (cm.tableWidthRateForFull) {\n\t\t\t\tfor (const t of noTarTabs) {\n\t\t\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\t\t\tif (pw * cm.tableWidthRateForFull < t.clientWidth) t.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction st(fn, d) {\n\t\t\t\tif (d === false) fn();\n\t\t\t\telse setTimeout(fn, d);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction getCommonMetrics(tab) {\n\t\t\tconst td = tab.getElementsByTagName('td')[0];\n\t\t\tconst s = getComputedStyle(td);\n\t\t\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\t\t\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\t\t\tconst [charW, lineH] = getTextSize(td);\n\t\t\treturn { padH, padV, charW, lineH };\n\t\t}\n\t\t\n\t\tfunction getTextSize(elm) {\n\t\t\tconst temp = document.createElement(elm.nodeName);\n\t\t\ttemp.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\t\t\ttemp.innerHTML = '\\u3000';  // Full width space\n\t\t\telm.parentNode.appendChild(temp);\n\t\t\tconst w = temp.clientWidth;\n\t\t\tconst h = temp.clientHeight;\n\t\t\ttemp.parentNode.removeChild(temp);\n\t\t\treturn [w, h];\n\t\t}\n\t\t\n\t\tfunction makeDummyCell(t, tagName) {\n\t\t\tconst d = document.createElement(tagName);\n\t\t\td.style.display    = 'inline-block';\n\t\t\td.style.position   = 'fixed';\n\t\t\td.style.visibility = 'hidden';\n\t\t\td.style.whiteSpace = 'nowrap';\n\t\t\treturn t.appendChild(d);\n\t\t}\n\t\t\n\t\tfunction removeDummyCell(lt, cMat) {\n\t\t\tlt.removeChild(cMat.dcTd);\n\t\t\tlt.removeChild(cMat.dcTh);\n\t\t}\n\t\t\n\t\tfunction isTarget(tab, cMet) {\n\t\t\tif (tab.rows.length === 0) return false;\n\t\t\tif (cMet.maxRowSize < tab.rows.length) return false;\n\t\t\n\t\t\tconst { cellMinWidth, cellMinAspect } = cMet;\n\t\t\tfor (const tr of tab.rows) {\n\t\t\t\tif (!tr.hasChildNodes()) continue;\n\t\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\t\tconst tn = n.tagName;\n\t\t\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\t\t\tconst cw = n.clientWidth;\n\t\t\t\t\tconst ch = n.clientHeight;\n\t\t\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction apply(tab, cMet) {\n\t\t\ttab.removeAttribute('width');\n\t\t\ttab.style.display  = 'block';\n\t\t\ttab.style.width    = 'fit-content';\n\t\t\tif (tab.style.width !== 'fit-content') tab.style.width = '-moz-fit-content';\n\t\t\ttab.style.maxWidth = '100%';\n\t\t\ttab.style.overflow = 'auto';\n\t\t\n\t\t\tconst grid  = makeCellGrid(tab);\n\t\t\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\t\t\tconst newWs = calcNewWidths(grid, met);\n\t\t\tsetCellWidth(grid, newWs);\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction makeCellGrid(t) {\n\t\t\tconst css = collectCells(t);\n\t\t\tlet maxWidth = 0;\n\t\t\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\t\t\tconst g = [];\n\t\t\tfor (const cs of css) g.push(new Array(maxWidth));\n\t\t\n\t\t\tfor (let y = 0; y < g.length; y += 1) {\n\t\t\t\tconst gr = g[y];\n\t\t\t\tconst tds = css[y];\n\t\t\t\tlet i = 0;\n\t\t\n\t\t\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\t\t\n\t\t\t\t\tconst td = tds[i]\n\t\t\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\t\t\tgr[x] = td;\n\t\t\n\t\t\t\t\tif (1 < col) {\n\t\t\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t\t\t}\n\t\t\t\t\tif (1 < row) {\n\t\t\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ti += 1;\n\t\t\t\t\tif (tds.length <= i) break;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn g;\n\t\t}\n\t\t\n\t\tfunction collectCells(t, css = []) {\n\t\t\tfor (const tr of t.rows) {\n\t\t\t\tconst cs = [];\n\t\t\t\tif (tr.hasChildNodes()) {\n\t\t\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\t\t\tconst tn = n.tagName;\n\t\t\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcss.push(cs);\n\t\t\t}\n\t\t\treturn css;\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction getMetrics(tab, grid) {\n\t\t\tconst origTabW = tab.clientWidth;\n\t\t\tconst origCellWs = [];\n\t\t\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\t\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\t\t\tconst g = grid[y][x];\n\t\t\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { origTabW, origCellWs };\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction calcNewWidths(grid, met) {\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (const gc of gr) {\n\t\t\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst gw = grid[0].length;\n\t\t\tconst newWs = new Array(gw).fill(0);\n\t\t\tconst fixWs = new Array(gw).fill(0);\n\t\t\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\t\t\tconst td = gr[x];\n\t\t\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\t\t\n\t\t\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t\t\t}\n\t\t\t}\n\t\t\twidenTabWidth(newWs, fixWs, met);\n\t\t\treturn newWs;\n\t\t}\n\t\t\n\t\tfunction calcMinWidth(td, met) {\n\t\t\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\t\t\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\t\t\n\t\t\ttd.innerHTML = td.innerHTML.trim();\n\t\t\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\t\t\tdc.innerHTML = td.innerHTML;\n\t\t\tconst aw = dc.clientWidth - padH;\n\t\t\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\t\t\tlet minW = 0;\n\t\t\tfor (let i = 2;; i += 1) {\n\t\t\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\t\t\tconst tempH = ls * (i * lineH) + padV;\n\t\t\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\t\t\tminW = tempW;\n\t\t\t}\n\t\t\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n\t\t}\n\t\t\n\t\tfunction calcMaxLineLength(td) {\n\t\t\tconst ih = td.innerHTML.trim();\n\t\t\tlet ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\t\t\tif (ls.length === 0) ls = [ih];\n\t\t\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\t\t\treturn Math.max(...ts);\n\t\t}\n\t\t\n\t\tfunction widenTabWidth(newWs, fixWs, met) {\n\t\t\tconst { origTabW, origCellWs } = met;\n\t\t\tlet wNew = 0, wFix = 0;\n\t\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\t\tif (newWs[i]) {\n\t\t\t\t\twNew += newWs[i];\n\t\t\t\t} else {\n\t\t\t\t\twFix += fixWs[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (origTabW < wNew + wFix) return;\n\t\t\tlet rem = origTabW - wFix;\n\t\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\t\tif (!newWs[i]) continue;\n\t\t\t\tconst nw = newWs[i];\n\t\t\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\t\t\trem  -= (w - nw);\n\t\t\t\twNew -= (w - nw);\n\t\t\t\tnewWs[i] = 0 | w;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// -------------------------------------------------------------------------\n\t\t\n\t\t\n\t\tfunction setCellWidth(grid, ws) {\n\t\t\tfor (const gr of grid) {\n\t\t\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\t\t\tgc.style.whiteSpace = null;\n\t\t\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\t\t\tgc.style.width      = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tNS.tableNeatWidth = initialize;\n\t})();\n\n\t(function () {\n\t\t/**\r\n\t\t *\r\n\t\t * Fixed Header (JS)\r\n\t\t *\r\n\t\t * @author Takuto Yanagida\r\n\t\t * @version 2021-01-04\r\n\t\t *\r\n\t\t */\r\n\t\t\r\n\t\t\r\n\t\tconst SEL_TARGET = '.stile';\r\n\t\t\r\n\t\tconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\n\t\tconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\n\t\tconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\t\tconst ST_ENLARGER_BUTTON  = 'enlarger-button';\r\n\t\tconst ST_TABLE_SHADE      = 'table-shade';\r\n\t\tconst ST_STATE_ENLARGED   = 'table-enlarged';\r\n\t\tconst ST_OPT_NO_ENLARGER  = 'no-enlarger';\r\n\t\t\r\n\t\tconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\t\tconst ENLARGER_WINDOW_WIDTH_RATIO = 0.9;\r\n\t\t\r\n\t\tlet getOffset = () => { return 0; };\r\n\t\tlet scrollBarWidth;\r\n\t\t\r\n\t\t// NS.addInit(4, () => {\r\n\t\t// \tgetOffset = NS.makeOffsetFunction(false, true);  // Initialize here\r\n\t\t\r\n\t\t// \tconst tabs = document.querySelectorAll(SEL_TARGET + ' table:not([class])');\r\n\t\t// \tsetTimeout(() => { initialize(tabs); }, 0);  // Delay for IE11\r\n\t\t// });\r\n\t\t\r\n\t\t\r\n\t\t// -------------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction initialize(tabs) {\r\n\t\t\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\t\t\tconst conts = [];\r\n\t\t\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\t\t\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\t\t\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n\t\t}\r\n\t\t\r\n\t\tfunction throttle(fn) {\r\n\t\t\tlet isRunning;\r\n\t\t\tfunction run() {\r\n\t\t\t\tisRunning = false;\r\n\t\t\t\tfn();\r\n\t\t\t}\r\n\t\t\treturn () => {\r\n\t\t\t\tif (isRunning) return;\r\n\t\t\t\tisRunning = true;\r\n\t\t\t\trequestAnimationFrame(run);\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tclass FixedHeaderTable {\r\n\t\t\r\n\t\t\tconstructor (tab) {\r\n\t\t\t\tif (tab.style.height) tab.style.height = '';\r\n\t\t\t\tthis._table        = tab;\r\n\t\t\t\tthis._headerHeight = 0;\r\n\t\t\t\tthis._isEnlarged   = false;\r\n\t\t\t\tthis._windowWidth  = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\t\tthis._create();\r\n\t\t\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_create() {\r\n\t\t\t\tthis._head = this._createHeaderClone();\r\n\t\t\t\tthis._sbar = this._createScrollBarClone();\r\n\t\t\t\t// this._ebtn = NS.containStile(this._table, ST_OPT_NO_ENLARGER) ? null : this._createEnlargerButton();\r\n\t\t\t\tthis._ebtn = (this._table.dataset.stile && this._table.dataset.stile.indexOf(ST_OPT_NO_ENLARGER) !== -1) ? null : this._createEnlargerButton();\r\n\t\t\t\tthis._shade = this._createShade();\r\n\t\t\r\n\t\t\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\t\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createHeaderClone() {\r\n\t\t\t\tlet thead = this._table.tHead;\r\n\t\t\t\tif (!thead) {\r\n\t\t\t\t\tthead = this._createPseudoHeader();\r\n\t\t\t\t\tif (!thead) return null;\r\n\t\t\t\t\tthis._table.tHead = thead;\r\n\t\t\t\t}\r\n\t\t\t\tconst cont = document.createElement('div');\r\n\t\t\t\t// NS.addStile(cont, ST_HEADER_CONTAINER);\r\n\t\t\t\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\t\t\t\tthis._table.parentNode.appendChild(cont);\r\n\t\t\r\n\t\t\t\tconst ptab = document.createElement('div');\r\n\t\t\t\t// NS.addStile(ptab, ST_HEADER_TABLE);\r\n\t\t\t\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\t\t\t\tcont.appendChild(ptab);\r\n\t\t\r\n\t\t\t\tconst clone = thead.cloneNode(true);\r\n\t\t\t\tptab.appendChild(clone);\r\n\t\t\r\n\t\t\t\t// if (NS.containStile(this._table, ST_STATE_ENLARGED)) NS.addStile(cont, ST_STATE_ENLARGED);\r\n\t\t\t\tif (this._table.dataset.stile && this._table.dataset.stile.indexOf(ST_STATE_ENLARGED) !== -1) cont.dataset.stile += ' ' + ST_STATE_ENLARGED;\r\n\t\t\t\treturn cont;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createPseudoHeader() {\r\n\t\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\t\tconst trs = tbody.rows;\r\n\t\t\t\tif (trs.length === 0) return null;\r\n\t\t\r\n\t\t\t\tfunction containsOnlyTh(tr) {\r\n\t\t\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tconst trsH = [];\r\n\t\t\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\t\t\tconst tr = trs[i];\r\n\t\t\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\t\t\ttrsH.push(tr);\r\n\t\t\t\t}\r\n\t\t\t\tif (trsH.length === 0) return null;\r\n\t\t\r\n\t\t\t\tconst thead = this._table.createTHead();\r\n\t\t\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\t\t\tthead.appendChild(trsH[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn thead;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createScrollBarClone() {\r\n\t\t\t\tconst sbar = document.createElement('div');\r\n\t\t\t\t// NS.addStile(sbar, ST_SCROLL_BAR);\r\n\t\t\t\tsbar.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\t\t\tthis._table.parentNode.appendChild(sbar);\r\n\t\t\t\tconst spacer = document.createElement('div');\r\n\t\t\t\tsbar.appendChild(spacer);\r\n\t\t\t\treturn sbar;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createEnlargerButton() {\r\n\t\t\t\tconst ebtn = document.createElement('div');\r\n\t\t\t\tebtn.dataset['stile'] = ST_ENLARGER_BUTTON;\r\n\t\t\t\tthis._table.appendChild(ebtn);\r\n\t\t\t\treturn ebtn;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_createShade() {\r\n\t\t\t\tconst shade = document.createElement('div');\r\n\t\t\t\tshade.dataset['stile'] = ST_TABLE_SHADE;\r\n\t\t\t\tthis._table.appendChild(shade);\r\n\t\t\t\treturn shade;\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\t_initialize() {\r\n\t\t\t\tconst bg = getComputedStyle(this._table).backgroundColor;\r\n\t\t\t\tif (bg && bg !== 'transparent') this._table.dataset['background'] = bg;\r\n\t\t\r\n\t\t\t\tthis._initTableScroll();\r\n\t\t\t\tif (this._ebtn) {\r\n\t\t\t\t\tthis._ebtn.addEventListener('click', () => {\r\n\t\t\t\t\t\tif (this._isEnlarged) this._turnOffEnlarged();\r\n\t\t\t\t\t\telse this._turnOnEnlarged();\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (!this._isEnlargable()) this._ebtn.style.display = 'none';\r\n\t\t\t\t}\r\n\t\t\t\tthis._resize();\r\n\t\t\t\tthis._adjustUnexpectedScrollBar()\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_initTableScroll() {\r\n\t\t\t\tlet tableScrollChanged = false;\r\n\t\t\t\tlet sbarScrollChanged  = false;\r\n\t\t\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\t\t\tif (tableScrollChanged) {\r\n\t\t\t\t\t\ttableScrollChanged = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._onTableScroll();\r\n\t\t\t\t}));\r\n\t\t\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\t\t\ttableScrollChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_isScrollable() {\r\n\t\t\t\tconst t = this._table;\r\n\t\t\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_isEnlargable() {\r\n\t\t\t\tconst t = this._table;\r\n\t\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\t\treturn (t.scrollWidth - t.offsetWidth > 1 && t.offsetWidth < ENLARGER_WINDOW_WIDTH_RATIO * ww);  // for avoiding needless scrolling\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_turnOnEnlarged() {\r\n\t\t\t\tconst tab = this._table;\r\n\t\t\t\tif (tab.scrollWidth - tab.offsetWidth <= 1) return;\r\n\t\t\r\n\t\t\t\ttab.scrollLeft  = 0;\r\n\t\t\t\ttab.style.width = 'calc(100vw - ' + scrollBarWidth + 'px)';\r\n\t\t\t\tNS.addStile(tab, ST_STATE_ENLARGED);\r\n\t\t\t\tif (this._head) NS.addStile(this._head, ST_STATE_ENLARGED);\r\n\t\t\t\tthis._isEnlarged = true;\r\n\t\t\r\n\t\t\t\t// Do this timing!\r\n\t\t\t\tlet left = tab.getBoundingClientRect().left + window.pageXOffset;\r\n\t\t\t\tconst tbody = tab.tBodies[0];\r\n\t\t\t\tconst width = tbody.clientWidth, pwidth = this._windowWidth - scrollBarWidth;\r\n\t\t\t\tif (width < pwidth) left -= (pwidth - width) / 2;\r\n\t\t\t\ttab.style.marginLeft = -left + 'px';\r\n\t\t\r\n\t\t\t\ttab.style.background = null;\r\n\t\t\t\tthis._resize();\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_turnOffEnlarged() {\r\n\t\t\t\tconst tab = this._table;\r\n\t\t\t\ttab.style.marginLeft = '';\r\n\t\t\t\ttab.style.width      = '';\r\n\t\t\t\ttab.scrollLeft       = 0;\r\n\t\t\t\t// NS.removeStile(tab, ST_STATE_ENLARGED);\r\n\t\t\t\ttab.dataset.stile = ` ${tab.dataset.stile} `.replace(` ${ST_STATE_ENLARGED} `, '').trim();\r\n\t\t\t\t// if (this._head) NS.removeStile(this._head, ST_STATE_ENLARGED);\r\n\t\t\t\tif (this._head) this._head.dataset.stile = ` ${this._head.dataset.stile} `.replace(` ${ST_STATE_ENLARGED} `, '').trim();\r\n\t\t\t\tthis._isEnlarged = false;\r\n\t\t\r\n\t\t\t\t// NS.removeStile(this._shade, 'visible');\r\n\t\t\t\tthis._shade.dataset.stile = ` ${this._shade.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\t\tthis._shade.style.background = null;\r\n\t\t\t\tthis._resize();\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\tonWindowResize() {\r\n\t\t\t\tthis._adjustUnexpectedScrollBar();\r\n\t\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\t\tif (this._windowWidth === ww) return;\r\n\t\t\t\tthis._windowWidth = ww;\r\n\t\t\r\n\t\t\t\tif (this._isEnlarged) {\r\n\t\t\t\t\tthis._turnOffEnlarged();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._resize();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_adjustUnexpectedScrollBar() {\r\n\t\t\t\tconst t = this._table;\r\n\t\t\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_resize() {\r\n\t\t\t\tif (this._head) this._updateHeaderSize(this._head);\r\n\t\t\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\t\t\tif (this._head || this._sbar) this.onWindowScroll();\r\n\t\t\t\tthis._onTableScroll();\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_updateHeaderSize(cont) {\r\n\t\t\t\tcont.style.maxWidth = this._table.getBoundingClientRect().width + 'px';\r\n\t\t\t\tcont.style.display = 'none';\r\n\t\t\t\tcont.style.top = getOffset() + 'px';\r\n\t\t\r\n\t\t\t\tconst thead = this._table.tHead;\r\n\t\t\t\tlet w = thead.getBoundingClientRect().width;\r\n\t\t\t\tconst ptab = cont.firstChild;\r\n\t\t\t\tptab.style.width = w + 'px';\r\n\t\t\r\n\t\t\t\tconst clone = ptab.firstChild;\r\n\t\t\r\n\t\t\t\tconst oTrs = thead.rows;\r\n\t\t\t\tconst cTrs = clone.rows;\r\n\t\t\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t\t\t}\r\n\t\t\t\tthis._headerHeight = thead.getBoundingClientRect().height;\r\n\t\t\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_updateScrollBarSize(sbar) {\r\n\t\t\t\tsbar.style.maxWidth = this._table.clientWidth + 'px';\r\n\t\t\t\tsbar.style.display = 'none';\r\n\t\t\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\t\t\tif (0 < h) sbar.style.height = (h + 2) + 'px';\r\n\t\t\r\n\t\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\t\tconst spacer = sbar.firstChild;\r\n\t\t\t\tspacer.style.width = Math.ceil(tbody.clientWidth) + 'px';\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\tonWindowScroll() {\r\n\t\t\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\t\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\t\t\tconst offset = getOffset();\r\n\t\t\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\t\t\tconst headH  = this._headerHeight;\r\n\t\t\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\t\t\r\n\t\t\t\tlet headVisible = false;\r\n\t\t\t\tif (inView) {  // do nothing\r\n\t\t\t\t} else if (offset < tabTop + capH) {  // do nothing\r\n\t\t\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t\t\t} else if (tabTop + capH < offset) {\r\n\t\t\t\t\theadVisible = true;\r\n\t\t\t\t}\r\n\t\t\t\tlet sbarVisible = false;\r\n\t\t\t\tif (inView) {  // do nothing\r\n\t\t\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t\t\t} else if (this._isScrollable()) {\r\n\t\t\t\t\tsbarVisible = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._head) this.updateHeaderVisibility(headVisible, tr.left);\r\n\t\t\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tupdateHeaderVisibility(visible, tabLeft) {\r\n\t\t\t\tconst head = this._head;\r\n\t\t\t\tif (visible) {\r\n\t\t\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\t\t\thead.style.display = 'block';\r\n\t\t\t\t\tif (this._ebtn && head) this.switchEnlargerToFloatingHeader();\r\n\t\t\t\t} else {\r\n\t\t\t\t\thead.style.display = 'none';\r\n\t\t\t\t\tif (this._ebtn && head) this.switchEnlargerToTable();\r\n\t\t\t\t}\r\n\t\t\t\thead.style.left = tabLeft + 'px';\r\n\t\t\t\thead.scrollLeft = this._table.scrollLeft;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tswitchEnlargerToTable() {\r\n\t\t\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\t\t\tthis._ebtn.style.top = this._capt ? (this._capt.offsetHeight + 'px') : 0;\r\n\t\t\t\tthis._table.appendChild(this._ebtn);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tswitchEnlargerToFloatingHeader() {\r\n\t\t\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\t\t\tthis._ebtn.style.top = 0;\r\n\t\t\t\tthis._head.appendChild(this._ebtn);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\t\t\tconst sbar = this._sbar;\r\n\t\t\t\tif (visible) {\r\n\t\t\t\t\tsbar.style.display = 'block';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsbar.style.display = 'none';\r\n\t\t\t\t}\r\n\t\t\t\tsbar.style.left = tabLeft + 'px';\r\n\t\t\t\tsbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// ---------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t\t_onTableScroll() {\r\n\t\t\t\tconst tab = this._table, head = this._head, capt = this._capt, ebtn = this._ebtn, shade = this._shade;\r\n\t\t\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\t\t\tif (head) head.scrollLeft = sL;\r\n\t\t\t\tif (capt) {\r\n\t\t\t\t\tif (this._isScrollable()) {\r\n\t\t\t\t\t\tif (this._stCapt) clearTimeout(this._stCapt);\r\n\t\t\t\t\t\tthis._stCapt = setTimeout(() => { capt.style.transform = `translateX(${sL}px)`; }, 200);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcapt.style.transform = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ebtn) {\r\n\t\t\t\t\t// NS.removeStile(ebtn, 'visible');\r\n\t\t\t\t\tebtn.dataset.stile = ` ${ebtn.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\t\t\tif (this._stEbtn) clearTimeout(this._stEbtn);\r\n\t\t\t\t\tthis._stEbtn = setTimeout(() => {\r\n\t\t\t\t\t\t// NS.addStile(ebtn, 'visible');\r\n\t\t\t\t\t\tebtn.dataset.stile = ((ebtn.dataset.stile ?? '') + ` visible`).trim();\r\n\t\t\t\t\t}, 100);\r\n\t\t\t\t\tthis._updateEnlager();\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tif (this._isEnlarged) {\r\n\t\t\t\t\t// NS.removeStile(shade, 'visible');\r\n\t\t\t\t\tshade.dataset.stile = ` ${shade.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\t\t\tif (this._isScrollable() && this._isEnlarged) {\r\n\t\t\t\t\t\tif (this._stShade) clearTimeout(this._stShade);\r\n\t\t\t\t\t\tthis._stShade = setTimeout(() => {\r\n\t\t\t\t\t\t\tshade.style.transform = `translateX(${sL}px)`;\r\n\t\t\t\t\t\t\t// NS.addStile(shade, 'visible');\r\n\t\t\t\t\t\t\tshade.dataset.stile = ((shade.dataset.stile ?? '') + ` visible`).trim();\r\n\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._updateShade();\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_updateEnlager() {\r\n\t\t\t\tconst tab = this._table, capt = this._capt, ebtn = this._ebtn;\r\n\t\t\t\tconst sL = tab.scrollLeft;\r\n\t\t\r\n\t\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\t\tconst scrW = tbody.clientWidth, cltW = tab.clientWidth;\r\n\t\t\t\tif (this._isEnlargable() || this._isEnlarged) {\r\n\t\t\t\t\tlet etbRight = -Math.min(scrW - cltW, sL);  // for Mobile Safari\r\n\t\t\t\t\tif (!this._isEnlargable() && this._isEnlarged) {\r\n\t\t\t\t\t\tconst diff = ebtn.parentElement.clientWidth - scrW;\r\n\t\t\t\t\t\tif (0 < diff) etbRight = diff;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ebtn.parentNode === tab) ebtn.style.top = capt ? (capt.offsetHeight + 'px') : 0;\r\n\t\t\t\t\tebtn.style.right = etbRight + 'px';\r\n\t\t\t\t\tebtn.style.display = 'block';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tebtn.style.display = 'none';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_updateShade() {\r\n\t\t\t\tconst tab = this._table, shade = this._shade;\r\n\t\t\t\tif (this._isScrollable()) {\r\n\t\t\t\t\tconst s = this._calcShadeStyle();\r\n\t\t\t\t\tif (this._isEnlarged) {\r\n\t\t\t\t\t\tshade.style.background = s;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttab.style.background = s;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttab.style.background = '';  // This must be '' for IE11\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t_calcShadeStyle() {\r\n\t\t\t\tconst tab = this._table;\r\n\t\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\t\t\tlet rl = 0.25, rr = 0.25;\r\n\t\t\t\tif (r < 0.1) rl *= r / 0.1;\r\n\t\t\t\tif (0.9 < r) rr *= (1 - r) / 0.1;\r\n\t\t\t\tconst ch = this._capt ? (this._capt.offsetHeight + 'px') : '0';\r\n\t\t\t\tconst sl = `linear-gradient(to left, rgba(0,0,0,0), rgba(0,0,0,${rl}) 1.25rem) 0 ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\t\t\tconst sr = `linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,${rr}) 1.25rem) right ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\t\r\n\t\t\t\tconst bg = this._table.dataset['background'];\r\n\t\t\t\tconst sb = (this._isEnlarged || !bg || bg === 'transparent') ? '' : `, linear-gradient(to bottom, ${bg}, ${bg}) 0px 0px / 100% 100% no-repeat`;\r\n\t\t\t\treturn sl + ',' + sr + sb;\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t// Utilities ---------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\tfunction _getScrollBarWidth() {\r\n\t\t\tconst dummy = document.createElement('div');\r\n\t\t\tdummy.style.bottom = '100%';\r\n\t\t\tdummy.style.height = '1px';\r\n\t\t\tdummy.style.position = 'absolute';\r\n\t\t\tdummy.style.width = 'calc(100vw - 100%)';\r\n\t\t\tdocument.body.appendChild(dummy);\r\n\t\t\tlet width = 0 | window.getComputedStyle(dummy, '').getPropertyValue('width');\r\n\t\t\r\n\t\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\t\tdummy.style.overflowY = 'scroll';\r\n\t\t\t\tdummy.style.width = '';\r\n\t\t\t\tconst c = document.createElement('div');\r\n\t\t\t\tc.style.minHeight = '100px';\r\n\t\t\t\tdummy.appendChild(c);\r\n\t\t\t\tconst cw = 0 | window.getComputedStyle(c, '').getPropertyValue('width');\r\n\t\t\t\twidth = dummy.offsetWidth - cw;\r\n\t\t\t}\r\n\t\t\tdocument.body.removeChild(dummy);\r\n\t\t\treturn width;\r\n\t\t}\r\n\t\t\n\t\tNS.tableFixedHeader = initialize;\n\t})();\n\n})(window.NACSS);\n","/**\n *\n * Neat Width\n *\n * @author Takuto Yanagida\n * @version 2021-01-10\n *\n */\n\n\nfunction initialize(tabs, opts = {}) {\n\tif (tabs.length === 0) return;\n\n\tconst lt = tabs[tabs.length - 1];\n\tconst cm = Object.assign({\n\t\ttableWidthRateForFull: 0.95,\n\t\tcellMinWidth         : 80,\n\t\tcellMinAspect        : 2 / 3,  // width / height\n\t\tcellMinLength        : 8,\n\t\tmaxRowSize           : 200,\n\t\tmaxBorderWidth       : 2,\n\t\tonDoing              : null,  // function (table) { ...; return delay; }\n\t\tonDone               : null,  // function (table) { ... }\n\t}, opts, getCommonMetrics(lt));\n\n\tcm.padH += cm.maxBorderWidth * 2;\n\tcm.padV += cm.maxBorderWidth * 2;\n\tcm.dcTd = makeDummyCell(lt, 'td');\n\tcm.dcTh = makeDummyCell(lt, 'th');\n\n\tconst tarTabs = [], noTarTabs = [];\n\tfor (const t of tabs) {\n\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\telse noTarTabs.push(t);\n\t}\n\tcm.gcCount = tarTabs.length;\n\n\tfor (const t of tarTabs) {\n\t\tconst delay = (cm.onDoing) ? (cm.onDoing(t) ?? 0) : false;\n\t\tst(() => {\n\t\t\tapply(t, cm);\n\t\t\tif (cm.onDone) cm.onDone(t);\n\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t}, delay);\n\t}\n\tif (cm.tableWidthRateForFull) {\n\t\tfor (const t of noTarTabs) {\n\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\tif (pw * cm.tableWidthRateForFull < t.clientWidth) t.style.width = '100%';\n\t\t}\n\t}\n\tfunction st(fn, d) {\n\t\tif (d === false) fn();\n\t\telse setTimeout(fn, d);\n\t}\n}\n\nfunction getCommonMetrics(tab) {\n\tconst td = tab.getElementsByTagName('td')[0];\n\tconst s = getComputedStyle(td);\n\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\tconst [charW, lineH] = getTextSize(td);\n\treturn { padH, padV, charW, lineH };\n}\n\nfunction getTextSize(elm) {\n\tconst temp = document.createElement(elm.nodeName);\n\ttemp.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\ttemp.innerHTML = '\\u3000';  // Full width space\n\telm.parentNode.appendChild(temp);\n\tconst w = temp.clientWidth;\n\tconst h = temp.clientHeight;\n\ttemp.parentNode.removeChild(temp);\n\treturn [w, h];\n}\n\nfunction makeDummyCell(t, tagName) {\n\tconst d = document.createElement(tagName);\n\td.style.display    = 'inline-block';\n\td.style.position   = 'fixed';\n\td.style.visibility = 'hidden';\n\td.style.whiteSpace = 'nowrap';\n\treturn t.appendChild(d);\n}\n\nfunction removeDummyCell(lt, cMat) {\n\tlt.removeChild(cMat.dcTd);\n\tlt.removeChild(cMat.dcTh);\n}\n\nfunction isTarget(tab, cMet) {\n\tif (tab.rows.length === 0) return false;\n\tif (cMet.maxRowSize < tab.rows.length) return false;\n\n\tconst { cellMinWidth, cellMinAspect } = cMet;\n\tfor (const tr of tab.rows) {\n\t\tif (!tr.hasChildNodes()) continue;\n\t\tfor (const n of tr.childNodes) {\n\t\t\tconst tn = n.tagName;\n\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\tconst cw = n.clientWidth;\n\t\t\tconst ch = n.clientHeight;\n\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction apply(tab, cMet) {\n\ttab.removeAttribute('width');\n\ttab.style.display  = 'block';\n\ttab.style.width    = 'fit-content';\n\tif (tab.style.width !== 'fit-content') tab.style.width = '-moz-fit-content';\n\ttab.style.maxWidth = '100%';\n\ttab.style.overflow = 'auto';\n\n\tconst grid  = makeCellGrid(tab);\n\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\tconst newWs = calcNewWidths(grid, met);\n\tsetCellWidth(grid, newWs);\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction makeCellGrid(t) {\n\tconst css = collectCells(t);\n\tlet maxWidth = 0;\n\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\tconst g = [];\n\tfor (const cs of css) g.push(new Array(maxWidth));\n\n\tfor (let y = 0; y < g.length; y += 1) {\n\t\tconst gr = g[y];\n\t\tconst tds = css[y];\n\t\tlet i = 0;\n\n\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\n\t\t\tconst td = tds[i]\n\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\tgr[x] = td;\n\n\t\t\tif (1 < col) {\n\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t}\n\t\t\tif (1 < row) {\n\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tif (tds.length <= i) break;\n\t\t}\n\t}\n\treturn g;\n}\n\nfunction collectCells(t, css = []) {\n\tfor (const tr of t.rows) {\n\t\tconst cs = [];\n\t\tif (tr.hasChildNodes()) {\n\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\tconst tn = n.tagName;\n\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t}\n\t\t}\n\t\tcss.push(cs);\n\t}\n\treturn css;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction getMetrics(tab, grid) {\n\tconst origTabW = tab.clientWidth;\n\tconst origCellWs = [];\n\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\tconst g = grid[y][x];\n\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn { origTabW, origCellWs };\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction calcNewWidths(grid, met) {\n\tfor (const gr of grid) {\n\t\tfor (const gc of gr) {\n\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t}\n\t}\n\tconst gw = grid[0].length;\n\tconst newWs = new Array(gw).fill(0);\n\tconst fixWs = new Array(gw).fill(0);\n\n\tfor (const gr of grid) {\n\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\tconst td = gr[x];\n\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\n\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t}\n\t}\n\twidenTabWidth(newWs, fixWs, met);\n\treturn newWs;\n}\n\nfunction calcMinWidth(td, met) {\n\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\n\ttd.innerHTML = td.innerHTML.trim();\n\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\tdc.innerHTML = td.innerHTML;\n\tconst aw = dc.clientWidth - padH;\n\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\tlet minW = 0;\n\tfor (let i = 2;; i += 1) {\n\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\tconst tempH = ls * (i * lineH) + padV;\n\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\tminW = tempW;\n\t}\n\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n}\n\nfunction calcMaxLineLength(td) {\n\tconst ih = td.innerHTML.trim();\n\tlet ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\tif (ls.length === 0) ls = [ih];\n\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\treturn Math.max(...ts);\n}\n\nfunction widenTabWidth(newWs, fixWs, met) {\n\tconst { origTabW, origCellWs } = met;\n\tlet wNew = 0, wFix = 0;\n\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\tif (newWs[i]) {\n\t\t\twNew += newWs[i];\n\t\t} else {\n\t\t\twFix += fixWs[i];\n\t\t}\n\t}\n\tif (origTabW < wNew + wFix) return;\n\tlet rem = origTabW - wFix;\n\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\tif (!newWs[i]) continue;\n\t\tconst nw = newWs[i];\n\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\trem  -= (w - nw);\n\t\twNew -= (w - nw);\n\t\tnewWs[i] = 0 | w;\n\t}\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction setCellWidth(grid, ws) {\n\tfor (const gr of grid) {\n\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\tgc.style.whiteSpace = null;\n\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\tgc.style.width      = null;\n\t\t}\n\t}\n}\n","/**\r\n *\r\n * Fixed Header (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-04\r\n *\r\n */\r\n\r\n\r\nconst SEL_TARGET = '.stile';\r\n\r\nconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\nconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\nconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\nconst ST_ENLARGER_BUTTON  = 'enlarger-button';\r\nconst ST_TABLE_SHADE      = 'table-shade';\r\nconst ST_STATE_ENLARGED   = 'table-enlarged';\r\nconst ST_OPT_NO_ENLARGER  = 'no-enlarger';\r\n\r\nconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\nconst ENLARGER_WINDOW_WIDTH_RATIO = 0.9;\r\n\r\nlet getOffset = () => { return 0; };\r\nlet scrollBarWidth;\r\n\r\n// NS.addInit(4, () => {\r\n// \tgetOffset = NS.makeOffsetFunction(false, true);  // Initialize here\r\n\r\n// \tconst tabs = document.querySelectorAll(SEL_TARGET + ' table:not([class])');\r\n// \tsetTimeout(() => { initialize(tabs); }, 0);  // Delay for IE11\r\n// });\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nfunction initialize(tabs) {\r\n\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\tconst conts = [];\r\n\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n}\r\n\r\nfunction throttle(fn) {\r\n\tlet isRunning;\r\n\tfunction run() {\r\n\t\tisRunning = false;\r\n\t\tfn();\r\n\t}\r\n\treturn () => {\r\n\t\tif (isRunning) return;\r\n\t\tisRunning = true;\r\n\t\trequestAnimationFrame(run);\r\n\t};\r\n}\r\n\r\nclass FixedHeaderTable {\r\n\r\n\tconstructor (tab) {\r\n\t\tif (tab.style.height) tab.style.height = '';\r\n\t\tthis._table        = tab;\r\n\t\tthis._headerHeight = 0;\r\n\t\tthis._isEnlarged   = false;\r\n\t\tthis._windowWidth  = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tthis._create();\r\n\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t}\r\n\r\n\t_create() {\r\n\t\tthis._head = this._createHeaderClone();\r\n\t\tthis._sbar = this._createScrollBarClone();\r\n\t\t// this._ebtn = NS.containStile(this._table, ST_OPT_NO_ENLARGER) ? null : this._createEnlargerButton();\r\n\t\tthis._ebtn = (this._table.dataset.stile && this._table.dataset.stile.indexOf(ST_OPT_NO_ENLARGER) !== -1) ? null : this._createEnlargerButton();\r\n\t\tthis._shade = this._createShade();\r\n\r\n\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t}\r\n\r\n\t_createHeaderClone() {\r\n\t\tlet thead = this._table.tHead;\r\n\t\tif (!thead) {\r\n\t\t\tthead = this._createPseudoHeader();\r\n\t\t\tif (!thead) return null;\r\n\t\t\tthis._table.tHead = thead;\r\n\t\t}\r\n\t\tconst cont = document.createElement('div');\r\n\t\t// NS.addStile(cont, ST_HEADER_CONTAINER);\r\n\t\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\t\tthis._table.parentNode.appendChild(cont);\r\n\r\n\t\tconst ptab = document.createElement('div');\r\n\t\t// NS.addStile(ptab, ST_HEADER_TABLE);\r\n\t\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\t\tcont.appendChild(ptab);\r\n\r\n\t\tconst clone = thead.cloneNode(true);\r\n\t\tptab.appendChild(clone);\r\n\r\n\t\t// if (NS.containStile(this._table, ST_STATE_ENLARGED)) NS.addStile(cont, ST_STATE_ENLARGED);\r\n\t\tif (this._table.dataset.stile && this._table.dataset.stile.indexOf(ST_STATE_ENLARGED) !== -1) cont.dataset.stile += ' ' + ST_STATE_ENLARGED;\r\n\t\treturn cont;\r\n\t}\r\n\r\n\t_createPseudoHeader() {\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst trs = tbody.rows;\r\n\t\tif (trs.length === 0) return null;\r\n\r\n\t\tfunction containsOnlyTh(tr) {\r\n\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst trsH = [];\r\n\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\tconst tr = trs[i];\r\n\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\ttrsH.push(tr);\r\n\t\t}\r\n\t\tif (trsH.length === 0) return null;\r\n\r\n\t\tconst thead = this._table.createTHead();\r\n\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\tthead.appendChild(trsH[i]);\r\n\t\t}\r\n\t\treturn thead;\r\n\t}\r\n\r\n\t_createScrollBarClone() {\r\n\t\tconst sbar = document.createElement('div');\r\n\t\t// NS.addStile(sbar, ST_SCROLL_BAR);\r\n\t\tsbar.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\tthis._table.parentNode.appendChild(sbar);\r\n\t\tconst spacer = document.createElement('div');\r\n\t\tsbar.appendChild(spacer);\r\n\t\treturn sbar;\r\n\t}\r\n\r\n\t_createEnlargerButton() {\r\n\t\tconst ebtn = document.createElement('div');\r\n\t\tebtn.dataset['stile'] = ST_ENLARGER_BUTTON;\r\n\t\tthis._table.appendChild(ebtn);\r\n\t\treturn ebtn;\r\n\t}\r\n\r\n\t_createShade() {\r\n\t\tconst shade = document.createElement('div');\r\n\t\tshade.dataset['stile'] = ST_TABLE_SHADE;\r\n\t\tthis._table.appendChild(shade);\r\n\t\treturn shade;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_initialize() {\r\n\t\tconst bg = getComputedStyle(this._table).backgroundColor;\r\n\t\tif (bg && bg !== 'transparent') this._table.dataset['background'] = bg;\r\n\r\n\t\tthis._initTableScroll();\r\n\t\tif (this._ebtn) {\r\n\t\t\tthis._ebtn.addEventListener('click', () => {\r\n\t\t\t\tif (this._isEnlarged) this._turnOffEnlarged();\r\n\t\t\t\telse this._turnOnEnlarged();\r\n\t\t\t});\r\n\t\t\tif (!this._isEnlargable()) this._ebtn.style.display = 'none';\r\n\t\t}\r\n\t\tthis._resize();\r\n\t\tthis._adjustUnexpectedScrollBar()\r\n\t}\r\n\r\n\t_initTableScroll() {\r\n\t\tlet tableScrollChanged = false;\r\n\t\tlet sbarScrollChanged  = false;\r\n\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (tableScrollChanged) {\r\n\t\t\t\ttableScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t}\r\n\t\t\tthis._onTableScroll();\r\n\t\t}));\r\n\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\ttableScrollChanged = true;\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\t_isScrollable() {\r\n\t\tconst t = this._table;\r\n\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t}\r\n\r\n\t_isEnlargable() {\r\n\t\tconst t = this._table;\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\treturn (t.scrollWidth - t.offsetWidth > 1 && t.offsetWidth < ENLARGER_WINDOW_WIDTH_RATIO * ww);  // for avoiding needless scrolling\r\n\t}\r\n\r\n\t_turnOnEnlarged() {\r\n\t\tconst tab = this._table;\r\n\t\tif (tab.scrollWidth - tab.offsetWidth <= 1) return;\r\n\r\n\t\ttab.scrollLeft  = 0;\r\n\t\ttab.style.width = 'calc(100vw - ' + scrollBarWidth + 'px)';\r\n\t\tNS.addStile(tab, ST_STATE_ENLARGED);\r\n\t\tif (this._head) NS.addStile(this._head, ST_STATE_ENLARGED);\r\n\t\tthis._isEnlarged = true;\r\n\r\n\t\t// Do this timing!\r\n\t\tlet left = tab.getBoundingClientRect().left + window.pageXOffset;\r\n\t\tconst tbody = tab.tBodies[0];\r\n\t\tconst width = tbody.clientWidth, pwidth = this._windowWidth - scrollBarWidth;\r\n\t\tif (width < pwidth) left -= (pwidth - width) / 2;\r\n\t\ttab.style.marginLeft = -left + 'px';\r\n\r\n\t\ttab.style.background = null;\r\n\t\tthis._resize();\r\n\t}\r\n\r\n\t_turnOffEnlarged() {\r\n\t\tconst tab = this._table;\r\n\t\ttab.style.marginLeft = '';\r\n\t\ttab.style.width      = '';\r\n\t\ttab.scrollLeft       = 0;\r\n\t\t// NS.removeStile(tab, ST_STATE_ENLARGED);\r\n\t\ttab.dataset.stile = ` ${tab.dataset.stile} `.replace(` ${ST_STATE_ENLARGED} `, '').trim();\r\n\t\t// if (this._head) NS.removeStile(this._head, ST_STATE_ENLARGED);\r\n\t\tif (this._head) this._head.dataset.stile = ` ${this._head.dataset.stile} `.replace(` ${ST_STATE_ENLARGED} `, '').trim();\r\n\t\tthis._isEnlarged = false;\r\n\r\n\t\t// NS.removeStile(this._shade, 'visible');\r\n\t\tthis._shade.dataset.stile = ` ${this._shade.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\tthis._shade.style.background = null;\r\n\t\tthis._resize();\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowResize() {\r\n\t\tthis._adjustUnexpectedScrollBar();\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tif (this._windowWidth === ww) return;\r\n\t\tthis._windowWidth = ww;\r\n\r\n\t\tif (this._isEnlarged) {\r\n\t\t\tthis._turnOffEnlarged();\r\n\t\t} else {\r\n\t\t\tthis._resize();\r\n\t\t}\r\n\t}\r\n\r\n\t_adjustUnexpectedScrollBar() {\r\n\t\tconst t = this._table;\r\n\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t}\r\n\r\n\t_resize() {\r\n\t\tif (this._head) this._updateHeaderSize(this._head);\r\n\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\tif (this._head || this._sbar) this.onWindowScroll();\r\n\t\tthis._onTableScroll();\r\n\t}\r\n\r\n\t_updateHeaderSize(cont) {\r\n\t\tcont.style.maxWidth = this._table.getBoundingClientRect().width + 'px';\r\n\t\tcont.style.display = 'none';\r\n\t\tcont.style.top = getOffset() + 'px';\r\n\r\n\t\tconst thead = this._table.tHead;\r\n\t\tlet w = thead.getBoundingClientRect().width;\r\n\t\tconst ptab = cont.firstChild;\r\n\t\tptab.style.width = w + 'px';\r\n\r\n\t\tconst clone = ptab.firstChild;\r\n\r\n\t\tconst oTrs = thead.rows;\r\n\t\tconst cTrs = clone.rows;\r\n\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t}\r\n\t\tthis._headerHeight = thead.getBoundingClientRect().height;\r\n\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_updateScrollBarSize(sbar) {\r\n\t\tsbar.style.maxWidth = this._table.clientWidth + 'px';\r\n\t\tsbar.style.display = 'none';\r\n\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\tif (0 < h) sbar.style.height = (h + 2) + 'px';\r\n\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst spacer = sbar.firstChild;\r\n\t\tspacer.style.width = Math.ceil(tbody.clientWidth) + 'px';\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowScroll() {\r\n\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\tconst offset = getOffset();\r\n\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\tconst headH  = this._headerHeight;\r\n\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\r\n\t\tlet headVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (offset < tabTop + capH) {  // do nothing\r\n\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t} else if (tabTop + capH < offset) {\r\n\t\t\theadVisible = true;\r\n\t\t}\r\n\t\tlet sbarVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t} else if (this._isScrollable()) {\r\n\t\t\tsbarVisible = true;\r\n\t\t}\r\n\t\tif (this._head) this.updateHeaderVisibility(headVisible, tr.left);\r\n\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t}\r\n\r\n\tupdateHeaderVisibility(visible, tabLeft) {\r\n\t\tconst head = this._head;\r\n\t\tif (visible) {\r\n\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\thead.style.display = 'block';\r\n\t\t\tif (this._ebtn && head) this.switchEnlargerToFloatingHeader();\r\n\t\t} else {\r\n\t\t\thead.style.display = 'none';\r\n\t\t\tif (this._ebtn && head) this.switchEnlargerToTable();\r\n\t\t}\r\n\t\thead.style.left = tabLeft + 'px';\r\n\t\thead.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\tswitchEnlargerToTable() {\r\n\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\tthis._ebtn.style.top = this._capt ? (this._capt.offsetHeight + 'px') : 0;\r\n\t\tthis._table.appendChild(this._ebtn);\r\n\t}\r\n\r\n\tswitchEnlargerToFloatingHeader() {\r\n\t\tthis._ebtn.parentNode.removeChild(this._ebtn);\r\n\t\tthis._ebtn.style.top = 0;\r\n\t\tthis._head.appendChild(this._ebtn);\r\n\t}\r\n\r\n\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\tconst sbar = this._sbar;\r\n\t\tif (visible) {\r\n\t\t\tsbar.style.display = 'block';\r\n\t\t} else {\r\n\t\t\tsbar.style.display = 'none';\r\n\t\t}\r\n\t\tsbar.style.left = tabLeft + 'px';\r\n\t\tsbar.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_onTableScroll() {\r\n\t\tconst tab = this._table, head = this._head, capt = this._capt, ebtn = this._ebtn, shade = this._shade;\r\n\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\tif (head) head.scrollLeft = sL;\r\n\t\tif (capt) {\r\n\t\t\tif (this._isScrollable()) {\r\n\t\t\t\tif (this._stCapt) clearTimeout(this._stCapt);\r\n\t\t\t\tthis._stCapt = setTimeout(() => { capt.style.transform = `translateX(${sL}px)`; }, 200);\r\n\t\t\t} else {\r\n\t\t\t\tcapt.style.transform = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ebtn) {\r\n\t\t\t// NS.removeStile(ebtn, 'visible');\r\n\t\t\tebtn.dataset.stile = ` ${ebtn.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\tif (this._stEbtn) clearTimeout(this._stEbtn);\r\n\t\t\tthis._stEbtn = setTimeout(() => {\r\n\t\t\t\t// NS.addStile(ebtn, 'visible');\r\n\t\t\t\tebtn.dataset.stile = ((ebtn.dataset.stile ?? '') + ` visible`).trim();\r\n\t\t\t}, 100);\r\n\t\t\tthis._updateEnlager();\r\n\t\t}\r\n\r\n\t\tif (this._isEnlarged) {\r\n\t\t\t// NS.removeStile(shade, 'visible');\r\n\t\t\tshade.dataset.stile = ` ${shade.dataset.stile} `.replace(` visible `, '').trim();\r\n\t\t\tif (this._isScrollable() && this._isEnlarged) {\r\n\t\t\t\tif (this._stShade) clearTimeout(this._stShade);\r\n\t\t\t\tthis._stShade = setTimeout(() => {\r\n\t\t\t\t\tshade.style.transform = `translateX(${sL}px)`;\r\n\t\t\t\t\t// NS.addStile(shade, 'visible');\r\n\t\t\t\t\tshade.dataset.stile = ((shade.dataset.stile ?? '') + ` visible`).trim();\r\n\t\t\t\t}, 100);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._updateShade();\r\n\t}\r\n\r\n\t_updateEnlager() {\r\n\t\tconst tab = this._table, capt = this._capt, ebtn = this._ebtn;\r\n\t\tconst sL = tab.scrollLeft;\r\n\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst scrW = tbody.clientWidth, cltW = tab.clientWidth;\r\n\t\tif (this._isEnlargable() || this._isEnlarged) {\r\n\t\t\tlet etbRight = -Math.min(scrW - cltW, sL);  // for Mobile Safari\r\n\t\t\tif (!this._isEnlargable() && this._isEnlarged) {\r\n\t\t\t\tconst diff = ebtn.parentElement.clientWidth - scrW;\r\n\t\t\t\tif (0 < diff) etbRight = diff;\r\n\t\t\t}\r\n\t\t\tif (ebtn.parentNode === tab) ebtn.style.top = capt ? (capt.offsetHeight + 'px') : 0;\r\n\t\t\tebtn.style.right = etbRight + 'px';\r\n\t\t\tebtn.style.display = 'block';\r\n\t\t} else {\r\n\t\t\tebtn.style.display = 'none';\r\n\t\t}\r\n\t}\r\n\r\n\t_updateShade() {\r\n\t\tconst tab = this._table, shade = this._shade;\r\n\t\tif (this._isScrollable()) {\r\n\t\t\tconst s = this._calcShadeStyle();\r\n\t\t\tif (this._isEnlarged) {\r\n\t\t\t\tshade.style.background = s;\r\n\t\t\t} else {\r\n\t\t\t\ttab.style.background = s;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttab.style.background = '';  // This must be '' for IE11\r\n\t\t}\r\n\t}\r\n\r\n\t_calcShadeStyle() {\r\n\t\tconst tab = this._table;\r\n\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\tlet rl = 0.25, rr = 0.25;\r\n\t\tif (r < 0.1) rl *= r / 0.1;\r\n\t\tif (0.9 < r) rr *= (1 - r) / 0.1;\r\n\t\tconst ch = this._capt ? (this._capt.offsetHeight + 'px') : '0';\r\n\t\tconst sl = `linear-gradient(to left, rgba(0,0,0,0), rgba(0,0,0,${rl}) 1.25rem) 0 ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\t\tconst sr = `linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,${rr}) 1.25rem) right ${ch} / 1.25rem 100% no-repeat scroll`;\r\n\r\n\t\tconst bg = this._table.dataset['background'];\r\n\t\tconst sb = (this._isEnlarged || !bg || bg === 'transparent') ? '' : `, linear-gradient(to bottom, ${bg}, ${bg}) 0px 0px / 100% 100% no-repeat`;\r\n\t\treturn sl + ',' + sr + sb;\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction _getScrollBarWidth() {\r\n\tconst dummy = document.createElement('div');\r\n\tdummy.style.bottom = '100%';\r\n\tdummy.style.height = '1px';\r\n\tdummy.style.position = 'absolute';\r\n\tdummy.style.width = 'calc(100vw - 100%)';\r\n\tdocument.body.appendChild(dummy);\r\n\tlet width = 0 | window.getComputedStyle(dummy, '').getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\tdummy.style.overflowY = 'scroll';\r\n\t\tdummy.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\tdummy.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c, '').getPropertyValue('width');\r\n\t\twidth = dummy.offsetWidth - cw;\r\n\t}\r\n\tdocument.body.removeChild(dummy);\r\n\treturn width;\r\n}\r\n"]}