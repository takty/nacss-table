{"version":3,"sources":["table-neat-width.js","_neat-width.js"],"names":["window","NACSS","NS","makeDummyCell","t","tagName","d","document","createElement","setAttribute","appendChild","removeDummyCell","lt","cMat","removeChild","dcTd","dcTh","isTarget","tab","cMet","rows","length","maxRowSize","cellMinWidth","cellMinAspect","tr","hasChildNodes","n","childNodes","tn","parseInt","getAttribute","cw","clientWidth","ch","clientHeight","addClass","tar","cls","startsWith","dataset","substr","classList","add","removeClass","remove","onScroll","scrollWidth","r","scrollLeft","styleScrollRight","styleScrollLeft","apply","removeAttribute","style","width","height","grid","css","cs","push","collectCells","maxWidth","Math","max","g","Array","y","gr","tds","i","x","td","col","row","p","q","nr","makeCellGrid","ws","gc","w","HTMLTableCellElement","whiteSpace","minWidth","setCellWidth","met","gw","newWs","fill","fixWs","minW","calcMinWidth","origTabW","origCellWs","wNew","wFix","rem","nw","min","widenTabWidth","calcNewWidths","Object","assign","getMetrics","getElementsByTagName","innerHTML","padH","padV","charW","lineH","cellMinLength","ih","trim","ts","split","map","e","replace","calcMaxLineLength","dc","aw","ls","round","tempW","tempH","tableNeatWidth","tabs","opts","cm","fullWidthRate","maxBorderWidth","before","after","styleNeat","styleFull","s","getComputedStyle","parseFloat","paddingLeft","paddingRight","paddingTop","paddingBottom","elm","nodeName","fontFamily","fontSize","parentNode","h","getTextSize","getCommonMetrics","tarTabs","noTarTabs","gcCount","delay","fn","setTimeout","parentElement","rob","ResizeObserver","oes","oe","target","observe","addEventListener","throttle","isRunning","requestAnimationFrame","initScroll"],"mappings":"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","file":"table-neat-width.min.js","sourcesContent":["/**\n *\n * Table Style - Neat Width (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-04\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t/**\n\t *\n\t * Neat Width\n\t *\n\t * @author Takuto Yanagida\n\t * @version 2021-01-17\n\t *\n\t */\n\t\n\t\n\tfunction initialize(tabs, opts = {}) {\n\t\tif (tabs.length === 0) return;\n\t\n\t\tconst lt = tabs[tabs.length - 1];\n\t\tconst cm = Object.assign({\n\t\t\tfullWidthRate   : 0.95,\n\t\t\tcellMinWidth    : 80,\n\t\t\tcellMinAspect   : 2 / 3,  // width / height\n\t\t\tcellMinLength   : 8,\n\t\t\tmaxRowSize      : 200,\n\t\t\tmaxBorderWidth  : 2,\n\t\t\tbefore          : null,  // function (table) { ...; return delay; }\n\t\t\tafter           : null,  // function (table) { ... }\n\t\t\tstyleNeat       : ':ncTableNeat',\n\t\t\tstyleFull       : ':ncTableFull',\n\t\t\tstyleScrollRight: ':ncScrollRight',\n\t\t\tstyleScrollLeft : ':ncScrollLeft',\n\t\t}, opts, getCommonMetrics(lt));\n\t\n\t\tcm.padH += cm.maxBorderWidth * 2;\n\t\tcm.padV += cm.maxBorderWidth * 2;\n\t\tcm.dcTd = makeDummyCell(lt, 'td');\n\t\tcm.dcTh = makeDummyCell(lt, 'th');\n\t\n\t\tconst tarTabs = [], noTarTabs = [];\n\t\tfor (const t of tabs) {\n\t\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\t\telse noTarTabs.push(t);\n\t\t}\n\t\tcm.gcCount = tarTabs.length;\n\t\n\t\tfor (const t of tarTabs) {\n\t\t\tconst delay = (cm.before) ? (cm.before(t) ?? 0) : false;\n\t\t\tst(() => {\n\t\t\t\tapply(t, cm);\n\t\t\t\taddClass(t, cm.styleNeat);\n\t\t\t\tif (cm.after) cm.after(t);\n\t\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t\t}, delay);\n\t\t}\n\t\tif (cm.fullWidthRate) {\n\t\t\tfor (const t of noTarTabs) {\n\t\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\t\tif (pw * cm.fullWidthRate < t.clientWidth) addClass(t, cm.styleFull);\n\t\t\t}\n\t\t}\n\t\tfunction st(fn, d) { (d === false) ? fn() : setTimeout(fn, d); }\n\t\tinitScroll(tarTabs, cm);\n\t}\n\t\n\tfunction getCommonMetrics(tab) {\n\t\tconst td = tab.getElementsByTagName('td')[0];\n\t\tconst s = getComputedStyle(td);\n\t\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\t\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\t\tconst [charW, lineH] = getTextSize(td);\n\t\treturn { padH, padV, charW, lineH };\n\t}\n\t\n\tfunction getTextSize(elm) {\n\t\tconst d = document.createElement(elm.nodeName);\n\t\td.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\t\td.innerHTML = '\\u3000';  // Full width space\n\t\telm.parentNode.appendChild(d);\n\t\tconst w = d.clientWidth;\n\t\tconst h = d.clientHeight;\n\t\td.parentNode.removeChild(d);\n\t\treturn [w, h];\n\t}\n\t\n\tfunction makeDummyCell(t, tagName) {\n\t\tconst d = document.createElement(tagName);\n\t\td.setAttribute('style', `position:fixed;display:inline-block;visibility:hidden;white-space:nowrap;`);\n\t\treturn t.appendChild(d);\n\t}\n\t\n\tfunction removeDummyCell(lt, cMat) {\n\t\tlt.removeChild(cMat.dcTd);\n\t\tlt.removeChild(cMat.dcTh);\n\t}\n\t\n\tfunction isTarget(tab, cMet) {\n\t\tif (tab.rows.length === 0) return false;\n\t\tif (cMet.maxRowSize < tab.rows.length) return false;\n\t\n\t\tconst { cellMinWidth, cellMinAspect } = cMet;\n\t\tfor (const tr of tab.rows) {\n\t\t\tif (!tr.hasChildNodes()) continue;\n\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\tconst tn = n.tagName;\n\t\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\t\tconst cw = n.clientWidth;\n\t\t\t\tconst ch = n.clientHeight;\n\t\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction addClass(tar, cls) {\n\t\tif (cls.startsWith(':')) tar.dataset[cls.substr(1)] = '';\n\t\telse tar.classList.add(cls.substr(1));\n\t}\n\t\n\tfunction removeClass(tar, cls) {\n\t\tif (cls.startsWith(':')) delete tar.dataset[cls.substr(1)];\n\t\telse tar.classList.remove(cls.substr(1));\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction initScroll(tabs, cMet) {\n\t\tconst rob = new ResizeObserver(oes => {\n\t\t\tfor (const oe of oes) onScroll(oe.target, cMet);\n\t\t});\n\t\tfor (const t of tabs) {\n\t\t\trob.observe(t);\n\t\t\tt.addEventListener('scroll', throttle(() => { onScroll(t, cMet); }));\n\t\t}\n\t\tfunction throttle(fn) {\n\t\t\tlet isRunning;\n\t\t\treturn () => {\n\t\t\t\tif (isRunning) return;\n\t\t\t\tisRunning = true;\n\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\tisRunning = false;\n\t\t\t\t\tfn();\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t}\n\t\n\tfunction onScroll(tab, cMet) {\n\t\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\n\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\n\t\t\t(0.95 < r ? removeClass : addClass)(tab, cMet.styleScrollRight);\n\t\t\t(r < 0.05 ? removeClass : addClass)(tab, cMet.styleScrollLeft);\n\t\t} else {\n\t\t\tremoveClass(tab, cMet.styleScrollRight);\n\t\t\tremoveClass(tab, cMet.styleScrollLeft);\n\t\t}\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction apply(tab, cMet) {\n\t\ttab.removeAttribute('width');\n\t\ttab.style.width = null;\n\t\ttab.style.height = null;\n\t\n\t\tconst grid  = makeCellGrid(tab);\n\t\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\t\tconst newWs = calcNewWidths(grid, met);\n\t\tsetCellWidth(grid, newWs);\n\t\n\t\tconst cs = tab.getElementsByTagName('caption');\n\t\tif (cs.length) cs[0].innerHTML = `<span>${cs[0].innerHTML}</span>`;\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction makeCellGrid(t) {\n\t\tconst css = collectCells(t);\n\t\tlet maxWidth = 0;\n\t\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\t\tconst g = [];\n\t\tfor (const cs of css) g.push(new Array(maxWidth));\n\t\n\t\tfor (let y = 0; y < g.length; y += 1) {\n\t\t\tconst gr = g[y];\n\t\t\tconst tds = css[y];\n\t\t\tlet i = 0;\n\t\n\t\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\t\n\t\t\t\tconst td = tds[i]\n\t\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\t\tgr[x] = td;\n\t\n\t\t\t\tif (1 < col) {\n\t\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t\t}\n\t\t\t\tif (1 < row) {\n\t\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti += 1;\n\t\t\t\tif (tds.length <= i) break;\n\t\t\t}\n\t\t}\n\t\treturn g;\n\t}\n\t\n\tfunction collectCells(t, css = []) {\n\t\tfor (const tr of t.rows) {\n\t\t\tconst cs = [];\n\t\t\tif (tr.hasChildNodes()) {\n\t\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\t\tconst tn = n.tagName;\n\t\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcss.push(cs);\n\t\t}\n\t\treturn css;\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction getMetrics(tab, grid) {\n\t\tconst origTabW = tab.clientWidth;\n\t\tconst origCellWs = [];\n\t\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\t\tconst g = grid[y][x];\n\t\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { origTabW, origCellWs };\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction calcNewWidths(grid, met) {\n\t\tfor (const gr of grid) {\n\t\t\tfor (const gc of gr) {\n\t\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t}\n\t\tconst gw = grid[0].length;\n\t\tconst newWs = new Array(gw).fill(0);\n\t\tconst fixWs = new Array(gw).fill(0);\n\t\n\t\tfor (const gr of grid) {\n\t\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\t\tconst td = gr[x];\n\t\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\t\n\t\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t\t}\n\t\t}\n\t\twidenTabWidth(newWs, fixWs, met);\n\t\treturn newWs;\n\t}\n\t\n\tfunction calcMinWidth(td, met) {\n\t\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\t\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\t\n\t\ttd.innerHTML = td.innerHTML.trim();\n\t\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\t\tdc.innerHTML = td.innerHTML;\n\t\tconst aw = dc.clientWidth - padH;\n\t\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\t\tlet minW = 0;\n\t\tfor (let i = 2;; i += 1) {\n\t\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\t\tconst tempH = ls * (i * lineH) + padV;\n\t\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\t\tminW = tempW;\n\t\t}\n\t\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n\t}\n\t\n\tfunction calcMaxLineLength(td) {\n\t\tconst ih = td.innerHTML.trim();\n\t\tconst ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\t\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\t\treturn Math.max(...ts);\n\t}\n\t\n\tfunction widenTabWidth(newWs, fixWs, met) {\n\t\tconst { origTabW, origCellWs } = met;\n\t\tlet wNew = 0, wFix = 0;\n\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\tif (newWs[i]) {\n\t\t\t\twNew += newWs[i];\n\t\t\t} else {\n\t\t\t\twFix += fixWs[i];\n\t\t\t}\n\t\t}\n\t\tif (origTabW < wNew + wFix) return;\n\t\tlet rem = origTabW - wFix;\n\t\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\t\tif (!newWs[i]) continue;\n\t\t\tconst nw = newWs[i];\n\t\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\t\trem  -= (w - nw);\n\t\t\twNew -= (w - nw);\n\t\t\tnewWs[i] = 0 | w;\n\t\t}\n\t}\n\t\n\t\n\t// -------------------------------------------------------------------------\n\t\n\t\n\tfunction setCellWidth(grid, ws) {\n\t\tfor (const gr of grid) {\n\t\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\t\tgc.style.whiteSpace = null;\n\t\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\t\tgc.style.width      = null;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tNS.tableNeatWidth = initialize;\n\n})(window.NACSS);\n","/**\n *\n * Neat Width\n *\n * @author Takuto Yanagida\n * @version 2021-01-17\n *\n */\n\n\nfunction initialize(tabs, opts = {}) {\n\tif (tabs.length === 0) return;\n\n\tconst lt = tabs[tabs.length - 1];\n\tconst cm = Object.assign({\n\t\tfullWidthRate   : 0.95,\n\t\tcellMinWidth    : 80,\n\t\tcellMinAspect   : 2 / 3,  // width / height\n\t\tcellMinLength   : 8,\n\t\tmaxRowSize      : 200,\n\t\tmaxBorderWidth  : 2,\n\t\tbefore          : null,  // function (table) { ...; return delay; }\n\t\tafter           : null,  // function (table) { ... }\n\t\tstyleNeat       : ':ncTableNeat',\n\t\tstyleFull       : ':ncTableFull',\n\t\tstyleScrollRight: ':ncScrollRight',\n\t\tstyleScrollLeft : ':ncScrollLeft',\n\t}, opts, getCommonMetrics(lt));\n\n\tcm.padH += cm.maxBorderWidth * 2;\n\tcm.padV += cm.maxBorderWidth * 2;\n\tcm.dcTd = makeDummyCell(lt, 'td');\n\tcm.dcTh = makeDummyCell(lt, 'th');\n\n\tconst tarTabs = [], noTarTabs = [];\n\tfor (const t of tabs) {\n\t\tif (isTarget(t, cm)) tarTabs.push(t);\n\t\telse noTarTabs.push(t);\n\t}\n\tcm.gcCount = tarTabs.length;\n\n\tfor (const t of tarTabs) {\n\t\tconst delay = (cm.before) ? (cm.before(t) ?? 0) : false;\n\t\tst(() => {\n\t\t\tapply(t, cm);\n\t\t\taddClass(t, cm.styleNeat);\n\t\t\tif (cm.after) cm.after(t);\n\t\t\tif (--cm.gcCount === 0) removeDummyCell(lt, cm);\n\t\t}, delay);\n\t}\n\tif (cm.fullWidthRate) {\n\t\tfor (const t of noTarTabs) {\n\t\t\tconst pw = t.parentElement.clientWidth;\n\t\t\tif (pw * cm.fullWidthRate < t.clientWidth) addClass(t, cm.styleFull);\n\t\t}\n\t}\n\tfunction st(fn, d) { (d === false) ? fn() : setTimeout(fn, d); }\n\tinitScroll(tarTabs, cm);\n}\n\nfunction getCommonMetrics(tab) {\n\tconst td = tab.getElementsByTagName('td')[0];\n\tconst s = getComputedStyle(td);\n\tconst padH  = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\n\tconst padV  = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\n\tconst [charW, lineH] = getTextSize(td);\n\treturn { padH, padV, charW, lineH };\n}\n\nfunction getTextSize(elm) {\n\tconst d = document.createElement(elm.nodeName);\n\td.setAttribute('style', `position:fixed;margin:0;padding:0;font-family:${elm.style.fontFamily || 'inherit'};font-size:${elm.style.fontSize || 'inherit'};`);\n\td.innerHTML = '\\u3000';  // Full width space\n\telm.parentNode.appendChild(d);\n\tconst w = d.clientWidth;\n\tconst h = d.clientHeight;\n\td.parentNode.removeChild(d);\n\treturn [w, h];\n}\n\nfunction makeDummyCell(t, tagName) {\n\tconst d = document.createElement(tagName);\n\td.setAttribute('style', `position:fixed;display:inline-block;visibility:hidden;white-space:nowrap;`);\n\treturn t.appendChild(d);\n}\n\nfunction removeDummyCell(lt, cMat) {\n\tlt.removeChild(cMat.dcTd);\n\tlt.removeChild(cMat.dcTh);\n}\n\nfunction isTarget(tab, cMet) {\n\tif (tab.rows.length === 0) return false;\n\tif (cMet.maxRowSize < tab.rows.length) return false;\n\n\tconst { cellMinWidth, cellMinAspect } = cMet;\n\tfor (const tr of tab.rows) {\n\t\tif (!tr.hasChildNodes()) continue;\n\t\tfor (const n of tr.childNodes) {\n\t\t\tconst tn = n.tagName;\n\t\t\tif (tn !== 'TD' && tn !== 'TH') continue;\n\t\t\tif (1 < parseInt(n.getAttribute('colSpan'), 10)) continue;\n\t\t\tif (1 < parseInt(n.getAttribute('rowSpan'), 10)) continue;\n\t\t\tconst cw = n.clientWidth;\n\t\t\tconst ch = n.clientHeight;\n\t\t\tif (cw < cellMinWidth || cw / ch < cellMinAspect) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction addClass(tar, cls) {\n\tif (cls.startsWith(':')) tar.dataset[cls.substr(1)] = '';\n\telse tar.classList.add(cls.substr(1));\n}\n\nfunction removeClass(tar, cls) {\n\tif (cls.startsWith(':')) delete tar.dataset[cls.substr(1)];\n\telse tar.classList.remove(cls.substr(1));\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction initScroll(tabs, cMet) {\n\tconst rob = new ResizeObserver(oes => {\n\t\tfor (const oe of oes) onScroll(oe.target, cMet);\n\t});\n\tfor (const t of tabs) {\n\t\trob.observe(t);\n\t\tt.addEventListener('scroll', throttle(() => { onScroll(t, cMet); }));\n\t}\n\tfunction throttle(fn) {\n\t\tlet isRunning;\n\t\treturn () => {\n\t\t\tif (isRunning) return;\n\t\t\tisRunning = true;\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tisRunning = false;\n\t\t\t\tfn();\n\t\t\t});\n\t\t};\n\t}\n}\n\nfunction onScroll(tab, cMet) {\n\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\n\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\n\t\t(0.95 < r ? removeClass : addClass)(tab, cMet.styleScrollRight);\n\t\t(r < 0.05 ? removeClass : addClass)(tab, cMet.styleScrollLeft);\n\t} else {\n\t\tremoveClass(tab, cMet.styleScrollRight);\n\t\tremoveClass(tab, cMet.styleScrollLeft);\n\t}\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction apply(tab, cMet) {\n\ttab.removeAttribute('width');\n\ttab.style.width = null;\n\ttab.style.height = null;\n\n\tconst grid  = makeCellGrid(tab);\n\tconst met   = Object.assign(getMetrics(tab, grid), cMet);\n\tconst newWs = calcNewWidths(grid, met);\n\tsetCellWidth(grid, newWs);\n\n\tconst cs = tab.getElementsByTagName('caption');\n\tif (cs.length) cs[0].innerHTML = `<span>${cs[0].innerHTML}</span>`;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction makeCellGrid(t) {\n\tconst css = collectCells(t);\n\tlet maxWidth = 0;\n\tfor (const cs of css) maxWidth = Math.max(maxWidth, cs.length);\n\tconst g = [];\n\tfor (const cs of css) g.push(new Array(maxWidth));\n\n\tfor (let y = 0; y < g.length; y += 1) {\n\t\tconst gr = g[y];\n\t\tconst tds = css[y];\n\t\tlet i = 0;\n\n\t\tfor (let x = 0; x < maxWidth; x += 1) {\n\t\t\tif (typeof gr[x] === 'number' || gr[x] === null) continue;\n\n\t\t\tconst td = tds[i]\n\t\t\tconst col = parseInt(td.getAttribute('colSpan') ?? 1, 10);\n\t\t\tconst row = parseInt(td.getAttribute('rowSpan') ?? 1, 10);\n\t\t\tgr[x] = td;\n\n\t\t\tif (1 < col) {\n\t\t\t\tfor (let p = 1; p < col; p += 1) gr[x + p] = p;\n\t\t\t}\n\t\t\tif (1 < row) {\n\t\t\t\tfor (let q = 1; q < row; q += 1) {\n\t\t\t\t\tconst nr = g[y + q];\n\t\t\t\t\tfor (let p = 0; p < col; p += 1) nr[x + p] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tif (tds.length <= i) break;\n\t\t}\n\t}\n\treturn g;\n}\n\nfunction collectCells(t, css = []) {\n\tfor (const tr of t.rows) {\n\t\tconst cs = [];\n\t\tif (tr.hasChildNodes()) {\n\t\t\tfor (const n of tr.childNodes) {\n\t\t\t\tconst tn = n.tagName;\n\t\t\t\tif (tn === 'TD' || tn === 'TH') cs.push(n);\n\t\t\t}\n\t\t}\n\t\tcss.push(cs);\n\t}\n\treturn css;\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction getMetrics(tab, grid) {\n\tconst origTabW = tab.clientWidth;\n\tconst origCellWs = [];\n\tfor (let x = 0; x < grid[0].length; x += 1) {\n\t\tfor (let y = 0; y < grid.length; y += 1) {\n\t\t\tconst g = grid[y][x];\n\t\t\tif (g instanceof HTMLTableCellElement && !g.getAttribute('colSpan')) {\n\t\t\t\torigCellWs.push(g.clientWidth);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn { origTabW, origCellWs };\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction calcNewWidths(grid, met) {\n\tfor (const gr of grid) {\n\t\tfor (const gc of gr) {\n\t\t\tif (typeof gc !== 'number' && gc !== null) gc.style.whiteSpace = 'nowrap';\n\t\t}\n\t}\n\tconst gw = grid[0].length;\n\tconst newWs = new Array(gw).fill(0);\n\tconst fixWs = new Array(gw).fill(0);\n\n\tfor (const gr of grid) {\n\t\tfor (let x = 0; x < gw; x += 1) {\n\t\t\tconst td = gr[x];\n\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\n\t\t\tif (x < gw - 1 && typeof gr[x + 1] === 'number') continue;\n\t\t\tif (1 < parseInt(td.getAttribute('colSpan'), 10)) continue;\n\t\t\tif (1 < parseInt(td.getAttribute('rowSpan'), 10)) continue;\n\n\t\t\tconst minW = calcMinWidth(td, met);\n\t\t\tnewWs[x] = Math.max(newWs[x], minW);\n\t\t\tif (!minW) fixWs[x] = Math.max(fixWs[x], td.clientWidth);\n\t\t}\n\t}\n\twidenTabWidth(newWs, fixWs, met);\n\treturn newWs;\n}\n\nfunction calcMinWidth(td, met) {\n\tconst { padH, padV, charW, lineH, dcTd, dcTh, cellMinWidth, cellMinAspect, cellMinLength } = met;\n\tif (calcMaxLineLength(td) < cellMinLength) return 0;\n\n\ttd.innerHTML = td.innerHTML.trim();\n\tconst dc = td.tagName === 'TD' ? dcTd : dcTh;\n\tdc.innerHTML = td.innerHTML;\n\tconst aw = dc.clientWidth - padH;\n\tconst ls = Math.round((dc.clientHeight - padV) / lineH);\n\tlet minW = 0;\n\tfor (let i = 2;; i += 1) {\n\t\tconst tempW = 0 | (aw / i + charW * i + padH);\n\t\tconst tempH = ls * (i * lineH) + padV;\n\t\tif (tempW < cellMinWidth || tempW / tempH < cellMinAspect || (minW && minW < tempW)) break;\n\t\tminW = tempW;\n\t}\n\treturn (minW + charW < dc.clientWidth) ? minW : 0;\n}\n\nfunction calcMaxLineLength(td) {\n\tconst ih = td.innerHTML.trim();\n\tconst ls = ih.split(/<\\s*br\\s*\\/?>/ui);\n\tconst ts = ls.map(e => e.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '').length);\n\treturn Math.max(...ts);\n}\n\nfunction widenTabWidth(newWs, fixWs, met) {\n\tconst { origTabW, origCellWs } = met;\n\tlet wNew = 0, wFix = 0;\n\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\tif (newWs[i]) {\n\t\t\twNew += newWs[i];\n\t\t} else {\n\t\t\twFix += fixWs[i];\n\t\t}\n\t}\n\tif (origTabW < wNew + wFix) return;\n\tlet rem = origTabW - wFix;\n\tfor (let i = 0; i < newWs.length; i += 1) {\n\t\tif (!newWs[i]) continue;\n\t\tconst nw = newWs[i];\n\t\tconst w = Math.min(nw / wNew * rem, origCellWs[i]);\n\t\trem  -= (w - nw);\n\t\twNew -= (w - nw);\n\t\tnewWs[i] = 0 | w;\n\t}\n}\n\n\n// -------------------------------------------------------------------------\n\n\nfunction setCellWidth(grid, ws) {\n\tfor (const gr of grid) {\n\t\tfor (let x = 0; x < gr.length; x += 1) {\n\t\t\tconst gc = gr[x], w = ws[x];\n\t\t\tif (!w || !(gc instanceof HTMLTableCellElement)) continue;\n\t\t\tgc.style.whiteSpace = null;\n\t\t\tgc.style.minWidth   = w + 'px';\n\t\t\tgc.style.width      = null;\n\t\t}\n\t}\n}\n"]}