{"version":3,"sources":["table-usable-view.js","_usable-view.js"],"names":["window","NACSS","NS","scrollBarWidth","throttle","fn","isRunning","requestAnimationFrame","FixedHeaderTable","constructor","tab","this","_table","_headerHeight","_windowWidth","_create","setTimeout","_initialize","_head","_createHeaderClone","_sbar","_createScrollBarClone","caps","getElementsByTagName","_capt","length","thead","tHead","_createPseudoHeader","cont","document","createElement","dataset","stile","parentNode","appendChild","ptab","clone","cloneNode","trs","tBodies","rows","containsOnlyTh","tr","tds","ths","trsH","i","I","push","createTHead","e","spacer","_initTableScroll","onWindowResize","tableScrollChanged","sbarScrollChanged","addEventListener","scrollLeft","_onTableScroll","_isScrollable","t","scrollWidth","clientWidth","style","overflowX","ww","Math","min","outerWidth","innerWidth","_updateHeaderSize","_updateScrollBarSize","onWindowScroll","maxWidth","getBoundingClientRect","width","display","top","getOffset","w","firstChild","oTrs","cTrs","copyWidth","o","c","tag","os","cs","height","b","h","parseInt","_getScrollBarWidth","tabTop","tabBottom","bottom","capH","offsetHeight","headH","inView","innerHeight","headVisible","sbarVisible","updateHeaderVisibility","left","updateScrollBarVisibility","visible","tabLeft","head","sL","max","offsetWidth","d","setAttribute","body","getComputedStyle","getPropertyValue","overflowY","minHeight","cw","removeChild","tableUsableView","tabs","conts","passive"],"mappings":"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","file":"table-usable-view.min.js","sourcesContent":["/**\n *\n * Table Style - Usable View (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-18\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t/**\r\n\t *\r\n\t * Usable View (JS)\r\n\t *\r\n\t * @author Takuto Yanagida\r\n\t * @version 2021-01-18\r\n\t *\r\n\t */\r\n\t\r\n\t\r\n\tconst SEL_TARGET = '.stile';\r\n\t\r\n\tconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\n\tconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\n\tconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\t\r\n\tconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\t\r\n\tlet getOffset = () => { return 0; };\r\n\tlet scrollBarWidth;\r\n\t\r\n\t\r\n\t// -------------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction initialize(tabs) {\r\n\t\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\t\tconst conts = [];\r\n\t\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\t\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\t\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n\t}\r\n\t\r\n\tfunction throttle(fn) {\r\n\t\tlet isRunning;\r\n\t\treturn () => {\r\n\t\t\tif (isRunning) return;\r\n\t\t\tisRunning = true;\r\n\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\tisRunning = false;\r\n\t\t\t\tfn();\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n\t\r\n\tclass FixedHeaderTable {\r\n\t\r\n\t\tconstructor (tab) {\r\n\t\t\tthis._table        = tab;\r\n\t\t\tthis._headerHeight = 0;\r\n\t\t\tthis._windowWidth  = 0;\r\n\t\t\tthis._create();\r\n\t\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t\t}\r\n\t\r\n\t\t_create() {\r\n\t\t\tthis._head = this._createHeaderClone();\r\n\t\t\tthis._sbar = this._createScrollBarClone();\r\n\t\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t\t}\r\n\t\r\n\t\t_createHeaderClone() {\r\n\t\t\tlet thead = this._table.tHead;\r\n\t\t\tif (!thead) {\r\n\t\t\t\tthead = this._createPseudoHeader();\r\n\t\t\t\tif (!thead) return null;\r\n\t\t\t\tthis._table.tHead = thead;\r\n\t\t\t}\r\n\t\t\tconst cont = document.createElement('div');\r\n\t\t\t// NS.addStile(cont, ST_HEADER_CONTAINER);\r\n\t\t\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\t\t\tthis._table.parentNode.appendChild(cont);\r\n\t\r\n\t\t\tconst ptab = document.createElement('div');\r\n\t\t\t// NS.addStile(ptab, ST_HEADER_TABLE);\r\n\t\t\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\t\t\tcont.appendChild(ptab);\r\n\t\r\n\t\t\tconst clone = thead.cloneNode(true);\r\n\t\t\tptab.appendChild(clone);\r\n\t\t\treturn cont;\r\n\t\t}\r\n\t\r\n\t\t_createPseudoHeader() {\r\n\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\tconst trs = tbody.rows;\r\n\t\t\tif (trs.length === 0) return null;\r\n\t\r\n\t\t\tfunction containsOnlyTh(tr) {\r\n\t\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\r\n\t\t\tconst trsH = [];\r\n\t\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\t\tconst tr = trs[i];\r\n\t\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\t\ttrsH.push(tr);\r\n\t\t\t}\r\n\t\t\tif (trsH.length === 0) return null;\r\n\t\r\n\t\t\tconst thead = this._table.createTHead();\r\n\t\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\t\tthead.appendChild(trsH[i]);\r\n\t\t\t}\r\n\t\t\treturn thead;\r\n\t\t}\r\n\t\r\n\t\t_createScrollBarClone() {\r\n\t\t\tconst e = document.createElement('div');\r\n\t\t\te.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\t\tconst spacer = document.createElement('div');\r\n\t\t\te.appendChild(spacer);\r\n\t\t\tthis._table.parentNode.appendChild(e);\r\n\t\t\treturn e;\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\t_initialize() {\r\n\t\t\tthis._initTableScroll();\r\n\t\t\tthis.onWindowResize();\r\n\t\t}\r\n\t\r\n\t\t_initTableScroll() {\r\n\t\t\tlet tableScrollChanged = false;\r\n\t\t\tlet sbarScrollChanged  = false;\r\n\t\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\t\tif (tableScrollChanged) {\r\n\t\t\t\t\ttableScrollChanged = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis._onTableScroll();\r\n\t\t\t}));\r\n\t\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\t\ttableScrollChanged = true;\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\r\n\t\t_isScrollable() {\r\n\t\t\tconst t = this._table;\r\n\t\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\tonWindowResize() {\r\n\t\t\tconst t = this._table;\r\n\t\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\tif (this._windowWidth === ww) return;\r\n\t\t\tthis._windowWidth = ww;\r\n\t\r\n\t\t\tif (this._head) this._updateHeaderSize(this._head);\r\n\t\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\t\tif (this._head || this._sbar) this.onWindowScroll();\r\n\t\t\tthis._onTableScroll();\r\n\t\t}\r\n\t\r\n\t\t_updateHeaderSize(cont) {\r\n\t\t\tcont.style.maxWidth = this._table.getBoundingClientRect().width + 'px';\r\n\t\t\tcont.style.display = 'none';\r\n\t\t\tcont.style.top = getOffset() + 'px';\r\n\t\r\n\t\t\tconst thead = this._table.tHead;\r\n\t\t\tlet w = thead.getBoundingClientRect().width;\r\n\t\t\tconst ptab = cont.firstChild;\r\n\t\t\tptab.style.width = w + 'px';\r\n\t\r\n\t\t\tconst clone = ptab.firstChild;\r\n\t\r\n\t\t\tconst oTrs = thead.rows;\r\n\t\t\tconst cTrs = clone.rows;\r\n\t\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t\t}\r\n\t\t\tthis._headerHeight = thead.getBoundingClientRect().height;\r\n\t\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t_updateScrollBarSize(b) {\r\n\t\t\tb.style.maxWidth = `${this._table.clientWidth}px`;\r\n\t\t\tb.style.display = 'none';\r\n\t\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\t\tif (0 < h) b.style.height = (h + 2) + 'px';\r\n\t\t\tb.firstChild.style.width = `${this._table.scrollWidth}px`;\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\tonWindowScroll() {\r\n\t\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\t\tconst offset = getOffset();\r\n\t\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\t\tconst headH  = this._headerHeight;\r\n\t\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\t\r\n\t\t\tlet headVisible = false;\r\n\t\t\tif (inView) {  // do nothing\r\n\t\t\t} else if (offset < tabTop + capH) {  // do nothing\r\n\t\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t\t} else if (tabTop + capH < offset) {\r\n\t\t\t\theadVisible = true;\r\n\t\t\t}\r\n\t\t\tlet sbarVisible = false;\r\n\t\t\tif (inView) {  // do nothing\r\n\t\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t\t} else if (this._isScrollable()) {\r\n\t\t\t\tsbarVisible = true;\r\n\t\t\t}\r\n\t\t\tif (this._head) this.updateHeaderVisibility(headVisible, tr.left);\r\n\t\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t\t}\r\n\t\r\n\t\tupdateHeaderVisibility(visible, tabLeft) {\r\n\t\t\tconst head = this._head;\r\n\t\t\tif (visible) {\r\n\t\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\t\thead.style.display = 'block';\r\n\t\t\t} else {\r\n\t\t\t\thead.style.display = 'none';\r\n\t\t\t}\r\n\t\t\thead.style.left = tabLeft + 'px';\r\n\t\t\thead.scrollLeft = this._table.scrollLeft;\r\n\t\t}\r\n\t\r\n\t\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\t\tconst b = this._sbar;\r\n\t\t\tb.style.display = visible ? 'block' : 'none';\r\n\t\t\tb.style.left = tabLeft + 'px';\r\n\t\t\tb.scrollLeft = this._table.scrollLeft;\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\t_onTableScroll() {\r\n\t\t\tconst tab = this._table, head = this._head;\r\n\t\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\t\tif (head) head.scrollLeft = sL;\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t// Utilities ---------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction _getScrollBarWidth() {\r\n\t\tconst d = document.createElement('div');\r\n\t\td.setAttribute('style', `position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;`);\r\n\t\tdocument.body.appendChild(d);\r\n\t\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\t\r\n\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\td.style.overflowY = 'scroll';\r\n\t\t\td.style.width = '';\r\n\t\t\tconst c = document.createElement('div');\r\n\t\t\tc.style.minHeight = '100px';\r\n\t\t\td.appendChild(c);\r\n\t\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\t\twidth = d.offsetWidth - cw;\r\n\t\t}\r\n\t\tdocument.body.removeChild(d);\r\n\t\treturn width;\r\n\t}\r\n\t\n\tNS.tableUsableView = initialize;\n\n})(window.NACSS);\n","/**\r\n *\r\n * Usable View (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-18\r\n *\r\n */\r\n\r\n\r\nconst SEL_TARGET = '.stile';\r\n\r\nconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\nconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\nconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\r\nconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\r\nlet getOffset = () => { return 0; };\r\nlet scrollBarWidth;\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nfunction initialize(tabs) {\r\n\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\tconst conts = [];\r\n\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n}\r\n\r\nfunction throttle(fn) {\r\n\tlet isRunning;\r\n\treturn () => {\r\n\t\tif (isRunning) return;\r\n\t\tisRunning = true;\r\n\t\trequestAnimationFrame(() => {\r\n\t\t\tisRunning = false;\r\n\t\t\tfn();\r\n\t\t});\r\n\t};\r\n}\r\n\r\nclass FixedHeaderTable {\r\n\r\n\tconstructor (tab) {\r\n\t\tthis._table        = tab;\r\n\t\tthis._headerHeight = 0;\r\n\t\tthis._windowWidth  = 0;\r\n\t\tthis._create();\r\n\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t}\r\n\r\n\t_create() {\r\n\t\tthis._head = this._createHeaderClone();\r\n\t\tthis._sbar = this._createScrollBarClone();\r\n\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t}\r\n\r\n\t_createHeaderClone() {\r\n\t\tlet thead = this._table.tHead;\r\n\t\tif (!thead) {\r\n\t\t\tthead = this._createPseudoHeader();\r\n\t\t\tif (!thead) return null;\r\n\t\t\tthis._table.tHead = thead;\r\n\t\t}\r\n\t\tconst cont = document.createElement('div');\r\n\t\t// NS.addStile(cont, ST_HEADER_CONTAINER);\r\n\t\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\t\tthis._table.parentNode.appendChild(cont);\r\n\r\n\t\tconst ptab = document.createElement('div');\r\n\t\t// NS.addStile(ptab, ST_HEADER_TABLE);\r\n\t\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\t\tcont.appendChild(ptab);\r\n\r\n\t\tconst clone = thead.cloneNode(true);\r\n\t\tptab.appendChild(clone);\r\n\t\treturn cont;\r\n\t}\r\n\r\n\t_createPseudoHeader() {\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst trs = tbody.rows;\r\n\t\tif (trs.length === 0) return null;\r\n\r\n\t\tfunction containsOnlyTh(tr) {\r\n\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst trsH = [];\r\n\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\tconst tr = trs[i];\r\n\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\ttrsH.push(tr);\r\n\t\t}\r\n\t\tif (trsH.length === 0) return null;\r\n\r\n\t\tconst thead = this._table.createTHead();\r\n\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\tthead.appendChild(trsH[i]);\r\n\t\t}\r\n\t\treturn thead;\r\n\t}\r\n\r\n\t_createScrollBarClone() {\r\n\t\tconst e = document.createElement('div');\r\n\t\te.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\tconst spacer = document.createElement('div');\r\n\t\te.appendChild(spacer);\r\n\t\tthis._table.parentNode.appendChild(e);\r\n\t\treturn e;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_initialize() {\r\n\t\tthis._initTableScroll();\r\n\t\tthis.onWindowResize();\r\n\t}\r\n\r\n\t_initTableScroll() {\r\n\t\tlet tableScrollChanged = false;\r\n\t\tlet sbarScrollChanged  = false;\r\n\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (tableScrollChanged) {\r\n\t\t\t\ttableScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t}\r\n\t\t\tthis._onTableScroll();\r\n\t\t}));\r\n\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\ttableScrollChanged = true;\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\t_isScrollable() {\r\n\t\tconst t = this._table;\r\n\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowResize() {\r\n\t\tconst t = this._table;\r\n\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tif (this._windowWidth === ww) return;\r\n\t\tthis._windowWidth = ww;\r\n\r\n\t\tif (this._head) this._updateHeaderSize(this._head);\r\n\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\tif (this._head || this._sbar) this.onWindowScroll();\r\n\t\tthis._onTableScroll();\r\n\t}\r\n\r\n\t_updateHeaderSize(cont) {\r\n\t\tcont.style.maxWidth = this._table.getBoundingClientRect().width + 'px';\r\n\t\tcont.style.display = 'none';\r\n\t\tcont.style.top = getOffset() + 'px';\r\n\r\n\t\tconst thead = this._table.tHead;\r\n\t\tlet w = thead.getBoundingClientRect().width;\r\n\t\tconst ptab = cont.firstChild;\r\n\t\tptab.style.width = w + 'px';\r\n\r\n\t\tconst clone = ptab.firstChild;\r\n\r\n\t\tconst oTrs = thead.rows;\r\n\t\tconst cTrs = clone.rows;\r\n\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t}\r\n\t\tthis._headerHeight = thead.getBoundingClientRect().height;\r\n\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_updateScrollBarSize(b) {\r\n\t\tb.style.maxWidth = `${this._table.clientWidth}px`;\r\n\t\tb.style.display = 'none';\r\n\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\tif (0 < h) b.style.height = (h + 2) + 'px';\r\n\t\tb.firstChild.style.width = `${this._table.scrollWidth}px`;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowScroll() {\r\n\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\tconst offset = getOffset();\r\n\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\tconst headH  = this._headerHeight;\r\n\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\r\n\t\tlet headVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (offset < tabTop + capH) {  // do nothing\r\n\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t} else if (tabTop + capH < offset) {\r\n\t\t\theadVisible = true;\r\n\t\t}\r\n\t\tlet sbarVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t} else if (this._isScrollable()) {\r\n\t\t\tsbarVisible = true;\r\n\t\t}\r\n\t\tif (this._head) this.updateHeaderVisibility(headVisible, tr.left);\r\n\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t}\r\n\r\n\tupdateHeaderVisibility(visible, tabLeft) {\r\n\t\tconst head = this._head;\r\n\t\tif (visible) {\r\n\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\thead.style.display = 'block';\r\n\t\t} else {\r\n\t\t\thead.style.display = 'none';\r\n\t\t}\r\n\t\thead.style.left = tabLeft + 'px';\r\n\t\thead.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\tconst b = this._sbar;\r\n\t\tb.style.display = visible ? 'block' : 'none';\r\n\t\tb.style.left = tabLeft + 'px';\r\n\t\tb.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_onTableScroll() {\r\n\t\tconst tab = this._table, head = this._head;\r\n\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\tif (head) head.scrollLeft = sL;\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction _getScrollBarWidth() {\r\n\tconst d = document.createElement('div');\r\n\td.setAttribute('style', `position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;`);\r\n\tdocument.body.appendChild(d);\r\n\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\td.style.overflowY = 'scroll';\r\n\t\td.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\td.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\twidth = d.offsetWidth - cw;\r\n\t}\r\n\tdocument.body.removeChild(d);\r\n\treturn width;\r\n}\r\n"]}