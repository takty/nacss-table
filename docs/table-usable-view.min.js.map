{"version":3,"sources":["table-usable-view.js","_usable-view.js"],"names":["window","NACSS","NS","_createHeaderClone","tab","cm","thead","tHead","_createPseudoHeader","hc","document","createElement","enableClass","styleHeaderContainer","parentNode","appendChild","ht","styleHeaderTable","cloneNode","trs","tBodies","rows","length","containsOnlyTh","tr","tds","getElementsByTagName","ths","trsH","push","createTHead","_createBarClone","bar","styleScrollBar","spacer","onResize","r","head","style","overflowX","scrollWidth","clientWidth","_updateHeaderSize","_updateScrollBarSize","onWindowScroll","onTableScroll","tw","width","getBoundingClientRect","maxWidth","display","top","offset","hw","firstChild","oTrs","cTrs","i","copyWidth","o","c","tag","os","cs","disabled","pointerEvents","h","parseInt","getScrollBarWidth","documentElement","height","tBottom","bottom","rh","hTop","hBottom","wY0","wY1","innerHeight","inView","capableWindowHeightRate","tLeft","left","tScrollLeft","scrollLeft","hCy","offsetHeight","_updateHeaderVisibility","_updateBarVisibility","visible","tabLeft","tabScrollLeft","sL","Math","max","min","offsetWidth","styleScrollRight","styleScrollLeft","getSelector","cls","startsWith","substr","replace","charAt","toLowerCase","parent","d","setAttribute","getComputedStyle","getPropertyValue","overflowY","minHeight","cw","removeChild","tableUsableView","tabs","opts","Object","assign","styleFixedHeader","ts","forced","el","tar","op","throttle","addEventListener","ro","ResizeObserver","es","e","idx","indexOf","target","contentRect","t","observe","passive","sel","elm","querySelector"],"mappings":"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","file":"table-usable-view.min.js","sourcesContent":["/**\n *\n * Table Style - Usable View (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-25\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t/**\r\n\t *\r\n\t * Usable View\r\n\t *\r\n\t * @author Takuto Yanagida\r\n\t * @version 2021-01-25\r\n\t *\r\n\t */\r\n\t\r\n\t\r\n\tfunction initialize(tabs, opts = {}) {\r\n\t\tif (tabs.length === 0) return;\r\n\t\tconst cm = Object.assign({\r\n\t\t\tcapableWindowHeightRate: 0.9,\r\n\t\t\tstyleHeaderContainer   : ':ncTableFixedHeaderContainer',\r\n\t\t\tstyleHeaderTable       : ':ncTableFixedHeaderTable',\r\n\t\t\tstyleScrollBar         : ':ncTableFixedScrollBar',\r\n\t\r\n\t\t\tstyleFixedHeader       : ':ncFixedHeader',\r\n\t\t\tstyleScrollRight       : ':ncScrollRight',\r\n\t\t\tstyleScrollLeft        : ':ncScrollLeft',\r\n\t\t\toffset                 : 0,\r\n\t\t}, opts);\r\n\t\r\n\t\tconst cs = [], ts = [...tabs];\r\n\t\tfor (const tab of ts) {\r\n\t\t\tconst head = _createHeaderClone(tab, cm);\r\n\t\t\tconst bar  = _createBarClone(tab, cm);\r\n\t\t\tcs.push({ tab, head, bar });\r\n\t\r\n\t\t\tlet forced = false;\r\n\t\t\tconst el = (tar, op) => throttle(() => {\r\n\t\t\t\tif (forced) {\r\n\t\t\t\t\tforced = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tforced = true;\r\n\t\t\t\t\top.scrollLeft = tar.scrollLeft;\r\n\t\t\t\t\tif (head) onTableScroll(tab, head, cm);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\ttab.addEventListener('scroll', el(tab, bar));\r\n\t\t\tbar.addEventListener('scroll', el(bar, tab));\r\n\t\t}\r\n\t\tconst ro = new ResizeObserver((es) => {\r\n\t\t\tfor (const e of es) {\r\n\t\t\t\tconst idx = ts.indexOf(e.target);\r\n\t\t\t\tconst c = cs[idx];\r\n\t\t\t\tonResize(e.contentRect, c.tab, c.head, c.bar, cm);\r\n\t\t\t}\r\n\t\t});\r\n\t\tfor (const t of ts) ro.observe(t);\r\n\t\r\n\t\twindow.addEventListener('scroll', throttle(() => {\r\n\t\t\tfor (const c of cs) onWindowScroll(c.tab, c.head, c.bar, cm);\r\n\t\t}), { passive: true });\r\n\t\r\n\t\tconst sel = getSelector(cm.styleFixedHeader);\r\n\t\tif (sel) {\r\n\t\t\tconst elm = document.querySelector(sel);\r\n\t\t\tif (elm) {\r\n\t\t\t\tconst rob = new ResizeObserver(es => {\r\n\t\t\t\t\tcm.offset = es[0].contentRect.bottom;\r\n\t\t\t\t\tfor (const c of cs) onResize(null, c.tab, c.head, c.bar, cm);\r\n\t\t\t\t});\r\n\t\t\t\trob.observe(elm);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _createHeaderClone(tab, cm) {\r\n\t\tlet thead = tab.tHead;\r\n\t\tif (!thead) {\r\n\t\t\tthead = _createPseudoHeader(tab);\r\n\t\t\tif (!thead) return null;\r\n\t\t\ttab.tHead = thead;\r\n\t\t}\r\n\t\tconst hc = document.createElement('div');\r\n\t\tenableClass(true, hc, cm.styleHeaderContainer);\r\n\t\ttab.parentNode.appendChild(hc);\r\n\t\r\n\t\tconst ht = document.createElement('div');\r\n\t\tenableClass(true, ht, cm.styleHeaderTable);\r\n\t\thc.appendChild(ht);\r\n\t\r\n\t\tht.appendChild(thead.cloneNode(true));\r\n\t\treturn hc;\r\n\t}\r\n\t\r\n\tfunction _createPseudoHeader(tab) {\r\n\t\tconst trs = tab.tBodies[0].rows;\r\n\t\tif (trs.length === 0) return null;\r\n\t\r\n\t\tfunction containsOnlyTh(tr) {\r\n\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst trsH = [];\r\n\t\tfor (const tr of trs) {\r\n\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\ttrsH.push(tr);\r\n\t\t}\r\n\t\tif (trsH.length === 0) return null;\r\n\t\r\n\t\tconst thead = tab.createTHead();\r\n\t\tfor (const tr of trsH) thead.appendChild(tr);\r\n\t\treturn thead;\r\n\t}\r\n\t\r\n\tfunction _createBarClone(tab, cm) {\r\n\t\tconst bar = document.createElement('div');\r\n\t\tenableClass(true, bar, cm.styleScrollBar);\r\n\t\tconst spacer = document.createElement('div');\r\n\t\tbar.appendChild(spacer);\r\n\t\ttab.parentNode.appendChild(bar);\r\n\t\treturn bar;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onResize(r, tab, head, bar, cm) {\r\n\t\ttab.style.overflowX = (tab.scrollWidth < tab.clientWidth + 2) ? 'hidden' : null;\r\n\t\r\n\t\tif (head) _updateHeaderSize(r, tab, head, cm);\r\n\t\tif (bar) _updateScrollBarSize(tab, bar);\r\n\t\tif (head || bar) onWindowScroll(tab, head, bar, cm);\r\n\t\tif (head) onTableScroll(tab, head, cm);\r\n\t}\r\n\t\r\n\tfunction _updateHeaderSize(r, tab, head, cm) {\r\n\t\tconst tw = r ? r.width : tab.getBoundingClientRect().width;\r\n\t\thead.style.maxWidth = tw + 'px';\r\n\t\thead.style.display  = 'none';\r\n\t\thead.style.top      = cm.offset + 'px';\r\n\t\r\n\t\tconst thead = tab.tHead;\r\n\t\tconst hw = thead.getBoundingClientRect().width;\r\n\t\tconst ht = head.firstChild;\r\n\t\tht.style.width = hw + 'px';\r\n\t\r\n\t\tconst oTrs = thead.rows;\r\n\t\tconst cTrs = ht.firstChild.rows;\r\n\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t}\r\n\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _updateScrollBarSize(tab, bar) {\r\n\t\tconst disabled = (tab.scrollWidth < tab.clientWidth + 2);\r\n\t\tbar.style.overflowX     = disabled ? 'hidden' : null;\r\n\t\tbar.style.pointerEvents = disabled ? 'none'   : null;\r\n\t\r\n\t\tbar.style.maxWidth = `${tab.clientWidth}px`;\r\n\t\tbar.style.display = 'none';\r\n\t\tconst h = parseInt(getScrollBarWidth(document.documentElement));\r\n\t\tif (0 < h) bar.style.height = (h + 2) + 'px';\r\n\t\tbar.firstChild.style.width = `${tab.scrollWidth}px`;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onWindowScroll(tab, head, bar, cm) {\r\n\t\tconst r = tab.getBoundingClientRect();\r\n\t\tconst tBottom = r.bottom;\r\n\t\tconst rh = tab.tHead.getBoundingClientRect();\r\n\t\tconst hTop = rh.top, hBottom = rh.bottom;\r\n\t\tconst wY0 = cm.offset, wY1 = window.innerHeight;\r\n\t\r\n\t\tconst inView = tBottom - hTop < cm.capableWindowHeightRate * (wY1 - wY0);\r\n\t\tconst tLeft = r.left, tScrollLeft = tab.scrollLeft;\r\n\t\tif (head) {\r\n\t\t\tconst hCy = tab.tHead.offsetHeight;\r\n\t\t\tconst f = (!inView && hTop < wY0 && wY0 < tBottom - hCy);\r\n\t\t\t_updateHeaderVisibility(head, f, tLeft, tScrollLeft);\r\n\t\t}\r\n\t\tif (bar) {\r\n\t\t\tconst f = (!inView && hBottom < wY1 && wY1 < tBottom);\r\n\t\t\t_updateBarVisibility(bar, f, tLeft, tScrollLeft);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _updateHeaderVisibility(head, visible, tabLeft, tabScrollLeft) {\r\n\t\thead.style.display = visible ? 'block' : 'none';\r\n\t\thead.style.left    = tabLeft + 'px';\r\n\t\thead.scrollLeft    = tabScrollLeft;\r\n\t}\r\n\t\r\n\tfunction _updateBarVisibility(bar, visible, tabLeft, tabScrollLeft) {\r\n\t\tbar.style.display = visible ? 'block' : 'none';\r\n\t\tbar.style.left    = tabLeft + 'px';\r\n\t\tbar.scrollLeft    = tabScrollLeft;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onTableScroll(tab, head, cm) {\r\n\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\thead.scrollLeft = sL;\r\n\t\r\n\t\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\r\n\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\t\tenableClass(r < 0.95, head, cm.styleScrollRight);\r\n\t\t\tenableClass(0.05 < r, head, cm.styleScrollLeft);\r\n\t\t} else {\r\n\t\t\tenableClass(false, head, cm.styleScrollRight);\r\n\t\t\tenableClass(false, head, cm.styleScrollLeft);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t// Utilities ---------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction getSelector(cls) {\r\n\t\tif (cls.startsWith(':')) {\r\n\t\t\treturn `*[data-${cls.substr(1).replace(/([A-Z])/g, c => '-' + c.charAt(0).toLowerCase())}]`;\r\n\t\t} else {\r\n\t\t\treturn `*${cls}`;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getScrollBarWidth(parent) {\r\n\t\tconst d = document.createElement('div');\r\n\t\td.setAttribute('style', 'position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;');\r\n\t\tparent.appendChild(d);\r\n\t\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\t\r\n\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\td.style.overflowY = 'scroll';\r\n\t\t\td.style.width = '';\r\n\t\t\tconst c = document.createElement('div');\r\n\t\t\tc.style.minHeight = '100px';\r\n\t\t\td.appendChild(c);\r\n\t\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\t\twidth = d.offsetWidth - cw;\r\n\t\t}\r\n\t\tparent.removeChild(d);\r\n\t\treturn width;\r\n\t}\n\tNS.tableUsableView = initialize;\n\n\t/**\r\n\t *\r\n\t * Usable View\r\n\t *\r\n\t * @author Takuto Yanagida\r\n\t * @version 2021-01-25\r\n\t *\r\n\t */\r\n\t\r\n\t\r\n\tfunction initialize(tabs, opts = {}) {\r\n\t\tif (tabs.length === 0) return;\r\n\t\tconst cm = Object.assign({\r\n\t\t\tcapableWindowHeightRate: 0.9,\r\n\t\t\tstyleHeaderContainer   : ':ncTableFixedHeaderContainer',\r\n\t\t\tstyleHeaderTable       : ':ncTableFixedHeaderTable',\r\n\t\t\tstyleScrollBar         : ':ncTableFixedScrollBar',\r\n\t\r\n\t\t\tstyleFixedHeader       : ':ncFixedHeader',\r\n\t\t\tstyleScrollRight       : ':ncScrollRight',\r\n\t\t\tstyleScrollLeft        : ':ncScrollLeft',\r\n\t\t\toffset                 : 0,\r\n\t\t}, opts);\r\n\t\r\n\t\tconst cs = [], ts = [...tabs];\r\n\t\tfor (const tab of ts) {\r\n\t\t\tconst head = _createHeaderClone(tab, cm);\r\n\t\t\tconst bar  = _createBarClone(tab, cm);\r\n\t\t\tcs.push({ tab, head, bar });\r\n\t\r\n\t\t\tlet forced = false;\r\n\t\t\tconst el = (tar, op) => throttle(() => {\r\n\t\t\t\tif (forced) {\r\n\t\t\t\t\tforced = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tforced = true;\r\n\t\t\t\t\top.scrollLeft = tar.scrollLeft;\r\n\t\t\t\t\tif (head) onTableScroll(tab, head, cm);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\ttab.addEventListener('scroll', el(tab, bar));\r\n\t\t\tbar.addEventListener('scroll', el(bar, tab));\r\n\t\t}\r\n\t\tconst ro = new ResizeObserver((es) => {\r\n\t\t\tfor (const e of es) {\r\n\t\t\t\tconst idx = ts.indexOf(e.target);\r\n\t\t\t\tconst c = cs[idx];\r\n\t\t\t\tonResize(e.contentRect, c.tab, c.head, c.bar, cm);\r\n\t\t\t}\r\n\t\t});\r\n\t\tfor (const t of ts) ro.observe(t);\r\n\t\r\n\t\twindow.addEventListener('scroll', throttle(() => {\r\n\t\t\tfor (const c of cs) onWindowScroll(c.tab, c.head, c.bar, cm);\r\n\t\t}), { passive: true });\r\n\t\r\n\t\tconst sel = getSelector(cm.styleFixedHeader);\r\n\t\tif (sel) {\r\n\t\t\tconst elm = document.querySelector(sel);\r\n\t\t\tif (elm) {\r\n\t\t\t\tconst rob = new ResizeObserver(es => {\r\n\t\t\t\t\tcm.offset = es[0].contentRect.bottom;\r\n\t\t\t\t\tfor (const c of cs) onResize(null, c.tab, c.head, c.bar, cm);\r\n\t\t\t\t});\r\n\t\t\t\trob.observe(elm);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _createHeaderClone(tab, cm) {\r\n\t\tlet thead = tab.tHead;\r\n\t\tif (!thead) {\r\n\t\t\tthead = _createPseudoHeader(tab);\r\n\t\t\tif (!thead) return null;\r\n\t\t\ttab.tHead = thead;\r\n\t\t}\r\n\t\tconst hc = document.createElement('div');\r\n\t\tenableClass(true, hc, cm.styleHeaderContainer);\r\n\t\ttab.parentNode.appendChild(hc);\r\n\t\r\n\t\tconst ht = document.createElement('div');\r\n\t\tenableClass(true, ht, cm.styleHeaderTable);\r\n\t\thc.appendChild(ht);\r\n\t\r\n\t\tht.appendChild(thead.cloneNode(true));\r\n\t\treturn hc;\r\n\t}\r\n\t\r\n\tfunction _createPseudoHeader(tab) {\r\n\t\tconst trs = tab.tBodies[0].rows;\r\n\t\tif (trs.length === 0) return null;\r\n\t\r\n\t\tfunction containsOnlyTh(tr) {\r\n\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst trsH = [];\r\n\t\tfor (const tr of trs) {\r\n\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\ttrsH.push(tr);\r\n\t\t}\r\n\t\tif (trsH.length === 0) return null;\r\n\t\r\n\t\tconst thead = tab.createTHead();\r\n\t\tfor (const tr of trsH) thead.appendChild(tr);\r\n\t\treturn thead;\r\n\t}\r\n\t\r\n\tfunction _createBarClone(tab, cm) {\r\n\t\tconst bar = document.createElement('div');\r\n\t\tenableClass(true, bar, cm.styleScrollBar);\r\n\t\tconst spacer = document.createElement('div');\r\n\t\tbar.appendChild(spacer);\r\n\t\ttab.parentNode.appendChild(bar);\r\n\t\treturn bar;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onResize(r, tab, head, bar, cm) {\r\n\t\ttab.style.overflowX = (tab.scrollWidth < tab.clientWidth + 2) ? 'hidden' : null;\r\n\t\r\n\t\tif (head) _updateHeaderSize(r, tab, head, cm);\r\n\t\tif (bar) _updateScrollBarSize(tab, bar);\r\n\t\tif (head || bar) onWindowScroll(tab, head, bar, cm);\r\n\t\tif (head) onTableScroll(tab, head, cm);\r\n\t}\r\n\t\r\n\tfunction _updateHeaderSize(r, tab, head, cm) {\r\n\t\tconst tw = r ? r.width : tab.getBoundingClientRect().width;\r\n\t\thead.style.maxWidth = tw + 'px';\r\n\t\thead.style.display  = 'none';\r\n\t\thead.style.top      = cm.offset + 'px';\r\n\t\r\n\t\tconst thead = tab.tHead;\r\n\t\tconst hw = thead.getBoundingClientRect().width;\r\n\t\tconst ht = head.firstChild;\r\n\t\tht.style.width = hw + 'px';\r\n\t\r\n\t\tconst oTrs = thead.rows;\r\n\t\tconst cTrs = ht.firstChild.rows;\r\n\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t}\r\n\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _updateScrollBarSize(tab, bar) {\r\n\t\tconst disabled = (tab.scrollWidth < tab.clientWidth + 2);\r\n\t\tbar.style.overflowX     = disabled ? 'hidden' : null;\r\n\t\tbar.style.pointerEvents = disabled ? 'none'   : null;\r\n\t\r\n\t\tbar.style.maxWidth = `${tab.clientWidth}px`;\r\n\t\tbar.style.display = 'none';\r\n\t\tconst h = parseInt(getScrollBarWidth(document.documentElement));\r\n\t\tif (0 < h) bar.style.height = (h + 2) + 'px';\r\n\t\tbar.firstChild.style.width = `${tab.scrollWidth}px`;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onWindowScroll(tab, head, bar, cm) {\r\n\t\tconst r = tab.getBoundingClientRect();\r\n\t\tconst tBottom = r.bottom;\r\n\t\tconst rh = tab.tHead.getBoundingClientRect();\r\n\t\tconst hTop = rh.top, hBottom = rh.bottom;\r\n\t\tconst wY0 = cm.offset, wY1 = window.innerHeight;\r\n\t\r\n\t\tconst inView = tBottom - hTop < cm.capableWindowHeightRate * (wY1 - wY0);\r\n\t\tconst tLeft = r.left, tScrollLeft = tab.scrollLeft;\r\n\t\tif (head) {\r\n\t\t\tconst hCy = tab.tHead.offsetHeight;\r\n\t\t\tconst f = (!inView && hTop < wY0 && wY0 < tBottom - hCy);\r\n\t\t\t_updateHeaderVisibility(head, f, tLeft, tScrollLeft);\r\n\t\t}\r\n\t\tif (bar) {\r\n\t\t\tconst f = (!inView && hBottom < wY1 && wY1 < tBottom);\r\n\t\t\t_updateBarVisibility(bar, f, tLeft, tScrollLeft);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _updateHeaderVisibility(head, visible, tabLeft, tabScrollLeft) {\r\n\t\thead.style.display = visible ? 'block' : 'none';\r\n\t\thead.style.left    = tabLeft + 'px';\r\n\t\thead.scrollLeft    = tabScrollLeft;\r\n\t}\r\n\t\r\n\tfunction _updateBarVisibility(bar, visible, tabLeft, tabScrollLeft) {\r\n\t\tbar.style.display = visible ? 'block' : 'none';\r\n\t\tbar.style.left    = tabLeft + 'px';\r\n\t\tbar.scrollLeft    = tabScrollLeft;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onTableScroll(tab, head, cm) {\r\n\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\thead.scrollLeft = sL;\r\n\t\r\n\t\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\r\n\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\t\tenableClass(r < 0.95, head, cm.styleScrollRight);\r\n\t\t\tenableClass(0.05 < r, head, cm.styleScrollLeft);\r\n\t\t} else {\r\n\t\t\tenableClass(false, head, cm.styleScrollRight);\r\n\t\t\tenableClass(false, head, cm.styleScrollLeft);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t// Utilities ---------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction getSelector(cls) {\r\n\t\tif (cls.startsWith(':')) {\r\n\t\t\treturn `*[data-${cls.substr(1).replace(/([A-Z])/g, c => '-' + c.charAt(0).toLowerCase())}]`;\r\n\t\t} else {\r\n\t\t\treturn `*${cls}`;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getScrollBarWidth(parent) {\r\n\t\tconst d = document.createElement('div');\r\n\t\td.setAttribute('style', 'position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;');\r\n\t\tparent.appendChild(d);\r\n\t\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\t\r\n\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\td.style.overflowY = 'scroll';\r\n\t\t\td.style.width = '';\r\n\t\t\tconst c = document.createElement('div');\r\n\t\t\tc.style.minHeight = '100px';\r\n\t\t\td.appendChild(c);\r\n\t\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\t\twidth = d.offsetWidth - cw;\r\n\t\t}\r\n\t\tparent.removeChild(d);\r\n\t\treturn width;\r\n\t}\n\n})(window.NACSS);\n","/**\r\n *\r\n * Usable View\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-25\r\n *\r\n */\r\n\r\n\r\nfunction initialize(tabs, opts = {}) {\r\n\tif (tabs.length === 0) return;\r\n\tconst cm = Object.assign({\r\n\t\tcapableWindowHeightRate: 0.9,\r\n\t\tstyleHeaderContainer   : ':ncTableFixedHeaderContainer',\r\n\t\tstyleHeaderTable       : ':ncTableFixedHeaderTable',\r\n\t\tstyleScrollBar         : ':ncTableFixedScrollBar',\r\n\r\n\t\tstyleFixedHeader       : ':ncFixedHeader',\r\n\t\tstyleScrollRight       : ':ncScrollRight',\r\n\t\tstyleScrollLeft        : ':ncScrollLeft',\r\n\t\toffset                 : 0,\r\n\t}, opts);\r\n\r\n\tconst cs = [], ts = [...tabs];\r\n\tfor (const tab of ts) {\r\n\t\tconst head = _createHeaderClone(tab, cm);\r\n\t\tconst bar  = _createBarClone(tab, cm);\r\n\t\tcs.push({ tab, head, bar });\r\n\r\n\t\tlet forced = false;\r\n\t\tconst el = (tar, op) => throttle(() => {\r\n\t\t\tif (forced) {\r\n\t\t\t\tforced = false;\r\n\t\t\t} else {\r\n\t\t\t\tforced = true;\r\n\t\t\t\top.scrollLeft = tar.scrollLeft;\r\n\t\t\t\tif (head) onTableScroll(tab, head, cm);\r\n\t\t\t}\r\n\t\t});\r\n\t\ttab.addEventListener('scroll', el(tab, bar));\r\n\t\tbar.addEventListener('scroll', el(bar, tab));\r\n\t}\r\n\tconst ro = new ResizeObserver((es) => {\r\n\t\tfor (const e of es) {\r\n\t\t\tconst idx = ts.indexOf(e.target);\r\n\t\t\tconst c = cs[idx];\r\n\t\t\tonResize(e.contentRect, c.tab, c.head, c.bar, cm);\r\n\t\t}\r\n\t});\r\n\tfor (const t of ts) ro.observe(t);\r\n\r\n\twindow.addEventListener('scroll', throttle(() => {\r\n\t\tfor (const c of cs) onWindowScroll(c.tab, c.head, c.bar, cm);\r\n\t}), { passive: true });\r\n\r\n\tconst sel = getSelector(cm.styleFixedHeader);\r\n\tif (sel) {\r\n\t\tconst elm = document.querySelector(sel);\r\n\t\tif (elm) {\r\n\t\t\tconst rob = new ResizeObserver(es => {\r\n\t\t\t\tcm.offset = es[0].contentRect.bottom;\r\n\t\t\t\tfor (const c of cs) onResize(null, c.tab, c.head, c.bar, cm);\r\n\t\t\t});\r\n\t\t\trob.observe(elm);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction _createHeaderClone(tab, cm) {\r\n\tlet thead = tab.tHead;\r\n\tif (!thead) {\r\n\t\tthead = _createPseudoHeader(tab);\r\n\t\tif (!thead) return null;\r\n\t\ttab.tHead = thead;\r\n\t}\r\n\tconst hc = document.createElement('div');\r\n\tenableClass(true, hc, cm.styleHeaderContainer);\r\n\ttab.parentNode.appendChild(hc);\r\n\r\n\tconst ht = document.createElement('div');\r\n\tenableClass(true, ht, cm.styleHeaderTable);\r\n\thc.appendChild(ht);\r\n\r\n\tht.appendChild(thead.cloneNode(true));\r\n\treturn hc;\r\n}\r\n\r\nfunction _createPseudoHeader(tab) {\r\n\tconst trs = tab.tBodies[0].rows;\r\n\tif (trs.length === 0) return null;\r\n\r\n\tfunction containsOnlyTh(tr) {\r\n\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\treturn false;\r\n\t}\r\n\tconst trsH = [];\r\n\tfor (const tr of trs) {\r\n\t\tif (!containsOnlyTh(tr)) break;\r\n\t\ttrsH.push(tr);\r\n\t}\r\n\tif (trsH.length === 0) return null;\r\n\r\n\tconst thead = tab.createTHead();\r\n\tfor (const tr of trsH) thead.appendChild(tr);\r\n\treturn thead;\r\n}\r\n\r\nfunction _createBarClone(tab, cm) {\r\n\tconst bar = document.createElement('div');\r\n\tenableClass(true, bar, cm.styleScrollBar);\r\n\tconst spacer = document.createElement('div');\r\n\tbar.appendChild(spacer);\r\n\ttab.parentNode.appendChild(bar);\r\n\treturn bar;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onResize(r, tab, head, bar, cm) {\r\n\ttab.style.overflowX = (tab.scrollWidth < tab.clientWidth + 2) ? 'hidden' : null;\r\n\r\n\tif (head) _updateHeaderSize(r, tab, head, cm);\r\n\tif (bar) _updateScrollBarSize(tab, bar);\r\n\tif (head || bar) onWindowScroll(tab, head, bar, cm);\r\n\tif (head) onTableScroll(tab, head, cm);\r\n}\r\n\r\nfunction _updateHeaderSize(r, tab, head, cm) {\r\n\tconst tw = r ? r.width : tab.getBoundingClientRect().width;\r\n\thead.style.maxWidth = tw + 'px';\r\n\thead.style.display  = 'none';\r\n\thead.style.top      = cm.offset + 'px';\r\n\r\n\tconst thead = tab.tHead;\r\n\tconst hw = thead.getBoundingClientRect().width;\r\n\tconst ht = head.firstChild;\r\n\tht.style.width = hw + 'px';\r\n\r\n\tconst oTrs = thead.rows;\r\n\tconst cTrs = ht.firstChild.rows;\r\n\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t}\r\n\tfunction copyWidth(o, c, tag) {\r\n\t\tconst os = o.getElementsByTagName(tag);\r\n\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction _updateScrollBarSize(tab, bar) {\r\n\tconst disabled = (tab.scrollWidth < tab.clientWidth + 2);\r\n\tbar.style.overflowX     = disabled ? 'hidden' : null;\r\n\tbar.style.pointerEvents = disabled ? 'none'   : null;\r\n\r\n\tbar.style.maxWidth = `${tab.clientWidth}px`;\r\n\tbar.style.display = 'none';\r\n\tconst h = parseInt(getScrollBarWidth(document.documentElement));\r\n\tif (0 < h) bar.style.height = (h + 2) + 'px';\r\n\tbar.firstChild.style.width = `${tab.scrollWidth}px`;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onWindowScroll(tab, head, bar, cm) {\r\n\tconst r = tab.getBoundingClientRect();\r\n\tconst tBottom = r.bottom;\r\n\tconst rh = tab.tHead.getBoundingClientRect();\r\n\tconst hTop = rh.top, hBottom = rh.bottom;\r\n\tconst wY0 = cm.offset, wY1 = window.innerHeight;\r\n\r\n\tconst inView = tBottom - hTop < cm.capableWindowHeightRate * (wY1 - wY0);\r\n\tconst tLeft = r.left, tScrollLeft = tab.scrollLeft;\r\n\tif (head) {\r\n\t\tconst hCy = tab.tHead.offsetHeight;\r\n\t\tconst f = (!inView && hTop < wY0 && wY0 < tBottom - hCy);\r\n\t\t_updateHeaderVisibility(head, f, tLeft, tScrollLeft);\r\n\t}\r\n\tif (bar) {\r\n\t\tconst f = (!inView && hBottom < wY1 && wY1 < tBottom);\r\n\t\t_updateBarVisibility(bar, f, tLeft, tScrollLeft);\r\n\t}\r\n}\r\n\r\nfunction _updateHeaderVisibility(head, visible, tabLeft, tabScrollLeft) {\r\n\thead.style.display = visible ? 'block' : 'none';\r\n\thead.style.left    = tabLeft + 'px';\r\n\thead.scrollLeft    = tabScrollLeft;\r\n}\r\n\r\nfunction _updateBarVisibility(bar, visible, tabLeft, tabScrollLeft) {\r\n\tbar.style.display = visible ? 'block' : 'none';\r\n\tbar.style.left    = tabLeft + 'px';\r\n\tbar.scrollLeft    = tabScrollLeft;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onTableScroll(tab, head, cm) {\r\n\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\thead.scrollLeft = sL;\r\n\r\n\tif (tab.scrollWidth - tab.clientWidth > 2) {  // for avoiding needless scrolling\r\n\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\tenableClass(r < 0.95, head, cm.styleScrollRight);\r\n\t\tenableClass(0.05 < r, head, cm.styleScrollLeft);\r\n\t} else {\r\n\t\tenableClass(false, head, cm.styleScrollRight);\r\n\t\tenableClass(false, head, cm.styleScrollLeft);\r\n\t}\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction getSelector(cls) {\r\n\tif (cls.startsWith(':')) {\r\n\t\treturn `*[data-${cls.substr(1).replace(/([A-Z])/g, c => '-' + c.charAt(0).toLowerCase())}]`;\r\n\t} else {\r\n\t\treturn `*${cls}`;\r\n\t}\r\n}\r\n\r\nfunction getScrollBarWidth(parent) {\r\n\tconst d = document.createElement('div');\r\n\td.setAttribute('style', 'position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;');\r\n\tparent.appendChild(d);\r\n\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\td.style.overflowY = 'scroll';\r\n\t\td.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\td.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\twidth = d.offsetWidth - cw;\r\n\t}\r\n\tparent.removeChild(d);\r\n\treturn width;\r\n}"]}