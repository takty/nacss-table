{"version":3,"sources":["table-usable-view.js","_usable-view.js"],"names":["window","NACSS","NS","ST_HEADER_CONTAINER","ST_HEADER_TABLE","ST_SCROLL_BAR","_create","tab","head","thead","tHead","trs","tBodies","rows","length","containsOnlyTh","tr","tds","getElementsByTagName","ths","trsH","i","I","push","createTHead","appendChild","createPseudoHeader","cont","document","createElement","dataset","stile","parentNode","ptab","clone","cloneNode","createHeaderClone","bar","e","spacer","createScrollBarClone","_initialize","forced","el","tar","op","throttle","scrollLeft","onTableScroll","addEventListener","initTableScroll","ResizeObserver","r","style","overflowX","scrollWidth","clientWidth","tw","width","getBoundingClientRect","maxWidth","display","top","getOffset","hw","firstChild","oTrs","cTrs","copyWidth","o","c","tag","os","cs","_updateHeaderSize","h","parseInt","d","setAttribute","body","getComputedStyle","getPropertyValue","overflowY","minHeight","cw","offsetWidth","removeChild","getScrollBarWidth","height","updateScrollBarSize","onWindowScroll","onResize","contentRect","observe","tabBottom","bottom","rh","headTop","headBottom","headH","offsetHeight","inView","innerHeight","headVisible","barVisible","visible","tabLeft","left","updateHeaderVisibility","updateScrollBarVisibility","sL","Math","max","min","fn","isRunning","args","requestAnimationFrame","tableUsableView","tabs","t","setTimeout","passive"],"mappings":"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","file":"table-usable-view.min.js","sourcesContent":["/**\n *\n * Table Style - Usable View (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-18\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t/**\r\n\t *\r\n\t * Usable View (JS)\r\n\t *\r\n\t * @author Takuto Yanagida\r\n\t * @version 2021-01-20\r\n\t *\r\n\t */\r\n\t\r\n\t\r\n\tconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\n\tconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\n\tconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\t\r\n\tconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\t\r\n\tlet getOffset = () => { return 0; };\r\n\t\r\n\t\r\n\t// -------------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction initialize(tabs) {\r\n\t\tconst cs = [];\r\n\t\tfor (const t of tabs) {\r\n\t\t\tconst c = _create(t);\r\n\t\t\tsetTimeout(() => { _initialize(c.tab, c.head, c.bar); }, 10);\r\n\t\t\tcs.push(c);\r\n\t\t}\r\n\t\twindow.addEventListener('scroll', throttle(() => { for (const c of cs) {\r\n\t\t\tonWindowScroll(c.tab, c.head, c.bar);\r\n\t\t}}), { passive: true });\r\n\t}\r\n\t\r\n\tfunction _create(tab) {\r\n\t\tconst head = createHeaderClone(tab);\r\n\t\tconst bar = createScrollBarClone(tab);\r\n\t\treturn {tab, head, bar};\r\n\t}\r\n\t\r\n\tfunction createHeaderClone(tab) {\r\n\t\tlet thead = tab.tHead;\r\n\t\tif (!thead) {\r\n\t\t\tthead = createPseudoHeader(tab);\r\n\t\t\tif (!thead) return null;\r\n\t\t\ttab.tHead = thead;\r\n\t\t}\r\n\t\tconst cont = document.createElement('div');\r\n\t\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\t\ttab.parentNode.appendChild(cont);\r\n\t\r\n\t\tconst ptab = document.createElement('div');\r\n\t\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\t\tcont.appendChild(ptab);\r\n\t\r\n\t\tconst clone = thead.cloneNode(true);\r\n\t\tptab.appendChild(clone);\r\n\t\treturn cont;\r\n\t}\r\n\t\r\n\tfunction createPseudoHeader(tab) {\r\n\t\tconst tbody = tab.tBodies[0];\r\n\t\tconst trs = tbody.rows;\r\n\t\tif (trs.length === 0) return null;\r\n\t\r\n\t\tfunction containsOnlyTh(tr) {\r\n\t\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\r\n\t\tconst trsH = [];\r\n\t\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\t\tconst tr = trs[i];\r\n\t\t\tif (!containsOnlyTh(tr)) break;\r\n\t\t\ttrsH.push(tr);\r\n\t\t}\r\n\t\tif (trsH.length === 0) return null;\r\n\t\r\n\t\tconst thead = tab.createTHead();\r\n\t\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\t\tthead.appendChild(trsH[i]);\r\n\t\t}\r\n\t\treturn thead;\r\n\t}\r\n\t\r\n\tfunction createScrollBarClone(tab) {\r\n\t\tconst e = document.createElement('div');\r\n\t\te.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\tconst spacer = document.createElement('div');\r\n\t\te.appendChild(spacer);\r\n\t\ttab.parentNode.appendChild(e);\r\n\t\treturn e;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction _initialize(tab, head, bar) {\r\n\t\tinitTableScroll(tab, head, bar);\r\n\t\tnew ResizeObserver((e) => {\r\n\t\t\tonResize(e[0].contentRect, tab, head, bar);\r\n\t\t}).observe(tab);\r\n\t}\r\n\t\r\n\tfunction initTableScroll(tab, head, bar) {\r\n\t\tlet forced = false;\r\n\t\tconst el = (tar, op) => throttle(() => {\r\n\t\t\tif (forced) {\r\n\t\t\t\tforced = false;\r\n\t\t\t} else {\r\n\t\t\t\tforced = true;\r\n\t\t\t\top.scrollLeft = tar.scrollLeft;\r\n\t\t\t\tonTableScroll(tab, head);\r\n\t\t\t}\r\n\t\t});\r\n\t\ttab.addEventListener('scroll', el(tab, bar));\r\n\t\tbar.addEventListener('scroll', el(bar, tab));\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onResize(r, tab, head, bar) {\r\n\t\ttab.style.overflowX = (tab.scrollWidth < tab.clientWidth + 2) ? 'hidden' : '';\r\n\t\r\n\t\tif (head) _updateHeaderSize(r, tab, head);\r\n\t\tif (bar) updateScrollBarSize(tab, bar);\r\n\t\tif (head || bar) onWindowScroll(tab, head, bar);\r\n\t\tonTableScroll(tab, head);\r\n\t}\r\n\t\r\n\tfunction _updateHeaderSize(r, tab, head) {\r\n\t\tconst tw = r ? r.width : tab.getBoundingClientRect().width;\r\n\t\thead.style.maxWidth = tw + 'px';\r\n\t\thead.style.display = 'none';\r\n\t\thead.style.top = getOffset() + 'px';\r\n\t\r\n\t\tconst thead = tab.tHead;\r\n\t\tconst hw = thead.getBoundingClientRect().width;\r\n\t\tconst ptab = head.firstChild;\r\n\t\tptab.style.width = hw + 'px';\r\n\t\r\n\t\tconst clone = ptab.firstChild;\r\n\t\r\n\t\tconst oTrs = thead.rows;\r\n\t\tconst cTrs = clone.rows;\r\n\t\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t\t}\r\n\t\tfunction copyWidth(o, c, tag) {\r\n\t\t\tconst os = o.getElementsByTagName(tag);\r\n\t\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateScrollBarSize(tab, bar) {\r\n\t\tbar.style.maxWidth = `${tab.clientWidth}px`;\r\n\t\tbar.style.display = 'none';\r\n\t\tconst h = parseInt(getScrollBarWidth());\r\n\t\tif (0 < h) bar.style.height = (h + 2) + 'px';\r\n\t\tbar.firstChild.style.width = `${tab.scrollWidth}px`;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onWindowScroll(tab, head, bar) {\r\n\t\tconst r = tab.getBoundingClientRect();\r\n\t\tconst tabBottom = r.bottom;\r\n\t\tconst rh = tab.tHead.getBoundingClientRect();\r\n\t\tconst headTop = rh.top, headBottom = rh.bottom;\r\n\t\r\n\t\tconst offset = getOffset();\r\n\t\tconst headH = tab.tHead.offsetHeight;\r\n\t\tconst inView = tabBottom - headTop < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\t\r\n\t\tlet headVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t\t} else if (headTop < offset) {\r\n\t\t\theadVisible = true;\r\n\t\t}\r\n\t\tlet barVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (window.innerHeight < headBottom) {  // do nothing\r\n\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t} else if (tab.scrollWidth - tab.clientWidth > 2) {\r\n\t\t\tbarVisible = true;\r\n\t\t}\r\n\t\tif (head) updateHeaderVisibility(tab, head, headVisible, r.left);\r\n\t\tif (bar) updateScrollBarVisibility(tab, bar, barVisible, r.left);\r\n\t}\r\n\t\r\n\tfunction updateHeaderVisibility(tab, head, visible, tabLeft) {\r\n\t\tif (visible) {\r\n\t\t\thead.style.top     = getOffset() + 'px';\r\n\t\t\thead.style.display = 'block';\r\n\t\t} else {\r\n\t\t\thead.style.display = 'none';\r\n\t\t}\r\n\t\thead.style.left = tabLeft + 'px';\r\n\t\thead.scrollLeft = tab.scrollLeft;\r\n\t}\r\n\t\r\n\tfunction updateScrollBarVisibility(tab, bar, visible, tabLeft) {\r\n\t\tbar.style.display = visible ? 'block' : 'none';\r\n\t\tbar.style.left = tabLeft + 'px';\r\n\t\tbar.scrollLeft = tab.scrollLeft;\r\n\t}\r\n\t\r\n\t\r\n\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction onTableScroll(tab, head) {\r\n\t\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\t\tif (head) head.scrollLeft = sL;\r\n\t}\r\n\t\r\n\t\r\n\t// Utilities ---------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction throttle(fn) {\r\n\t\tlet isRunning;\r\n\t\treturn (...args) => {\r\n\t\t\tif (isRunning) return;\r\n\t\t\tisRunning = true;\r\n\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\tisRunning = false;\r\n\t\t\t\tfn(...args);\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction getScrollBarWidth() {\r\n\t\tconst d = document.createElement('div');\r\n\t\td.setAttribute('style', `position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;`);\r\n\t\tdocument.body.appendChild(d);\r\n\t\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\t\r\n\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\td.style.overflowY = 'scroll';\r\n\t\t\td.style.width = '';\r\n\t\t\tconst c = document.createElement('div');\r\n\t\t\tc.style.minHeight = '100px';\r\n\t\t\td.appendChild(c);\r\n\t\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\t\twidth = d.offsetWidth - cw;\r\n\t\t}\r\n\t\tdocument.body.removeChild(d);\r\n\t\treturn width;\r\n\t}\r\n\t\n\tNS.tableUsableView = initialize;\n\n})(window.NACSS);\n","/**\r\n *\r\n * Usable View (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-20\r\n *\r\n */\r\n\r\n\r\nconst ST_HEADER_CONTAINER = 'fixed-table-header-container';\r\nconst ST_HEADER_TABLE     = 'fixed-table-header-table';\r\nconst ST_SCROLL_BAR       = 'fixed-table-scroll-bar';\r\n\r\nconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\r\nlet getOffset = () => { return 0; };\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nfunction initialize(tabs) {\r\n\tconst cs = [];\r\n\tfor (const t of tabs) {\r\n\t\tconst c = _create(t);\r\n\t\tsetTimeout(() => { _initialize(c.tab, c.head, c.bar); }, 10);\r\n\t\tcs.push(c);\r\n\t}\r\n\twindow.addEventListener('scroll', throttle(() => { for (const c of cs) {\r\n\t\tonWindowScroll(c.tab, c.head, c.bar);\r\n\t}}), { passive: true });\r\n}\r\n\r\nfunction _create(tab) {\r\n\tconst head = createHeaderClone(tab);\r\n\tconst bar = createScrollBarClone(tab);\r\n\treturn {tab, head, bar};\r\n}\r\n\r\nfunction createHeaderClone(tab) {\r\n\tlet thead = tab.tHead;\r\n\tif (!thead) {\r\n\t\tthead = createPseudoHeader(tab);\r\n\t\tif (!thead) return null;\r\n\t\ttab.tHead = thead;\r\n\t}\r\n\tconst cont = document.createElement('div');\r\n\tcont.dataset.stile += ' ' + ST_HEADER_CONTAINER;\r\n\ttab.parentNode.appendChild(cont);\r\n\r\n\tconst ptab = document.createElement('div');\r\n\tptab.dataset.stile += ' ' + ST_HEADER_TABLE;\r\n\tcont.appendChild(ptab);\r\n\r\n\tconst clone = thead.cloneNode(true);\r\n\tptab.appendChild(clone);\r\n\treturn cont;\r\n}\r\n\r\nfunction createPseudoHeader(tab) {\r\n\tconst tbody = tab.tBodies[0];\r\n\tconst trs = tbody.rows;\r\n\tif (trs.length === 0) return null;\r\n\r\n\tfunction containsOnlyTh(tr) {\r\n\t\tconst tds = tr.getElementsByTagName('td');\r\n\t\tconst ths = tr.getElementsByTagName('th');\r\n\t\tif (tds.length === 0 && ths.length > 0) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst trsH = [];\r\n\tfor (let i = 0, I = trs.length; i < I; i += 1) {\r\n\t\tconst tr = trs[i];\r\n\t\tif (!containsOnlyTh(tr)) break;\r\n\t\ttrsH.push(tr);\r\n\t}\r\n\tif (trsH.length === 0) return null;\r\n\r\n\tconst thead = tab.createTHead();\r\n\tfor (let i = 0; i < trsH.length; i += 1) {\r\n\t\tthead.appendChild(trsH[i]);\r\n\t}\r\n\treturn thead;\r\n}\r\n\r\nfunction createScrollBarClone(tab) {\r\n\tconst e = document.createElement('div');\r\n\te.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\tconst spacer = document.createElement('div');\r\n\te.appendChild(spacer);\r\n\ttab.parentNode.appendChild(e);\r\n\treturn e;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction _initialize(tab, head, bar) {\r\n\tinitTableScroll(tab, head, bar);\r\n\tnew ResizeObserver((e) => {\r\n\t\tonResize(e[0].contentRect, tab, head, bar);\r\n\t}).observe(tab);\r\n}\r\n\r\nfunction initTableScroll(tab, head, bar) {\r\n\tlet forced = false;\r\n\tconst el = (tar, op) => throttle(() => {\r\n\t\tif (forced) {\r\n\t\t\tforced = false;\r\n\t\t} else {\r\n\t\t\tforced = true;\r\n\t\t\top.scrollLeft = tar.scrollLeft;\r\n\t\t\tonTableScroll(tab, head);\r\n\t\t}\r\n\t});\r\n\ttab.addEventListener('scroll', el(tab, bar));\r\n\tbar.addEventListener('scroll', el(bar, tab));\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onResize(r, tab, head, bar) {\r\n\ttab.style.overflowX = (tab.scrollWidth < tab.clientWidth + 2) ? 'hidden' : '';\r\n\r\n\tif (head) _updateHeaderSize(r, tab, head);\r\n\tif (bar) updateScrollBarSize(tab, bar);\r\n\tif (head || bar) onWindowScroll(tab, head, bar);\r\n\tonTableScroll(tab, head);\r\n}\r\n\r\nfunction _updateHeaderSize(r, tab, head) {\r\n\tconst tw = r ? r.width : tab.getBoundingClientRect().width;\r\n\thead.style.maxWidth = tw + 'px';\r\n\thead.style.display = 'none';\r\n\thead.style.top = getOffset() + 'px';\r\n\r\n\tconst thead = tab.tHead;\r\n\tconst hw = thead.getBoundingClientRect().width;\r\n\tconst ptab = head.firstChild;\r\n\tptab.style.width = hw + 'px';\r\n\r\n\tconst clone = ptab.firstChild;\r\n\r\n\tconst oTrs = thead.rows;\r\n\tconst cTrs = clone.rows;\r\n\tfor (let i = 0; i < oTrs.length; i += 1) {\r\n\t\tcopyWidth(oTrs[i], cTrs[i], 'td');\r\n\t\tcopyWidth(oTrs[i], cTrs[i], 'th');\r\n\t}\r\n\tfunction copyWidth(o, c, tag) {\r\n\t\tconst os = o.getElementsByTagName(tag);\r\n\t\tconst cs = c.getElementsByTagName(tag);\r\n\t\tfor (let i = 0; i < os.length; i += 1) {\r\n\t\t\tcs[i].style.width = os[i].getBoundingClientRect().width + 'px';\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction updateScrollBarSize(tab, bar) {\r\n\tbar.style.maxWidth = `${tab.clientWidth}px`;\r\n\tbar.style.display = 'none';\r\n\tconst h = parseInt(getScrollBarWidth());\r\n\tif (0 < h) bar.style.height = (h + 2) + 'px';\r\n\tbar.firstChild.style.width = `${tab.scrollWidth}px`;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onWindowScroll(tab, head, bar) {\r\n\tconst r = tab.getBoundingClientRect();\r\n\tconst tabBottom = r.bottom;\r\n\tconst rh = tab.tHead.getBoundingClientRect();\r\n\tconst headTop = rh.top, headBottom = rh.bottom;\r\n\r\n\tconst offset = getOffset();\r\n\tconst headH = tab.tHead.offsetHeight;\r\n\tconst inView = tabBottom - headTop < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\r\n\tlet headVisible = false;\r\n\tif (inView) {  // do nothing\r\n\t} else if (tabBottom - headH < offset) {  // do nothing\r\n\t} else if (headTop < offset) {\r\n\t\theadVisible = true;\r\n\t}\r\n\tlet barVisible = false;\r\n\tif (inView) {  // do nothing\r\n\t} else if (window.innerHeight < headBottom) {  // do nothing\r\n\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t} else if (tab.scrollWidth - tab.clientWidth > 2) {\r\n\t\tbarVisible = true;\r\n\t}\r\n\tif (head) updateHeaderVisibility(tab, head, headVisible, r.left);\r\n\tif (bar) updateScrollBarVisibility(tab, bar, barVisible, r.left);\r\n}\r\n\r\nfunction updateHeaderVisibility(tab, head, visible, tabLeft) {\r\n\tif (visible) {\r\n\t\thead.style.top     = getOffset() + 'px';\r\n\t\thead.style.display = 'block';\r\n\t} else {\r\n\t\thead.style.display = 'none';\r\n\t}\r\n\thead.style.left = tabLeft + 'px';\r\n\thead.scrollLeft = tab.scrollLeft;\r\n}\r\n\r\nfunction updateScrollBarVisibility(tab, bar, visible, tabLeft) {\r\n\tbar.style.display = visible ? 'block' : 'none';\r\n\tbar.style.left = tabLeft + 'px';\r\n\tbar.scrollLeft = tab.scrollLeft;\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\nfunction onTableScroll(tab, head) {\r\n\tconst sL = Math.max(0, Math.min(tab.scrollLeft, tab.scrollWidth - tab.offsetWidth));  // for iOS\r\n\tif (head) head.scrollLeft = sL;\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction throttle(fn) {\r\n\tlet isRunning;\r\n\treturn (...args) => {\r\n\t\tif (isRunning) return;\r\n\t\tisRunning = true;\r\n\t\trequestAnimationFrame(() => {\r\n\t\t\tisRunning = false;\r\n\t\t\tfn(...args);\r\n\t\t});\r\n\t};\r\n}\r\n\r\nfunction getScrollBarWidth() {\r\n\tconst d = document.createElement('div');\r\n\td.setAttribute('style', `position:absolute;bottom:100%;width:calc(100vw - 100%);height:1px;`);\r\n\tdocument.body.appendChild(d);\r\n\tlet width = 0 | window.getComputedStyle(d).getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\td.style.overflowY = 'scroll';\r\n\t\td.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\td.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c).getPropertyValue('width');\r\n\t\twidth = d.offsetWidth - cw;\r\n\t}\r\n\tdocument.body.removeChild(d);\r\n\treturn width;\r\n}\r\n"]}