{"version":3,"sources":["table-neat-wrap.js"],"names":["window","NACSS","NS","CELL_MIN_RATIO","apply","table","dummyCell","hasAttribute","removeAttribute","style","width","maxWidth","tBodies","offsetWidth","clientWidth","addNoNeatWrap","thead","tHead","tbody","tfoot","tFoot","count","rows","length","countRows","grid","cells","addCells","tab","i","w","a","push","y","row","tds","x","td","colSpan","getAttribute","rowSpan","p","q","nr","makeCellGrid","newWs","data","dummy","wrapped","gridRow","innerHTML","trim","aw","padH","l","Math","round","clientHeight","padV","lineHeight","minW","tempW","tempH","cellMinWidth","max","widthNew","widthFix","origTableWidth","realloc","min","origCellWidths","widenTableWidth","calcNewWidths","getElementsByTagName","s","getComputedStyle","parseFloat","paddingLeft","paddingRight","paddingTop","paddingBottom","collectMetrics","ws","whiteSpace","minWidth","setCellWidth","display","pw","parentElement","trs","tr","hasChildNodes","cns","childNodes","j","cn","tn","tagName","tableNeatWrapInitialize","tabs","lt","d","document","createElement","position","visibility","appendChild","createDummyCell","t","removeChild"],"mappings":"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","file":"table-neat-wrap.min.js","sourcesContent":["/**\r\n *\r\n * Table Style - Neat Wrap (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2020-12-30\r\n *\r\n */\r\n\r\n\r\nwindow.NACSS = window['NACSS'] || {};\r\n\r\n\r\n(function (NS) {\r\n\r\n\tconst NNW_MIN_WIDTH_RATE  = 0.1;\r\n\tconst CELL_MIN_WIDTH      = 120;\r\n\tconst CELL_MIN_WIDTH_RATE = 0.15;\r\n\tconst CELL_MIN_RATIO      = 2 / 3;  // width : height\r\n\tconst MAX_ROW_COUNT       = 200;\r\n\r\n\tNS.tableNeatWrapInitialize = initialize;\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\tfunction initialize(tabs) {\r\n\t\tif (tabs.length === 0) return;\r\n\t\tconst lt = tabs[tabs.length - 1];\r\n\t\tconst d = createDummyCell(lt);\r\n\t\tfor (const t of tabs) apply(t, d);\r\n\t\tlt.removeChild(d);\r\n\t}\r\n\r\n\tfunction createDummyCell(table) {\r\n\t\tconst dummy = document.createElement('td');\r\n\t\tdummy.style.display    = 'inline-block';\r\n\t\tdummy.style.position   = 'fixed';\r\n\t\tdummy.style.visibility = 'hidden';\r\n\t\ttable.appendChild(dummy);\r\n\t\treturn dummy;\r\n\t}\r\n\r\n\tfunction apply(table, dummyCell) {\r\n\t\tif (table.hasAttribute('width')) table.removeAttribute('width');\r\n\t\ttable.style.width    = '';\r\n\t\ttable.style.maxWidth = '';\r\n\r\n\t\tconst tbody = table.tBodies[0];\r\n\t\tif (tbody.offsetWidth <= table.clientWidth) return addNoNeatWrap(table);\r\n\t\tif (MAX_ROW_COUNT < countRows(table)) return addNoNeatWrap(table);\r\n\r\n\t\tconst grid = makeCellGrid(table);\r\n\t\tif (grid.length === 0) return addNoNeatWrap(table);\r\n\r\n\t\tconst newWs = [];\r\n\t\tfor (let x = 0; x < grid[0].length; x += 1) newWs.push(false);\r\n\r\n\t\tconst data = collectMetrics(table, grid);\r\n\t\tcalcNewWidths(grid, data, newWs, dummyCell);\r\n\t\tsetCellWidth(grid, newWs);\r\n\t}\r\n\r\n\tfunction addNoNeatWrap(table) {\r\n\t\t// NS.addStile(table, 'no-neat-wrap');\r\n\t\ttable.style.display = 'table';\r\n\t\tconst pw = table.parentElement.clientWidth;\r\n\t\tconst w = table.clientWidth;\r\n\t\tif (pw - w < w * NNW_MIN_WIDTH_RATE) table.style.width = '100%';\r\n\t}\r\n\r\n\tfunction countRows(table) {\r\n\t\tconst thead = table.tHead;\r\n\t\tconst tbody = table.tBodies[0];\r\n\t\tconst tfoot = table.tFoot;\r\n\r\n\t\tlet count = 0;\r\n\t\tif (thead) count += thead.rows.length;\r\n\t\tif (tbody) count += tbody.rows.length;\r\n\t\tif (tfoot) count += tfoot.rows.length;\r\n\t\treturn count;\r\n\t}\r\n\r\n\tfunction collectMetrics(table, grid) {\r\n\t\tconst td = table.getElementsByTagName('td')[0];\r\n\t\tconst s = getComputedStyle(td);\r\n\r\n\t\tconst padH = parseFloat(s.paddingLeft) + parseFloat(s.paddingRight);\r\n\t\tconst padV = parseFloat(s.paddingTop) + parseFloat(s.paddingBottom);\r\n\t\tconst lineHeight = parseFloat(s.lineHeight);\r\n\t\tconst origTableWidth = table.clientWidth;\r\n\r\n\t\tconst cellMinWidth = Math.max(CELL_MIN_WIDTH, origTableWidth * CELL_MIN_WIDTH_RATE);\r\n\t\tconst origCellWidths = [];\r\n\t\tfor (let x = 0; x < grid[0].length; x += 1) origCellWidths.push(grid[0][x].clientWidth);\r\n\r\n\t\treturn { padH, padV, lineHeight, origTableWidth, origCellWidths, cellMinWidth };\r\n\t}\r\n\r\n\tfunction setCellWidth(grid, ws) {\r\n\t\tfor (let y = 0; y < grid.length; y += 1) {\r\n\t\t\tconst gridRow = grid[y];\r\n\t\t\tfor (let x = 0; x < gridRow.length; x += 1) {\r\n\t\t\t\tconst td = gridRow[x], w = ws[x];\r\n\t\t\t\tif (td === undefined || td === null || typeof td === 'number' || w === false) continue;\r\n\t\t\t\ttd.style.whiteSpace = 'normal';\r\n\t\t\t\ttd.style.minWidth   = w + 'px';\r\n\t\t\t\ttd.style.width      = '';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\tfunction makeCellGrid(table) {\r\n\t\tconst thead = table.tHead;\r\n\t\tconst tbody = table.tBodies[0];\r\n\t\tconst tfoot = table.tFoot;\r\n\r\n\t\tconst cells = [];\r\n\t\tif (thead) addCells(thead.rows, cells);\r\n\t\tif (tbody) addCells(tbody.rows, cells);\r\n\t\tif (tfoot) addCells(tfoot.rows, cells);\r\n\r\n\t\tlet maxWidth = 0, tab = [];\r\n\t\tfor (let i = 0; i < cells.length; i += 1) {\r\n\t\t\tconst w = cells[i].length;\r\n\t\t\tif (maxWidth < w) maxWidth = w;\r\n\t\t}\r\n\t\tfor (let i = 0; i < cells.length; i += 1) {\r\n\t\t\tconst a = [];\r\n\t\t\ta.length = maxWidth;\r\n\t\t\ttab.push(a);\r\n\t\t}\r\n\r\n\t\tfor (let y = 0; y < tab.length; y += 1) {\r\n\t\t\tconst row = tab[y];\r\n\t\t\tconst tds = cells[y];\r\n\t\t\tlet i = 0;\r\n\r\n\t\t\tfor (let x = 0; x < maxWidth; x += 1) {\r\n\t\t\t\tif (typeof row[x] === 'number' || row[x] === null) continue;\r\n\r\n\t\t\t\tconst td = tds[i]\r\n\t\t\t\tconst colSpan = td.getAttribute('colSpan') | 1;\r\n\t\t\t\tconst rowSpan = td.getAttribute('rowSpan');\r\n\t\t\t\trow[x] = td;\r\n\r\n\t\t\t\tif (1 < colSpan) {\r\n\t\t\t\t\tfor (let p = 1; p < colSpan; p += 1) row[x + p] = p;\r\n\t\t\t\t}\r\n\t\t\t\tif (1 < rowSpan) {\r\n\t\t\t\t\tfor (let q = 1; q < rowSpan; q += 1) {\r\n\t\t\t\t\t\tconst nr = tab[y + q];\r\n\t\t\t\t\t\tfor (let p = 0; p < colSpan; p += 1) nr[x + p] = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ti += 1;\r\n\t\t\t\tif (tds.length <= i) break;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tab;\r\n\t}\r\n\r\n\tfunction addCells(trs, cells) {\r\n\t\tfor (let i = 0; i < trs.length; i += 1) {\r\n\t\t\tconst tr = trs[i], row = [];\r\n\t\t\tif (tr.hasChildNodes()) {\r\n\t\t\t\tconst cns = tr.childNodes;\r\n\t\t\t\tfor (let j = 0; j < cns.length; j += 1) {\r\n\t\t\t\t\tconst cn = cns[j], tn = cn.tagName;\r\n\t\t\t\t\tif (tn === 'TD' || tn === 'TH') row.push(cn);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcells.push(row);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\tfunction calcNewWidths(grid, data, newWs, dummy) {\r\n\t\tconst wrapped = [];\r\n\r\n\t\tfor (let y = 0; y < grid.length; y += 1) {\r\n\t\t\tconst gridRow = grid[y];\r\n\r\n\t\t\tfor (let x = 0; x < gridRow.length; x += 1) {\r\n\t\t\t\twrapped[x] = false;\r\n\t\t\t\tconst td = gridRow[x];\r\n\t\t\t\tif (td === undefined || td === null || typeof td === 'number') continue;\r\n\t\t\t\tif (x < gridRow.length - 1 && typeof gridRow[x + 1] === 'number') continue;\r\n\r\n\t\t\t\ttd.innerHTML = td.innerHTML.trim();  // trim!!\r\n\t\t\t\tdummy.innerHTML = td.innerHTML + 'm';  // for adding error factor\r\n\t\t\t\tconst aw = dummy.clientWidth - data.padH;\r\n\t\t\t\tconst l = Math.round((dummy.clientHeight - data.padV) / data.lineHeight);\r\n\r\n\t\t\t\tlet minW = 0;\r\n\t\t\t\tfor (let i = 1;; i += 1) {\r\n\t\t\t\t\tconst tempW = aw / i + data.padH;\r\n\t\t\t\t\tconst tempH = l * (i * data.lineHeight) + data.padV;\r\n\t\t\t\t\tif (tempW < data.cellMinWidth || tempW / tempH < CELL_MIN_RATIO) break;\r\n\t\t\t\t\tif (1 < i) wrapped[x] = true;\r\n\t\t\t\t\tminW = tempW;\r\n\t\t\t\t}\r\n\t\t\t\tif (minW) newWs[x] = Math.max(newWs[x], minW);\r\n\t\t\t}\r\n\t\t}\r\n\t\twidenTableWidth(newWs, wrapped, data);\r\n\t}\r\n\r\n\tfunction widenTableWidth(newWs, wrapped, data) {\r\n\t\tlet widthNew = 0, widthFix = 0;\r\n\t\tfor (let i = 0; i < newWs.length; i += 1) {\r\n\t\t\tif (newWs[i] === false) return;\r\n\t\t\tif (wrapped[i]) {\r\n\t\t\t\twidthNew += newWs[i];\r\n\t\t\t} else {\r\n\t\t\t\twidthFix += newWs[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (widthNew + widthFix < data.origTableWidth) {\r\n\t\t\tlet realloc = data.origTableWidth - widthFix;\r\n\t\t\tfor (let i = 0; i < newWs.length; i += 1) {\r\n\t\t\t\tif (wrapped[i]) {\r\n\t\t\t\t\tlet w = newWs[i] / widthNew * realloc;\r\n\t\t\t\t\tw = Math.min(w, data.origCellWidths[i]);\r\n\t\t\t\t\trealloc  -= (w - newWs[i]);\r\n\t\t\t\t\twidthNew -= (w - newWs[i]);\r\n\t\t\t\t\tnewWs[i] = w;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n})(window.NACSS);\r\n"]}