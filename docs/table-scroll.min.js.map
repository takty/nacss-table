{"version":3,"sources":["table-scroll.js","_scroll.js"],"names":["window","NACSS","NS","scrollBarWidth","throttle","fn","isRunning","run","requestAnimationFrame","FixedHeaderTable","constructor","tab","style","height","this","_table","_headerHeight","_isEnlarged","_windowWidth","Math","min","outerWidth","innerWidth","_create","setTimeout","_initialize","_sbar","_createScrollBarClone","caps","getElementsByTagName","_capt","length","innerHTML","sbar","document","createElement","dataset","stile","parentNode","appendChild","spacer","bg","getComputedStyle","backgroundColor","_initTableScroll","_resize","_adjustUnexpectedScrollBar","tableScrollChanged","sbarScrollChanged","addEventListener","scrollLeft","_onTableScroll","_isScrollable","t","scrollWidth","clientWidth","onWindowResize","ww","overflowX","_updateScrollBarSize","onWindowScroll","maxWidth","display","h","parseInt","_getScrollBarWidth","tbody","tBodies","firstChild","width","ceil","tr","getBoundingClientRect","tabTop","top","tabBottom","bottom","capH","offsetHeight","headH","sbarVisible","innerHeight","updateScrollBarVisibility","left","visible","tabLeft","_calcShadeStyle","r","classList","remove","add","dummy","position","body","getPropertyValue","overflowY","c","minHeight","cw","offsetWidth","removeChild","tableScroll","tabs","conts","i","push","passive"],"mappings":"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","file":"table-scroll.min.js","sourcesContent":["/**\n *\n * Table Style - Scroll (JS)\n *\n * @author Takuto Yanagida\n * @version 2021-01-15\n *\n */\n\n\nwindow.NACSS = window['NACSS'] || {};\n\n\n(function (NS) {\n\n\t/**\r\n\t *\r\n\t * Scroll (JS)\r\n\t *\r\n\t * @author Takuto Yanagida\r\n\t * @version 2021-01-15\r\n\t *\r\n\t */\r\n\t\r\n\t\r\n\tconst SEL_TARGET = '.stile';\r\n\tconst ST_SCROLL_BAR = 'fixed-table-scroll-bar';\r\n\tconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\t\r\n\tlet getOffset = () => { return 0; };\r\n\tlet scrollBarWidth;\r\n\t\r\n\t\r\n\t// -------------------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction initialize(tabs) {\r\n\t\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\t\tconst conts = [];\r\n\t\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\t\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\t\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n\t}\r\n\t\r\n\tfunction throttle(fn) {\r\n\t\tlet isRunning;\r\n\t\tfunction run() {\r\n\t\t\tisRunning = false;\r\n\t\t\tfn();\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tif (isRunning) return;\r\n\t\t\tisRunning = true;\r\n\t\t\trequestAnimationFrame(run);\r\n\t\t};\r\n\t}\r\n\t\r\n\tclass FixedHeaderTable {\r\n\t\r\n\t\tconstructor (tab) {\r\n\t\t\tif (tab.style.height) tab.style.height = '';\r\n\t\t\tthis._table        = tab;\r\n\t\t\tthis._headerHeight = 0;\r\n\t\t\tthis._isEnlarged   = false;\r\n\t\t\tthis._windowWidth  = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\tthis._create();\r\n\t\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t\t}\r\n\t\r\n\t\t_create() {\r\n\t\t\tthis._sbar = this._createScrollBarClone();\r\n\t\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t\t\tif (this._capt) this._capt.innerHTML = `<span>${this._capt.innerHTML}</span>`;\r\n\t\t}\r\n\t\r\n\t\t_createScrollBarClone() {\r\n\t\t\tconst sbar = document.createElement('div');\r\n\t\t\tsbar.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\t\tthis._table.parentNode.appendChild(sbar);\r\n\t\t\tconst spacer = document.createElement('div');\r\n\t\t\tsbar.appendChild(spacer);\r\n\t\t\treturn sbar;\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\t_initialize() {\r\n\t\t\tconst bg = getComputedStyle(this._table).backgroundColor;\r\n\t\t\tif (bg && bg !== 'transparent') this._table.dataset['background'] = bg;\r\n\t\r\n\t\t\tthis._initTableScroll();\r\n\t\t\tthis._resize();\r\n\t\t\tthis._adjustUnexpectedScrollBar()\r\n\t\t}\r\n\t\r\n\t\t_initTableScroll() {\r\n\t\t\tlet tableScrollChanged = false;\r\n\t\t\tlet sbarScrollChanged  = false;\r\n\t\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\t\tif (tableScrollChanged) {\r\n\t\t\t\t\ttableScrollChanged = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis._onTableScroll();\r\n\t\t\t}));\r\n\t\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\t\ttableScrollChanged = true;\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\r\n\t\t_isScrollable() {\r\n\t\t\tconst t = this._table;\r\n\t\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\tonWindowResize() {\r\n\t\t\tthis._adjustUnexpectedScrollBar();\r\n\t\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\t\tif (this._windowWidth === ww) return;\r\n\t\t\tthis._windowWidth = ww;\r\n\t\t\tthis._resize();\r\n\t\t}\r\n\t\r\n\t\t_adjustUnexpectedScrollBar() {\r\n\t\t\tconst t = this._table;\r\n\t\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t\t}\r\n\t\r\n\t\t_resize() {\r\n\t\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\t\tif (this._sbar) this.onWindowScroll();\r\n\t\t\tthis._onTableScroll();\r\n\t\t}\r\n\t\r\n\t\t_updateScrollBarSize(sbar) {\r\n\t\t\tsbar.style.maxWidth = this._table.clientWidth + 'px';\r\n\t\t\tsbar.style.display = 'none';\r\n\t\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\t\tif (0 < h) sbar.style.height = (h + 2) + 'px';\r\n\t\r\n\t\t\tconst tbody = this._table.tBodies[0];\r\n\t\t\tconst spacer = sbar.firstChild;\r\n\t\t\tspacer.style.width = Math.ceil(tbody.clientWidth) + 'px';\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\tonWindowScroll() {\r\n\t\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\t\tconst offset = getOffset();\r\n\t\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\t\tconst headH  = this._headerHeight;\r\n\t\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\t\r\n\t\t\tlet sbarVisible = false;\r\n\t\t\tif (inView) {  // do nothing\r\n\t\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t\t} else if (this._isScrollable()) {\r\n\t\t\t\tsbarVisible = true;\r\n\t\t\t}\r\n\t\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t\t}\r\n\t\r\n\t\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\t\tconst sbar = this._sbar;\r\n\t\t\tsbar.style.display = visible ? 'block' : 'none';\r\n\t\t\tsbar.style.left = tabLeft + 'px';\r\n\t\t\tsbar.scrollLeft = this._table.scrollLeft;\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// ---------------------------------------------------------------------\r\n\t\r\n\t\r\n\t\t_onTableScroll() {\r\n\t\t\tif (this._isScrollable()) this._calcShadeStyle();\r\n\t\t\t// const [img, y] = this._isScrollable() ? this._calcShadeStyle() : [null, null];\r\n\t\t\t// this._table.style.backgroundImage = img;\r\n\t\t\t// this._table.style.backgroundPositionY = y;\r\n\t\t}\r\n\t\r\n\t\t_calcShadeStyle() {\r\n\t\t\tconst tab = this._table;\r\n\t\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\t\tif (r < 0.1) tab.classList.remove('left-shade');\r\n\t\t\telse tab.classList.add('left-shade');\r\n\t\t\tif (0.9 < r) tab.classList.remove('right-shade');\r\n\t\t\telse tab.classList.add('right-shade');\r\n\t\t\t// let rl = 0.25, rr = 0.25;\r\n\t\t\t// if (r < 0.1) rl *= r / 0.1;\r\n\t\t\t// if (0.9 < r) rr *= (1 - r) / 0.1;\r\n\t\t\t// const sl = `linear-gradient(to left, transparent, rgba(0,0,0,${rl}) 1.25rem)`;\r\n\t\t\t// const sr = `linear-gradient(to right, transparent, rgba(0,0,0,${rr}) 1.25rem)`;\r\n\t\t\t// const ch = this._capt ? (this._capt.offsetHeight + 'px') : '0';\r\n\t\t\t// return [`${sl},${sr}`, `${ch},${ch}`];\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t// Utilities ---------------------------------------------------------------\r\n\t\r\n\t\r\n\tfunction _getScrollBarWidth() {\r\n\t\tconst dummy = document.createElement('div');\r\n\t\tdummy.style.bottom = '100%';\r\n\t\tdummy.style.height = '1px';\r\n\t\tdummy.style.position = 'absolute';\r\n\t\tdummy.style.width = 'calc(100vw - 100%)';\r\n\t\tdocument.body.appendChild(dummy);\r\n\t\tlet width = 0 | window.getComputedStyle(dummy, '').getPropertyValue('width');\r\n\t\r\n\t\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\t\tdummy.style.overflowY = 'scroll';\r\n\t\t\tdummy.style.width = '';\r\n\t\t\tconst c = document.createElement('div');\r\n\t\t\tc.style.minHeight = '100px';\r\n\t\t\tdummy.appendChild(c);\r\n\t\t\tconst cw = 0 | window.getComputedStyle(c, '').getPropertyValue('width');\r\n\t\t\twidth = dummy.offsetWidth - cw;\r\n\t\t}\r\n\t\tdocument.body.removeChild(dummy);\r\n\t\treturn width;\r\n\t}\r\n\t\n\tNS.tableScroll = initialize;\n\n})(window.NACSS);\n","/**\r\n *\r\n * Scroll (JS)\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2021-01-15\r\n *\r\n */\r\n\r\n\r\nconst SEL_TARGET = '.stile';\r\nconst ST_SCROLL_BAR = 'fixed-table-scroll-bar';\r\nconst CAPABLE_WINDOW_HEIGHT_RATIO = 0.9;\r\n\r\nlet getOffset = () => { return 0; };\r\nlet scrollBarWidth;\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nfunction initialize(tabs) {\r\n\tscrollBarWidth = parseInt(_getScrollBarWidth());\r\n\tconst conts = [];\r\n\tfor (let i = 0; i < tabs.length; i += 1) conts.push(new FixedHeaderTable(tabs[i]));\r\n\twindow.addEventListener('scroll', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowScroll(); }), { passive: true });\r\n\twindow.addEventListener('resize', throttle(() => { for (let i = 0; i < conts.length; i += 1) conts[i].onWindowResize(); }), { passive: true });\r\n}\r\n\r\nfunction throttle(fn) {\r\n\tlet isRunning;\r\n\tfunction run() {\r\n\t\tisRunning = false;\r\n\t\tfn();\r\n\t}\r\n\treturn () => {\r\n\t\tif (isRunning) return;\r\n\t\tisRunning = true;\r\n\t\trequestAnimationFrame(run);\r\n\t};\r\n}\r\n\r\nclass FixedHeaderTable {\r\n\r\n\tconstructor (tab) {\r\n\t\tif (tab.style.height) tab.style.height = '';\r\n\t\tthis._table        = tab;\r\n\t\tthis._headerHeight = 0;\r\n\t\tthis._isEnlarged   = false;\r\n\t\tthis._windowWidth  = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tthis._create();\r\n\t\tsetTimeout(() => { this._initialize(); }, 10);\r\n\t}\r\n\r\n\t_create() {\r\n\t\tthis._sbar = this._createScrollBarClone();\r\n\t\tconst caps = this._table.getElementsByTagName('caption');\r\n\t\tthis._capt = caps.length ? caps[0] : null;\r\n\t\tif (this._capt) this._capt.innerHTML = `<span>${this._capt.innerHTML}</span>`;\r\n\t}\r\n\r\n\t_createScrollBarClone() {\r\n\t\tconst sbar = document.createElement('div');\r\n\t\tsbar.dataset.stile += ' ' + ST_SCROLL_BAR;\r\n\t\tthis._table.parentNode.appendChild(sbar);\r\n\t\tconst spacer = document.createElement('div');\r\n\t\tsbar.appendChild(spacer);\r\n\t\treturn sbar;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_initialize() {\r\n\t\tconst bg = getComputedStyle(this._table).backgroundColor;\r\n\t\tif (bg && bg !== 'transparent') this._table.dataset['background'] = bg;\r\n\r\n\t\tthis._initTableScroll();\r\n\t\tthis._resize();\r\n\t\tthis._adjustUnexpectedScrollBar()\r\n\t}\r\n\r\n\t_initTableScroll() {\r\n\t\tlet tableScrollChanged = false;\r\n\t\tlet sbarScrollChanged  = false;\r\n\t\tthis._table.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (tableScrollChanged) {\r\n\t\t\t\ttableScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._sbar.scrollLeft = this._table.scrollLeft;\r\n\t\t\t\tsbarScrollChanged = true;\r\n\t\t\t}\r\n\t\t\tthis._onTableScroll();\r\n\t\t}));\r\n\t\tthis._sbar.addEventListener('scroll', throttle(() => {\r\n\t\t\tif (sbarScrollChanged) {\r\n\t\t\t\tsbarScrollChanged = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis._table.scrollLeft = this._sbar.scrollLeft;\r\n\t\t\t\ttableScrollChanged = true;\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\t_isScrollable() {\r\n\t\tconst t = this._table;\r\n\t\treturn (t.scrollWidth - t.clientWidth > 2);  // for avoiding needless scrolling\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowResize() {\r\n\t\tthis._adjustUnexpectedScrollBar();\r\n\t\tconst ww = Math.min(window.outerWidth, window.innerWidth);  // for iOS\r\n\t\tif (this._windowWidth === ww) return;\r\n\t\tthis._windowWidth = ww;\r\n\t\tthis._resize();\r\n\t}\r\n\r\n\t_adjustUnexpectedScrollBar() {\r\n\t\tconst t = this._table;\r\n\t\tt.style.overflowX = (t.scrollWidth < t.clientWidth + 2) ? 'hidden' : '';\r\n\t}\r\n\r\n\t_resize() {\r\n\t\tif (this._sbar) this._updateScrollBarSize(this._sbar);\r\n\t\tif (this._sbar) this.onWindowScroll();\r\n\t\tthis._onTableScroll();\r\n\t}\r\n\r\n\t_updateScrollBarSize(sbar) {\r\n\t\tsbar.style.maxWidth = this._table.clientWidth + 'px';\r\n\t\tsbar.style.display = 'none';\r\n\t\tconst h = parseInt(_getScrollBarWidth());\r\n\t\tif (0 < h) sbar.style.height = (h + 2) + 'px';\r\n\r\n\t\tconst tbody = this._table.tBodies[0];\r\n\t\tconst spacer = sbar.firstChild;\r\n\t\tspacer.style.width = Math.ceil(tbody.clientWidth) + 'px';\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\tonWindowScroll() {\r\n\t\tconst tr     = this._table.getBoundingClientRect();\r\n\t\tconst tabTop = tr.top, tabBottom = tr.bottom;\r\n\t\tconst offset = getOffset();\r\n\t\tconst capH   = this._capt ? this._capt.offsetHeight : 0;\r\n\t\tconst headH  = this._headerHeight;\r\n\t\tconst inView = tabBottom - tabTop - capH < CAPABLE_WINDOW_HEIGHT_RATIO * (window.innerHeight - offset);\r\n\r\n\t\tlet sbarVisible = false;\r\n\t\tif (inView) {  // do nothing\r\n\t\t} else if (window.innerHeight < tabTop + capH + headH) {  // do nothing\r\n\t\t} else if (tabBottom < window.innerHeight) {  // do nothing\r\n\t\t} else if (this._isScrollable()) {\r\n\t\t\tsbarVisible = true;\r\n\t\t}\r\n\t\tif (this._sbar) this.updateScrollBarVisibility(sbarVisible, tr.left);\r\n\t}\r\n\r\n\tupdateScrollBarVisibility(visible, tabLeft) {\r\n\t\tconst sbar = this._sbar;\r\n\t\tsbar.style.display = visible ? 'block' : 'none';\r\n\t\tsbar.style.left = tabLeft + 'px';\r\n\t\tsbar.scrollLeft = this._table.scrollLeft;\r\n\t}\r\n\r\n\r\n\t// ---------------------------------------------------------------------\r\n\r\n\r\n\t_onTableScroll() {\r\n\t\tif (this._isScrollable()) this._calcShadeStyle();\r\n\t\t// const [img, y] = this._isScrollable() ? this._calcShadeStyle() : [null, null];\r\n\t\t// this._table.style.backgroundImage = img;\r\n\t\t// this._table.style.backgroundPositionY = y;\r\n\t}\r\n\r\n\t_calcShadeStyle() {\r\n\t\tconst tab = this._table;\r\n\t\tconst r = tab.scrollLeft / (tab.scrollWidth - tab.clientWidth);\r\n\t\tif (r < 0.1) tab.classList.remove('left-shade');\r\n\t\telse tab.classList.add('left-shade');\r\n\t\tif (0.9 < r) tab.classList.remove('right-shade');\r\n\t\telse tab.classList.add('right-shade');\r\n\t\t// let rl = 0.25, rr = 0.25;\r\n\t\t// if (r < 0.1) rl *= r / 0.1;\r\n\t\t// if (0.9 < r) rr *= (1 - r) / 0.1;\r\n\t\t// const sl = `linear-gradient(to left, transparent, rgba(0,0,0,${rl}) 1.25rem)`;\r\n\t\t// const sr = `linear-gradient(to right, transparent, rgba(0,0,0,${rr}) 1.25rem)`;\r\n\t\t// const ch = this._capt ? (this._capt.offsetHeight + 'px') : '0';\r\n\t\t// return [`${sl},${sr}`, `${ch},${ch}`];\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Utilities ---------------------------------------------------------------\r\n\r\n\r\nfunction _getScrollBarWidth() {\r\n\tconst dummy = document.createElement('div');\r\n\tdummy.style.bottom = '100%';\r\n\tdummy.style.height = '1px';\r\n\tdummy.style.position = 'absolute';\r\n\tdummy.style.width = 'calc(100vw - 100%)';\r\n\tdocument.body.appendChild(dummy);\r\n\tlet width = 0 | window.getComputedStyle(dummy, '').getPropertyValue('width');\r\n\r\n\tif (width === 0) {  // Window does not have any scroll bar\r\n\t\tdummy.style.overflowY = 'scroll';\r\n\t\tdummy.style.width = '';\r\n\t\tconst c = document.createElement('div');\r\n\t\tc.style.minHeight = '100px';\r\n\t\tdummy.appendChild(c);\r\n\t\tconst cw = 0 | window.getComputedStyle(c, '').getPropertyValue('width');\r\n\t\twidth = dummy.offsetWidth - cw;\r\n\t}\r\n\tdocument.body.removeChild(dummy);\r\n\treturn width;\r\n}\r\n"]}